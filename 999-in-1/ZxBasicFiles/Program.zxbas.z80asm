	.zxbasic
	org 32768
	; Defines HEAP SIZE
ZXBASIC_HEAP_SIZE EQU 128
__START_PROGRAM:
	di
	push ix
	push iy
	exx
	push hl
	exx
	ld hl, 0
	add hl, sp
	ld (__CALL_BACK__), hl
	ei
	call __MEM_INIT
	call __PRINT_INIT
__LABEL__start:
#line 1
		.org 24576
introScreenData:
		DEFW 0000h, 018Ch, 0252h, 0252h, 01CEh, 0042h, 039Ch, 0000h, 00C6h, 0129h, 00E7h, 0021h, 01CEh, 0000h, 0292h, 02D6h, 02B2h, 0292h, 0007h, 0000h
deathScreenData:
		DEFW 03FFh, 0387h, 037Bh, 037Bh, 02FDh, 02B5h, 02FDh, 02CDh, 037Bh, 03B7h, 0285h, 00FCh, 037Bh, 03B7h, 03CFh, 03CFh, 03B7h, 037Bh, 00FCh, 02FDh
winScreenData:
		DEFW 03FFh, 03FFh, 03FFh, 0303h, 0000h, 0102h, 0102h, 0102h, 0201h, 0387h, 03CFh, 03CFh, 03CFh, 03CFh, 03CFh, 0387h, 0303h, 03FFh, 03FFh, 03FFh
tetrisScreenData:
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 01FEh, 01FEh, 00CCh, 0124h, 02AAh
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 02AAh, 0349h, 0224h, 01FEh, 019Ah
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 02AAh, 00CCh, 0224h, 02AAh, 0124h
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 0349h, 019Ah, 0224h, 0124h, 0048h
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 0155h, 01B6h, 014Ah, 0224h, 019Ah
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 018Ch, 03B7h, 0349h, 02CDh, 01CEh
		DEFW 0000h, 0000h, 0000h, 0000h, 02AAh, 02AAh, 01DFh, 02AAh, 01DFh, 02AAh
		DEFW 0000h, 0000h, 02B5h, 0333h, 017Ah, 015Ah, 02AAh, 036Dh, 02DBh, 037Bh
		DEFW 0000h, 0084h, 02AAh, 0155h, 037Bh, 00CCh, 01FEh, 02AAh, 00CCh, 037Bh
arkaScreenData:
		DEFW 0000h, 0000h, 03FFh, 03FFh, 03FFh, 03FFh, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h
		DEFW 0000h, 0200h, 0300h, 0380h, 03C0h, 03E0h, 03F0h, 03F8h, 03FCh, 03FEh, 03FFh, 0000h
		DEFW 03FFh, 03FFh, 0000h, 0000h, 03FFh, 03FFh, 0000h, 0000h, 03FFh, 03FFh, 0000h, 0000h
		DEFW 0000h, 03CFh, 03CFh, 03CFh, 03CFh, 03CFh, 03CFh, 03CFh, 03CFh, 03CFh, 03CFh, 0000h
		DEFW 0084h, 0048h, 0048h, 00FCh, 01BAh, 01BAh, 03FFh, 02FDh, 0285h, 0249h, 0048h, 0000h
		DEFW 0000h, 037Bh, 03FFh, 03FFh, 037Bh, 03FFh, 03FFh, 037Bh, 03FFh, 03FFh, 037Bh, 0000h
		DEFW 0030h, 0078h, 00FCh, 01FEh, 03FFh, 03FFh, 01FEh, 00FCh, 0078h, 0030h, 0000h, 0000h
		DEFW 0030h, 0078h, 01FEh, 03FFh, 03FFh, 02B5h, 0030h, 0030h, 0330h, 0360h, 00C0h, 0000h
		DEFW 0333h, 00CCh, 0333h, 00CCh, 03FFh, 03FFh, 00CCh, 0333h, 00CCh, 0333h, 0000h, 0000h
		DEFW 03FFh, 0279h, 0279h, 0279h, 03FFh, 03FFh, 03FFh, 03FFh, 0279h, 0279h, 0279h, 03FFh
snakeScreenData:
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h
		DEFW 0000h, 0000h, 0000h, 0000h, 00C0h, 0040h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0008h, 000Ch, 0000h, 0000h, 0000h, 0000h
		DEFW 0000h, 0000h, 0000h, 0006h, 0000h, 01C0h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 000Eh, 0000h, 0180h, 0000h, 0000h, 0000h
		DEFW 0000h, 000Ch, 0000h, 0060h, 0000h, 0300h, 0000h, 0000h, 0000h, 0000h, 0201h, 0000h, 0000h, 0000h, 0003h, 0000h, 0018h, 0000h, 00C0h, 0000h
		DEFW 0070h, 0000h, 0000h, 0000h, 0000h, 0285h, 0285h, 0201h, 0201h, 0201h, 0201h, 0201h, 0201h, 0285h, 0285h, 0000h, 0000h, 0000h, 0000h, 0070h
		DEFW 0303h, 0303h, 0000h, 0000h, 00C0h, 00CCh, 000Ch, 0000h, 0000h, 0303h, 0303h, 0000h, 0000h, 000Ch, 00CCh, 00C0h, 0000h, 0000h, 0303h, 0303h
		DEFW 0000h, 00FCh, 00FCh, 0030h, 0030h, 00CCh, 00CCh, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 00CCh, 00CCh, 0030h, 0030h, 00FCh, 00FCh, 0000h
		DEFW 0303h, 0000h, 00FCh, 0000h, 0333h, 0000h, 00CCh, 0000h, 0000h, 0084h, 0084h, 0000h, 0000h, 00CCh, 0000h, 0333h, 0000h, 00FCh, 0000h, 0303h
		DEFW 0231h, 0000h, 0048h, 0000h, 0333h, 0000h, 0000h, 0000h, 0000h, 0084h, 0084h, 0000h, 0000h, 0000h, 0000h, 0333h, 0000h, 0048h, 0000h, 0231h
		DEFW 0387h, 0000h, 0084h, 0201h, 0231h, 0000h, 0084h, 0084h, 0285h, 0285h, 0285h, 0285h, 0084h, 0084h, 0000h, 0231h, 0201h, 0084h, 0000h, 0387h
bigGhostData:
		DEFW 0078h, 01FEh, 017Ah, 03B7h, 03FFh, 0333h, 0279h, 0333h, 03FFh, 0333h, 0201h, 0201h, 0201h, 034Bh, 03FFh, 03FFh, 03FFh, 03FFh, 02F7h, 0262h
#line 43
#line 6
		.org 32790
		ld hl, ZXBASIC_USER_DATA_END
#line 8
	ld de, 0
	ld hl, 0
	call RANDOMIZE
	call _InitScreen
__LABEL0:
	call _SelectGame
	or a
	jp z, __LABEL2
	call _ShowCurtain
	call _ShowWin
	jp __LABEL3
__LABEL2:
	call _ShowCurtain
	call _ShowDeath
__LABEL3:
	jp __LABEL0
__LABEL1:
	ld hl, 0
	ld b, h
	ld c, l
__END_PROGRAM:
	di
	ld hl, (__CALL_BACK__)
	ld sp, hl
	exx
	pop hl
	exx
	pop iy
	pop ix
	ei
	ret
__CALL_BACK__:
	DEFW 0
_GetKey:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
__LABEL4:
	call INKEY
	ld a, 1
	call __ASC
	ld (ix-1), a
__LABEL6:
	ld a, (ix-1)
	or a
	jp z, __LABEL4
__LABEL5:
	ld a, (ix-1)
_GetKey__leave:
	ld sp, ix
	pop ix
	ret
_MultiKeys:
#line 41
		ld a, h
		in a, (0FEh)
		cpl
		and l
#line 45
_MultiKeys__leave:
	ret
_GetKeyScanCode:
#line 59
		PROC
		LOCAL END_KEY
		LOCAL LOOP
		ld l, 1
		ld a, l
LOOP:
		cpl
		ld h, a
		in a, (0FEh)
		cpl
		and 1Fh
		jr nz, END_KEY
		ld a, l
		rla
		ld l, a
		jr nc, LOOP
		ld h, a
END_KEY:
		ld l, a
		ENDP
#line 79
_GetKeyScanCode__leave:
	ret
_Frames:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, (_counter)
_Frames__leave:
	ld sp, ix
	pop ix
	ret
_Time:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	ld hl, (_counter)
	ld de, 0
	call __U32TOFREG
	ld hl, -5
	call __PSTOREF
	push ix
	pop hl
	ld de, -5
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	ld a, 086h
	ld de, 00048h
	ld bc, 00000h
	call __DIVF
	ld hl, -5
	call __PSTOREF
	push ix
	pop hl
	ld de, -5
	add hl, de
	call __PLOADF
_Time__leave:
	ld sp, ix
	pop ix
	ret
_ResetFrameCounter:
	push ix
	ld ix, 0
	add ix, sp
#line 21
		di
#line 22
	ld hl, 0
	ld (_counter), hl
	xor a
	ld (_hiCounter), a
#line 30
		ei
#line 31
_ResetFrameCounter__leave:
	ld sp, ix
	pop ix
	ret
_PlayMusic:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
__LABEL7:
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	ld l, (ix+6)
	ld h, (ix+7)
	ex de, hl
	pop hl
	or a
	sbc hl, de
	jp nc, __LABEL8
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	push ix
	pop hl
	ld de, 4
	add hl, de
	call __ARRAY_PTR
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (_musParamA), hl
	ld l, (ix-2)
	ld h, (ix-1)
	inc hl
	ld (ix-2), l
	ld (ix-1), h
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	push ix
	pop hl
	ld de, 4
	add hl, de
	call __ARRAY_PTR
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (_musParamB), hl
	ld l, (ix-2)
	ld h, (ix-1)
	inc hl
	ld (ix-2), l
	ld (ix-1), h
	ld de, 0
	ld hl, (_musParamA)
	or a
	sbc hl, de
	jp nz, __LABEL9
	ld hl, (_musParamB)
	call __PAUSE
	jp __LABEL10
__LABEL9:
#line 41
		push hl
		ld hl, (_musParamB)
		push hl
		ld hl, (_musParamA)
		call __BEEPER
		pop hl
#line 47
__LABEL10:
	jp __LABEL7
__LABEL8:
_PlayMusic__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_getPaddedText:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld l, (ix+4)
	ld h, (ix+5)
	call __STRLEN
	ld a, l
	ld (ix-1), a
	sub (ix+9)
	ccf
	jp nc, __LABEL12
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	ld hl, 0
	push hl
	ld a, (ix+9)
	ld l, a
	ld h, 0
	dec hl
	push hl
	xor a
	call __STRSLICE
	jp _getPaddedText__leave
__LABEL12:
	ld l, (ix+4)
	ld h, (ix+5)
	ld d, h
	ld e, l
	ld bc, -4
	call __PSTORE_STR
	ld (ix-2), 1
	jp __LABEL13
__LABEL16:
	ld l, (ix+6)
	ld h, (ix+7)
	push hl
	ld l, (ix-4)
	ld h, (ix-3)
	ex de, hl
	pop hl
	call __ADDSTR
	ld d, h
	ld e, l
	ld bc, -4
	call __PSTORE_STR2
__LABEL17:
	inc (ix-2)
__LABEL13:
	ld a, (ix-2)
	push af
	ld a, (ix+9)
	sub (ix-1)
	pop hl
	cp h
	jp nc, __LABEL16
__LABEL15:
	ld l, (ix-4)
	ld h, (ix-3)
	call __LOADSTR
_getPaddedText__leave:
	ex af, af'
	exx
	ld l, (ix+4)
	ld h, (ix+5)
	call __MEM_FREE
	ld l, (ix+6)
	ld h, (ix+7)
	call __MEM_FREE
	ld l, (ix-4)
	ld h, (ix-3)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_InitScreen:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld hl, _sprites.__DATA__
	ld (_udgAddress), hl
	ld a, 7
	call INK
	call COPY_ATTR
	xor a
	call PAPER
	call COPY_ATTR
	ld a, 1
	call BRIGHT
	call COPY_ATTR
	xor a
	call BORDER
	call CLS
	xor a
	push af
	ld a, 10
	call PRINT_AT
	ld hl, __LABEL18
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 1
	call INK
	call COPY_ATTR
	ld a, 7
	call PAPER
	call COPY_ATTR
	xor a
	call BRIGHT
	call COPY_ATTR
	ld a, 2
	push af
	ld a, 7
	call PRINT_AT
	ld hl, __LABEL19
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld (ix-1), 1
	jp __LABEL20
__LABEL23:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	inc hl
	inc hl
	ld a, l
	push af
	ld a, 7
	call PRINT_AT
	ld hl, __LABEL25
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, (ix-1)
	ld l, a
	ld h, 0
	inc hl
	inc hl
	ld a, l
	push af
	ld a, 18
	call PRINT_AT
	ld hl, __LABEL26
	xor a
	call __PRINTSTR
	call PRINT_EOL
__LABEL24:
	inc (ix-1)
__LABEL20:
	ld a, (ix-1)
	push af
	ld a, 20
	pop hl
	cp h
	jp nc, __LABEL23
__LABEL22:
	xor a
	ld (_sprites.__DATA__ + 0), a
	xor a
	ld (_sprites.__DATA__ + 1), a
	xor a
	ld (_sprites.__DATA__ + 2), a
	xor a
	ld (_sprites.__DATA__ + 3), a
	xor a
	ld (_sprites.__DATA__ + 4), a
	xor a
	ld (_sprites.__DATA__ + 5), a
	xor a
	ld (_sprites.__DATA__ + 6), a
	xor a
	ld (_sprites.__DATA__ + 7), a
	ld a, 23
	push af
	ld a, 7
	call PRINT_AT
	ld hl, __LABEL27
	xor a
	call __PRINTSTR
	call PRINT_EOL
	xor a
	call INK
	call COPY_ATTR
	ld a, 7
	call PAPER
	call COPY_ATTR
	xor a
	call BRIGHT
	call COPY_ATTR
	ld a, 3
	push af
	ld a, 19
	call PRINT_AT
	ld hl, __LABEL28
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 7
	push af
	ld a, 19
	call PRINT_AT
	ld hl, __LABEL29
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 12
	push af
	ld a, 19
	call PRINT_AT
	ld hl, __LABEL30
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, 9999
	ld (_workingScore), hl
	ld a, 99
	ld (_workingLevel), a
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 15
	push af
	ld a, 15
	push af
	call _SetSymbol
	ld hl, 1
	call __PAUSE
	call _UpdateScreen
	ld hl, 0
	ld (_workingScore), hl
	ld a, 1
	ld (_workingLevel), a
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	xor a
	push af
	xor a
	push af
	call _SetSymbol
	ld hl, 50
	call __PAUSE
	ld hl, 856
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 58
	call __BEEPER
	call _UpdateScreen
_InitScreen__leave:
	ld sp, ix
	pop ix
	ret
_InvertCell:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp nz, __LABEL31
	ld a, 1
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	call _SetCell
	jp __LABEL32
__LABEL31:
	xor a
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	call _SetCell
__LABEL32:
_InvertCell__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_InvertRect:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL33
__LABEL36:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL38
__LABEL41:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp nz, __LABEL43
	ld a, 1
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
	jp __LABEL44
__LABEL43:
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
__LABEL44:
__LABEL42:
	inc (ix-1)
__LABEL38:
	ld a, (ix-1)
	push af
	ld a, (ix+7)
	pop hl
	cp h
	jp nc, __LABEL41
__LABEL40:
__LABEL37:
	inc (ix-2)
__LABEL33:
	ld a, (ix-2)
	push af
	ld a, (ix+11)
	pop hl
	cp h
	jp nc, __LABEL36
__LABEL35:
_InvertRect__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_MoveRect:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL45
__LABEL48:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL50
__LABEL53:
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
__LABEL54:
	inc (ix-1)
__LABEL50:
	ld a, (ix-1)
	push af
	ld a, (ix+7)
	pop hl
	call __LTI8
	or a
	jp z, __LABEL53
__LABEL52:
__LABEL49:
	inc (ix-2)
__LABEL45:
	ld a, (ix-2)
	push af
	ld a, (ix+11)
	pop hl
	call __LTI8
	or a
	jp z, __LABEL48
__LABEL47:
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL55
__LABEL58:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL60
__LABEL63:
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	push af
	ld a, (ix-2)
	add a, (ix+15)
	push af
	ld a, (ix-1)
	add a, (ix+13)
	push af
	call _SetCell
__LABEL64:
	inc (ix-1)
__LABEL60:
	ld a, (ix-1)
	push af
	ld a, (ix+7)
	pop hl
	call __LTI8
	or a
	jp z, __LABEL63
__LABEL62:
__LABEL59:
	inc (ix-2)
__LABEL55:
	ld a, (ix-2)
	push af
	ld a, (ix+11)
	pop hl
	call __LTI8
	or a
	jp z, __LABEL58
__LABEL57:
_MoveRect__leave:
	exx
	ld hl, 12
__EXIT_FUNCTION:
	ld sp, ix
	pop ix
	pop de
	add hl, sp
	ld sp, hl
	push de
	exx
	ret
_FillRect:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL65
__LABEL68:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL70
__LABEL73:
	ld a, (ix+13)
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
__LABEL74:
	inc (ix-1)
__LABEL70:
	ld a, (ix-1)
	push af
	ld a, (ix+7)
	pop hl
	cp h
	jp nc, __LABEL73
__LABEL72:
__LABEL69:
	inc (ix-2)
__LABEL65:
	ld a, (ix-2)
	push af
	ld a, (ix+11)
	pop hl
	cp h
	jp nc, __LABEL68
__LABEL67:
_FillRect__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_SetCell:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _workingCells
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	or a
	jp z, __LABEL75
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	sub (hl)
	jp z, __LABEL77
	ld a, (ix+5)
	push af
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _ops
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL78
__LABEL77:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _ops
	call __ARRAY
	ld (hl), 0
__LABEL78:
	jp __LABEL76
__LABEL75:
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	sub (ix+9)
	jp z, __LABEL80
	ld hl, _currentOp
	inc (hl)
	ld a, (ix+5)
	push af
	ld a, (_currentOp)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _ops
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix+7)
	push af
	ld a, (_currentOp)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _ops
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix+9)
	push af
	ld a, (_currentOp)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _ops
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _workingCells
	call __ARRAY
	ld a, (_currentOp)
	ld (hl), a
__LABEL80:
__LABEL76:
_SetCell__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_SetSymbol:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld a, (ix+5)
	push af
	ld h, 3
	pop af
	and h
	ld (ix-1), a
	or a
	jp nz, __LABEL81
	xor a
	ld (_workingSymbol.__DATA__ + 2), a
	jp __LABEL82
__LABEL81:
	ld a, (ix-1)
	inc a
	ld (_workingSymbol.__DATA__ + 2), a
__LABEL82:
	ld a, (ix+5)
	srl a
	srl a
	push af
	ld h, 3
	pop af
	and h
	ld (ix-1), a
	or a
	jp nz, __LABEL83
	xor a
	ld (_workingSymbol.__DATA__ + 0), a
	jp __LABEL84
__LABEL83:
	ld a, (ix-1)
	inc a
	ld (_workingSymbol.__DATA__ + 0), a
__LABEL84:
	ld a, (ix+7)
	push af
	ld h, 3
	pop af
	and h
	ld (ix-1), a
	or a
	jp nz, __LABEL85
	xor a
	ld (_workingSymbol.__DATA__ + 3), a
	jp __LABEL86
__LABEL85:
	ld a, (ix-1)
	inc a
	ld (_workingSymbol.__DATA__ + 3), a
__LABEL86:
	ld a, (ix+7)
	srl a
	srl a
	push af
	ld h, 3
	pop af
	and h
	ld (ix-1), a
	or a
	jp nz, __LABEL87
	xor a
	ld (_workingSymbol.__DATA__ + 1), a
	jp __LABEL88
__LABEL87:
	ld a, (ix-1)
	inc a
	ld (_workingSymbol.__DATA__ + 1), a
__LABEL88:
_SetSymbol__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_SetLevel:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+5)
	ld (_workingLevel), a
_SetLevel__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_SetScore:
	push ix
	ld ix, 0
	add ix, sp
	ld l, (ix+4)
	ld h, (ix+5)
	ld (_workingScore), hl
_SetScore__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_SetLifes:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld a, (ix+5)
	push af
	ld a, 4
	pop hl
	cp h
	jp nc, __LABEL89
	ld (ix-1), 15
	ld a, (ix+5)
	sub 4
	ld (ix+5), a
	ld (ix-3), 1
	jp __LABEL91
__LABEL94:
	ld a, (ix-3)
	push af
	ld a, (ix+5)
	pop hl
	sub h
	ccf
	jp nc, __LABEL97
	ld a, (ix-2)
	push af
	ld a, (ix-3)
	dec a
	ld h, 1
	or a
	ld b, a
	ld a, h
	jr z, __LABEL1177
__LABEL1176:
	add a, a
	djnz __LABEL1176
__LABEL1177:
	pop de
	or d
	ld (ix-2), a
__LABEL97:
__LABEL95:
	inc (ix-3)
__LABEL91:
	ld a, (ix-3)
	push af
	ld a, 4
	pop hl
	cp h
	jp nc, __LABEL94
__LABEL93:
	jp __LABEL90
__LABEL89:
	ld (ix-3), 1
	jp __LABEL98
__LABEL101:
	ld a, (ix-3)
	push af
	ld a, (ix+5)
	pop hl
	sub h
	ccf
	jp nc, __LABEL104
	ld a, (ix-1)
	push af
	ld a, (ix-3)
	dec a
	ld h, 1
	or a
	ld b, a
	ld a, h
	jr z, __LABEL1179
__LABEL1178:
	add a, a
	djnz __LABEL1178
__LABEL1179:
	pop de
	or d
	ld (ix-1), a
__LABEL104:
__LABEL102:
	inc (ix-3)
__LABEL98:
	ld a, (ix-3)
	push af
	ld a, 4
	pop hl
	cp h
	jp nc, __LABEL101
__LABEL100:
__LABEL90:
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetSymbol
_SetLifes__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_HideNextTitle:
	push ix
	ld ix, 0
	add ix, sp
	ld a, 7
	push af
	ld a, 19
	call PRINT_AT
	ld hl, __LABEL105
	xor a
	call __PRINTSTR
	call PRINT_EOL
_HideNextTitle__leave:
	ld sp, ix
	pop ix
	ret
_ShowNextTitle:
	push ix
	ld ix, 0
	add ix, sp
	ld a, 7
	push af
	ld a, 19
	call PRINT_AT
	ld hl, __LABEL29
	xor a
	call __PRINTSTR
	call PRINT_EOL
_ShowNextTitle__leave:
	ld sp, ix
	pop ix
	ret
_CountOnCells:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld (ix-3), 1
	jp __LABEL106
__LABEL109:
	ld (ix-2), 1
	jp __LABEL111
__LABEL114:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL117
	inc (ix-1)
__LABEL117:
__LABEL115:
	inc (ix-2)
__LABEL111:
	ld a, (ix-2)
	push af
	ld a, 10
	pop hl
	cp h
	jp nc, __LABEL114
__LABEL113:
__LABEL110:
	inc (ix-3)
__LABEL106:
	ld a, (ix-3)
	push af
	ld a, 20
	pop hl
	cp h
	jp nc, __LABEL109
__LABEL108:
	ld a, (ix-1)
_CountOnCells__leave:
	ld sp, ix
	pop ix
	ret
_UpdateScreen:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	xor a
	ld hl, (_currentOp - 1)
	cp h
	jp nc, __LABEL119
	ld (ix-3), 1
	jp __LABEL120
__LABEL123:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _ops
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	or a
	jp z, __LABEL126
	ld a, (ix-3)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _ops
	call __ARRAY
	ld a, (hl)
	ld (ix-2), a
	ld a, (ix-3)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _ops
	call __ARRAY
	ld a, (hl)
	ld (ix-5), a
	push af
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-2)
	ld l, a
	ld h, 0
	inc hl
	inc hl
	ld a, l
	push af
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ld de, 7
	add hl, de
	ld a, l
	call PRINT_AT
	ld a, (ix-5)
	add a, 144
	push af
	ld hl, 1
	call CHR
	ld a, 1
	call __PRINTSTR
	call PRINT_EOL
__LABEL126:
__LABEL124:
	inc (ix-3)
__LABEL120:
	ld a, (ix-3)
	push af
	ld a, (_currentOp)
	pop hl
	cp h
	jp nc, __LABEL123
__LABEL122:
__LABEL119:
	ld (ix-2), 1
	jp __LABEL127
__LABEL130:
	ld (ix-1), 1
	jp __LABEL132
__LABEL135:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenSymbol
	call __ARRAY
	ld a, (hl)
	ld (ix-4), a
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _workingSymbol
	call __ARRAY
	ld a, (hl)
	ld (ix-5), a
	ld a, (ix-4)
	sub (ix-5)
	jp z, __LABEL138
	ld a, (ix-5)
	push af
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenSymbol
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-2)
	ld l, a
	ld h, 0
	ld de, 8
	add hl, de
	ld a, l
	push af
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ld de, 18
	add hl, de
	ld a, l
	call PRINT_AT
	ld a, (ix-5)
	add a, 144
	push af
	ld hl, 1
	call CHR
	ld a, 1
	call __PRINTSTR
	call PRINT_EOL
__LABEL138:
__LABEL136:
	inc (ix-1)
__LABEL132:
	ld a, (ix-1)
	push af
	ld a, 4
	pop hl
	cp h
	jp nc, __LABEL135
__LABEL134:
__LABEL131:
	inc (ix-2)
__LABEL127:
	ld a, (ix-2)
	push af
	ld a, 2
	pop hl
	cp h
	jp nc, __LABEL130
__LABEL129:
	ld de, (_screenScore)
	ld hl, (_workingScore)
	or a
	sbc hl, de
	ld a, h
	or l
	jp z, __LABEL140
	ld hl, (_workingScore)
	ld (_screenScore), hl
	ld a, 5
	push af
	ld a, 19
	call PRINT_AT
	ld a, 4
	push af
	ld hl, __LABEL141
	call __LOADSTR
	push hl
	ld hl, (_screenScore)
	ld de, 0
	call __U32TOFREG
	call __STR_FAST
	push hl
	call _getPaddedText
	ld a, 1
	call __PRINTSTR
	call PRINT_EOL
__LABEL140:
	ld hl, (_workingLevel - 1)
	ld a, (_screenLevel)
	sub h
	jp z, __LABEL143
	ld a, (_workingLevel)
	ld (_screenLevel), a
	ld a, 14
	push af
	ld a, 19
	call PRINT_AT
	ld a, 2
	push af
	ld hl, __LABEL141
	call __LOADSTR
	push hl
	ld a, (_screenLevel)
	call __U8TOFREG
	call __STR_FAST
	push hl
	call _getPaddedText
	ld a, 1
	call __PRINTSTR
	call PRINT_EOL
__LABEL143:
	xor a
	ld (_currentOp), a
#line 492
		di
		ld de, _workingCells.__DATA__
		ld a, 0
		ld (de), a
		inc de
		ld hl, _workingCells.__DATA__
		ld bc, 199
		ldir
		ei
#line 501
_UpdateScreen__leave:
	ld sp, ix
	pop ix
	ret
_ShowCurtain:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld (ix-2), 1
	jp __LABEL144
__LABEL147:
	ld (ix-1), 1
	jp __LABEL149
__LABEL152:
	ld a, 1
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
__LABEL153:
	inc (ix-1)
__LABEL149:
	ld a, (ix-1)
	push af
	ld a, 10
	pop hl
	cp h
	jp nc, __LABEL152
__LABEL151:
	call _UpdateScreen
	ld hl, 11888
	push hl
	ld hl, 0
	call __BEEPER
__LABEL148:
	inc (ix-2)
__LABEL144:
	ld a, (ix-2)
	push af
	ld a, 20
	pop hl
	cp h
	jp nc, __LABEL147
__LABEL146:
_ShowCurtain__leave:
	ld sp, ix
	pop ix
	ret
_ShowDeath:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL154
__LABEL157:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _deadPic
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (ix-3), l
	ld (ix-2), h
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 512
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL160
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 1
	push af
	call _SetCell
__LABEL160:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 256
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL162
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 2
	push af
	call _SetCell
__LABEL162:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 128
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL164
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 3
	push af
	call _SetCell
__LABEL164:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 64
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL166
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL166:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 32
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL168
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 5
	push af
	call _SetCell
__LABEL168:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 16
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL170
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 6
	push af
	call _SetCell
__LABEL170:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 8
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL172
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 7
	push af
	call _SetCell
__LABEL172:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 4
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL174
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 8
	push af
	call _SetCell
__LABEL174:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 2
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL176
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL176:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 1
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL178
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL178:
__LABEL158:
	inc (ix-1)
__LABEL154:
	ld a, (ix-1)
	push af
	ld a, 20
	pop hl
	cp h
	jp nc, __LABEL157
__LABEL156:
	call _UpdateScreen
	ld hl, 46
	push hl
	ld hl, _deathMusic
	push hl
	call _PlayMusic
_ShowDeath__leave:
	ld sp, ix
	pop ix
	ret
_ShowWin:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL179
__LABEL182:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _winPic
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (ix-3), l
	ld (ix-2), h
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 512
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL185
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 1
	push af
	call _SetCell
__LABEL185:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 256
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL187
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 2
	push af
	call _SetCell
__LABEL187:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 128
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL189
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 3
	push af
	call _SetCell
__LABEL189:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 64
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL191
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL191:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 32
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL193
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 5
	push af
	call _SetCell
__LABEL193:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 16
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL195
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 6
	push af
	call _SetCell
__LABEL195:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 8
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL197
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 7
	push af
	call _SetCell
__LABEL197:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 4
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL199
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 8
	push af
	call _SetCell
__LABEL199:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 2
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL201
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL201:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 1
	pop hl
	call __BAND16
	ld a, h
	or l
	jp nz, __LABEL203
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL203:
__LABEL183:
	inc (ix-1)
__LABEL179:
	ld a, (ix-1)
	push af
	ld a, 20
	pop hl
	cp h
	jp nc, __LABEL182
__LABEL181:
	call _UpdateScreen
	ld hl, 220
	push hl
	ld hl, _winMusic
	push hl
	call _PlayMusic
_ShowWin__leave:
	ld sp, ix
	pop ix
	ret
_min:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+5)
	push af
	ld a, (ix+7)
	pop hl
	call __LTI8
	or a
	jp z, __LABEL204
	ld a, (ix+7)
	jp _min__leave
__LABEL204:
	ld a, (ix+5)
	jp _min__leave
__LABEL205:
_min__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_max:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+5)
	ld h, (ix+7)
	call __LTI8
	or a
	jp z, __LABEL206
	ld a, (ix+7)
	jp _max__leave
__LABEL206:
	ld a, (ix+5)
	jp _max__leave
__LABEL207:
_max__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_Explode:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	ld a, (ix+5)
	ld (ix-1), a
	ld a, (ix+7)
	ld (ix-3), a
	ld a, (ix+5)
	ld (ix-2), a
	ld a, (ix+7)
	ld (ix-4), a
	ld (ix-5), 1
	jp __LABEL208
__LABEL211:
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	inc a
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-3)
	dec a
	push af
	call _max
	push af
	ld a, 10
	push af
	ld a, (ix-2)
	inc a
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-1)
	dec a
	push af
	call _max
	push af
	call _FillRect
	xor a
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-3)
	push af
	call _max
	push af
	ld a, 10
	push af
	ld a, (ix-2)
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	call _max
	push af
	call _FillRect
	dec (ix-1)
	inc (ix-2)
	dec (ix-3)
	inc (ix-4)
	call _UpdateScreen
	ld hl, 12597
	push hl
	ld hl, 1
	call __BEEPER
__LABEL212:
	inc (ix-5)
__LABEL208:
	ld a, (ix-5)
	push af
	ld a, 3
	pop hl
	call __LTI8
	or a
	jp z, __LABEL211
__LABEL210:
	ld a, (ix-1)
	ld (ix-5), a
	jp __LABEL213
__LABEL216:
	ld a, (ix-5)
	push af
	ld h, 1
	pop af
	call __LTI8
	push af
	ld a, (ix-5)
	push af
	ld a, 10
	pop hl
	call __LTI8
	pop de
	or d
	jp nz, __LABEL217
__LABEL219:
	ld a, (ix-5)
	and 1
	jp nz, __LABEL220
	ld a, (ix-3)
	push af
	ld h, 1
	pop af
	call __LTI8
	or a
	jp nz, __LABEL217
__LABEL223:
	xor a
	push af
	ld a, (ix-3)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	jp __LABEL221
__LABEL220:
	ld a, (ix-4)
	push af
	ld a, 20
	pop hl
	call __LTI8
	or a
	jp nz, __LABEL217
__LABEL225:
	xor a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
__LABEL221:
__LABEL217:
	inc (ix-5)
__LABEL213:
	ld a, (ix-5)
	push af
	ld a, (ix-2)
	pop hl
	call __LTI8
	or a
	jp z, __LABEL216
__LABEL215:
	ld a, (ix-3)
	ld (ix-6), a
	jp __LABEL226
__LABEL229:
	ld a, (ix-6)
	push af
	ld h, 1
	pop af
	call __LTI8
	push af
	ld a, (ix-6)
	push af
	ld a, 20
	pop hl
	call __LTI8
	pop de
	or d
	jp nz, __LABEL230
__LABEL232:
	ld a, (ix-6)
	and 1
	jp nz, __LABEL233
	ld a, (ix-1)
	push af
	ld h, 1
	pop af
	call __LTI8
	or a
	jp nz, __LABEL230
__LABEL236:
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
	jp __LABEL234
__LABEL233:
	ld a, (ix-2)
	push af
	ld a, 10
	pop hl
	call __LTI8
	or a
	jp nz, __LABEL230
__LABEL238:
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-2)
	push af
	call _SetCell
__LABEL234:
__LABEL230:
	inc (ix-6)
__LABEL226:
	ld a, (ix-6)
	push af
	ld a, (ix-4)
	pop hl
	call __LTI8
	or a
	jp z, __LABEL229
__LABEL228:
	call _UpdateScreen
	ld hl, 5
	call __PAUSE
	ld (ix-5), 1
	jp __LABEL239
__LABEL242:
	ld a, 20
	push af
	ld a, (ix-4)
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-3)
	push af
	call _max
	push af
	ld a, 10
	push af
	ld a, (ix-2)
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	call _max
	push af
	call _InvertRect
	xor a
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	dec a
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-3)
	inc a
	push af
	call _max
	push af
	ld a, 10
	push af
	ld a, (ix-2)
	dec a
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-1)
	inc a
	push af
	call _max
	push af
	call _FillRect
	call _UpdateScreen
	ld hl, 1
	call __PAUSE
__LABEL243:
	inc (ix-5)
__LABEL239:
	ld a, (ix-5)
	push af
	ld a, 10
	pop hl
	call __LTI8
	or a
	jp z, __LABEL242
__LABEL241:
_Explode__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_InitIntro:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL244
__LABEL247:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _introScreen
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (ix-3), l
	ld (ix-2), h
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 512
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL250
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 1
	push af
	call _SetCell
__LABEL250:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 256
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL252
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 2
	push af
	call _SetCell
__LABEL252:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 128
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL254
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 3
	push af
	call _SetCell
__LABEL254:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 64
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL256
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL256:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 32
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL258
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 5
	push af
	call _SetCell
__LABEL258:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 16
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL260
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 6
	push af
	call _SetCell
__LABEL260:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 8
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL262
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 7
	push af
	call _SetCell
__LABEL262:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 4
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL264
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 8
	push af
	call _SetCell
__LABEL264:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 2
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL266
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL266:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 1
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL268
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL268:
__LABEL248:
	inc (ix-1)
__LABEL244:
	ld a, (ix-1)
	push af
	ld a, 20
	pop hl
	cp h
	jp nc, __LABEL247
__LABEL246:
	call _UpdateScreen
_InitIntro__leave:
	ld sp, ix
	pop ix
	ret
_InvertIntro:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld (ix-3), 0
	jp __LABEL269
__LABEL272:
	ld a, (ix-3)
	inc a
	ld (ix-1), a
	jp __LABEL274
__LABEL277:
	ld a, 20
	sub (ix-3)
	push af
	ld a, (ix-1)
	push af
	call _InvertCell
	call _UpdateScreen
	ld hl, 1
	call __PAUSE
__LABEL278:
	inc (ix-1)
__LABEL274:
	ld a, (ix-1)
	push af
	ld a, 10
	sub (ix-3)
	pop hl
	cp h
	jp nc, __LABEL277
__LABEL276:
	ld a, 19
	sub (ix-3)
	ld (ix-2), a
	jp __LABEL279
__LABEL282:
	ld a, (ix-2)
	push af
	ld a, 10
	sub (ix-3)
	push af
	call _InvertCell
	call _UpdateScreen
	ld hl, 1
	call __PAUSE
__LABEL283:
	dec (ix-2)
__LABEL279:
	ld a, (ix-2)
	push af
	ld a, (ix-3)
	inc a
	ld h, a
	pop af
	cp h
	jp nc, __LABEL282
__LABEL281:
	ld a, 9
	sub (ix-3)
	ld (ix-1), a
	jp __LABEL284
__LABEL287:
	ld a, (ix-3)
	inc a
	push af
	ld a, (ix-1)
	push af
	call _InvertCell
	call _UpdateScreen
	ld hl, 1
	call __PAUSE
__LABEL288:
	dec (ix-1)
__LABEL284:
	ld a, (ix-1)
	push af
	ld a, (ix-3)
	inc a
	ld h, a
	pop af
	cp h
	jp nc, __LABEL287
__LABEL286:
	ld a, (ix-3)
	add a, 2
	ld (ix-2), a
	jp __LABEL289
__LABEL292:
	ld a, (ix-2)
	push af
	ld a, (ix-3)
	inc a
	push af
	call _InvertCell
	call _UpdateScreen
	ld hl, 1
	call __PAUSE
__LABEL293:
	inc (ix-2)
__LABEL289:
	ld a, (ix-2)
	push af
	ld a, 19
	sub (ix-3)
	pop hl
	cp h
	jp nc, __LABEL292
__LABEL291:
__LABEL273:
	inc (ix-3)
__LABEL269:
	ld a, (ix-3)
	push af
	ld a, 4
	pop hl
	cp h
	jp nc, __LABEL272
__LABEL271:
	ld hl, 30
	call __PAUSE
_InvertIntro__leave:
	ld sp, ix
	pop ix
	ret
_LoadTetrisScreen:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld (ix-1), 1
	jp __LABEL294
__LABEL297:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tetrisScreens
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (ix-3), l
	ld (ix-2), h
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 512
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL300
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 1
	push af
	call _SetCell
__LABEL300:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 256
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL302
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 2
	push af
	call _SetCell
__LABEL302:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 128
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL304
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 3
	push af
	call _SetCell
__LABEL304:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 64
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL306
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL306:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 32
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL308
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 5
	push af
	call _SetCell
__LABEL308:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 16
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL310
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 6
	push af
	call _SetCell
__LABEL310:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 8
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL312
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 7
	push af
	call _SetCell
__LABEL312:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 4
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL314
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 8
	push af
	call _SetCell
__LABEL314:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 2
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL316
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL316:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 1
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL318
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL318:
__LABEL298:
	inc (ix-1)
__LABEL294:
	ld a, (ix-1)
	push af
	ld a, 10
	pop hl
	cp h
	jp nc, __LABEL297
__LABEL296:
	call _UpdateScreen
_LoadTetrisScreen__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_ExpandPiece:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld (ix-2), 1
	jp __LABEL319
__LABEL322:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tetrisPieces
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	push af
	ld h, 128
	pop af
	and h
	push af
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 64
	pop af
	and h
	push af
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 32
	pop af
	and h
	push af
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 16
	pop af
	and h
	push af
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 3
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 8
	pop af
	and h
	push af
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 4
	pop af
	and h
	push af
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 2
	pop af
	and h
	push af
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 1
	pop af
	and h
	push af
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 3
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tetrisPieces
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	push af
	ld h, 128
	pop af
	and h
	push af
	ld hl, 2
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 64
	pop af
	and h
	push af
	ld hl, 2
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 32
	pop af
	and h
	push af
	ld hl, 2
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 16
	pop af
	and h
	push af
	ld hl, 2
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 3
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 8
	pop af
	and h
	push af
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 4
	pop af
	and h
	push af
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 2
	pop af
	and h
	push af
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 1
	pop af
	and h
	push af
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 3
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld (hl), 0
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld (hl), 0
__LABEL323:
	inc (ix-2)
__LABEL319:
	ld a, (ix-2)
	push af
	ld a, 4
	pop hl
	cp h
	jp nc, __LABEL322
__LABEL321:
	ld (ix-4), 1
	jp __LABEL324
__LABEL327:
	ld (ix-2), 1
	jp __LABEL329
__LABEL332:
	ld (ix-3), 1
	jp __LABEL334
__LABEL337:
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-3)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL340
	ld hl, 0
	push hl
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld a, (hl)
	ld h, (ix-2)
	call __LTI8
	or a
	jp z, __LABEL342
	ld a, (ix-2)
	push af
	ld hl, 0
	push hl
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	pop af
	ld (hl), a
__LABEL342:
	ld hl, 1
	push hl
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld a, (hl)
	ld h, (ix-3)
	call __LTI8
	or a
	jp z, __LABEL344
	ld a, (ix-3)
	push af
	ld hl, 1
	push hl
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	pop af
	ld (hl), a
__LABEL344:
__LABEL340:
__LABEL338:
	inc (ix-3)
__LABEL334:
	ld a, (ix-3)
	push af
	ld a, 4
	pop hl
	cp h
	jp nc, __LABEL337
__LABEL336:
__LABEL333:
	inc (ix-2)
__LABEL329:
	ld a, (ix-2)
	push af
	ld a, 4
	pop hl
	cp h
	jp nc, __LABEL332
__LABEL331:
__LABEL328:
	inc (ix-4)
__LABEL324:
	ld a, (ix-4)
	push af
	ld a, 4
	pop hl
	cp h
	jp nc, __LABEL327
__LABEL326:
_ExpandPiece__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_WillCollide:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	ld a, (ix+9)
	or a
	jp z, __LABEL346
	ld a, (ix+5)
	add a, (ix+9)
	ld (ix-1), a
	push af
	ld h, 1
	pop af
	call __LTI8
	push af
	ld a, (ix-1)
	push af
	ld hl, 1
	push hl
	ld a, (ix+13)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld a, 11
	sub (hl)
	pop hl
	call __LTI8
	pop de
	or d
	jp z, __LABEL348
	ld a, 1
	jp _WillCollide__leave
__LABEL348:
__LABEL346:
	ld (ix-2), 1
	jp __LABEL349
__LABEL352:
	ld a, (ix-2)
	add a, (ix+7)
	add a, (ix+11)
	dec a
	ld (ix-5), a
	push af
	ld h, 1
	pop af
	call __LTI8
	or a
	jp nz, __LABEL353
__LABEL355:
	ld a, (ix-2)
	add a, (ix+11)
	ld (ix-4), a
	ld (ix-1), 1
	jp __LABEL356
__LABEL359:
	ld a, (ix-1)
	add a, (ix+5)
	add a, (ix+9)
	dec a
	ld (ix-6), a
	ld a, (ix-1)
	add a, (ix+9)
	ld (ix-3), a
	ld a, (ix+15)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	ld a, (hl)
	push af
	ld a, (ix-3)
	push af
	ld h, 1
	pop af
	call __LTI8
	push af
	ld a, (ix-3)
	push af
	ld a, 4
	pop hl
	call __LTI8
	pop de
	or d
	push af
	ld a, (ix-4)
	push af
	ld h, 1
	pop af
	call __LTI8
	pop de
	or d
	push af
	ld a, (ix-4)
	push af
	ld a, 4
	pop hl
	call __LTI8
	pop de
	or d
	push af
	ld a, (ix+13)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-4)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-3)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	ld a, (hl)
	sub 1
	sbc a, a
	pop de
	or d
	ld h, a
	pop af
	or a
	jr z, __LABEL1180
	ld a, h
__LABEL1180:
	or a
	jp z, __LABEL362
	ld a, (ix-6)
	push af
	ld h, 1
	pop af
	call __LTI8
	push af
	ld a, (ix-6)
	push af
	ld a, 10
	pop hl
	call __LTI8
	pop de
	or d
	push af
	ld a, (ix-5)
	push af
	ld a, 20
	pop hl
	call __LTI8
	pop de
	or d
	push af
	ld a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	or (hl)
	jp z, __LABEL364
	ld a, 1
	jp _WillCollide__leave
__LABEL364:
__LABEL362:
__LABEL360:
	inc (ix-1)
__LABEL356:
	ld a, (ix-1)
	push af
	ld a, 4
	pop hl
	call __LTI8
	or a
	jp z, __LABEL359
__LABEL358:
__LABEL353:
	inc (ix-2)
__LABEL349:
	ld a, (ix-2)
	push af
	ld a, 4
	pop hl
	call __LTI8
	or a
	jp z, __LABEL352
__LABEL351:
	xor a
_WillCollide__leave:
	exx
	ld hl, 12
	jp __EXIT_FUNCTION
_DrawFigure:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld (ix-2), 1
	jp __LABEL365
__LABEL368:
	ld a, (ix-2)
	add a, (ix+7)
	dec a
	ld (ix-4), a
	push af
	ld h, 1
	pop af
	call __LTI8
	or a
	jp nz, __LABEL369
__LABEL371:
	ld (ix-1), 1
	jp __LABEL372
__LABEL375:
	ld a, (ix-1)
	add a, (ix+5)
	dec a
	ld (ix-3), a
	push af
	ld h, 1
	pop af
	call __LTI8
	or a
	jp nz, __LABEL376
__LABEL378:
	ld a, (ix+9)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL380
	ld a, (ix+11)
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-3)
	push af
	call _SetCell
__LABEL380:
__LABEL376:
	inc (ix-1)
__LABEL372:
	ld a, (ix-1)
	push af
	ld a, 4
	pop hl
	cp h
	jp nc, __LABEL375
__LABEL374:
__LABEL369:
	inc (ix-2)
__LABEL365:
	ld a, (ix-2)
	push af
	ld a, 4
	pop hl
	cp h
	jp nc, __LABEL368
__LABEL367:
_DrawFigure__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_FindTop:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld (ix-1), 20
	jp __LABEL381
__LABEL384:
	ld (ix-3), 1
	ld (ix-2), 1
	jp __LABEL386
__LABEL389:
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL392
	ld (ix-3), 0
	jp __LABEL388
__LABEL392:
__LABEL390:
	inc (ix-2)
__LABEL386:
	ld a, (ix-2)
	push af
	ld a, 10
	pop hl
	call __LTI8
	or a
	jp z, __LABEL389
__LABEL388:
	ld a, (ix-3)
	or a
	jp z, __LABEL394
	ld a, (ix-1)
	sub 20
	jp nz, __LABEL396
	xor a
	jp _FindTop__leave
__LABEL396:
	ld a, (ix-1)
	inc a
	jp _FindTop__leave
__LABEL394:
__LABEL385:
	dec (ix-1)
__LABEL381:
	ld a, (ix-1)
	push af
	ld h, 1
	pop af
	call __LTI8
	or a
	jp z, __LABEL384
__LABEL383:
	xor a
_FindTop__leave:
	ld sp, ix
	pop ix
	ret
_EraseLines:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	call _FindTop
	ld (ix-1), a
	ld (ix-4), 3
	jp __LABEL397
__LABEL400:
	ld (ix-2), 1
	ld a, (ix-4)
	add a, (ix+5)
	ld (ix-3), a
	ld h, (ix-1)
	call __LTI8
	push af
	ld a, (ix-3)
	push af
	ld a, 20
	pop hl
	call __LTI8
	pop de
	or d
	jp nz, __LABEL401
__LABEL403:
	ld (ix-5), 1
	jp __LABEL404
__LABEL407:
	ld a, (ix-3)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp nz, __LABEL410
	ld (ix-2), 0
	jp __LABEL406
__LABEL410:
__LABEL408:
	inc (ix-5)
__LABEL404:
	ld a, (ix-5)
	push af
	ld a, 10
	pop hl
	cp h
	jp nc, __LABEL407
__LABEL406:
	ld a, (ix-2)
	or a
	jp z, __LABEL412
	inc (ix+5)
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-3)
	dec a
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _MoveRect
	call _UpdateScreen
	ld hl, 233
	push hl
	ld hl, 82
	call __BEEPER
	inc (ix-6)
__LABEL412:
__LABEL401:
	dec (ix-4)
__LABEL397:
	ld a, (ix-4)
	push af
	ld h, 0
	pop af
	call __LTI8
	or a
	jp z, __LABEL400
__LABEL399:
	ld a, (ix-6)
_EraseLines__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_RunTetris:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -19
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 18
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL1181
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1182
	ld bc, 1
	ldir
	ld a, (_playedTetrisMusic)
	or a
	jp nz, __LABEL414
	ld hl, 100
	push hl
	ld hl, _tetrisIntroMusic
	push hl
	call _PlayMusic
	ld a, 1
	ld (_playedTetrisMusic), a
__LABEL414:
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	inc a
	ld h, a
	ld a, 40
	call __DIVU8_FAST
	ld (ix-1), a
	ld de, __LABEL415
	ld bc, -19
	call __PSTORE_STR
	call RND
	push bc
	push de
	push af
	ld a, 083h
	ld de, 00060h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 1
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-12), a
	call RND
	push bc
	push de
	push af
	ld a, 083h
	ld de, 00060h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 1
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-12), a
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld bc, 0
	push bc
	ld bc, 10
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-15), a
	ld hl, 908
	push hl
	ld hl, 46
	call __BEEPER
	ld hl, 806
	push hl
	ld hl, 51
	call __BEEPER
	ld hl, 673
	push hl
	ld hl, 61
	call __BEEPER
	ld hl, 596
	push hl
	ld hl, 69
	call __BEEPER
	call RND
	push bc
	push de
	push af
	ld a, 083h
	ld de, 00060h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 1
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-12), a
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	inc a
	push af
	call _LoadTetrisScreen
__LABEL416:
	ld a, (ix-2)
	or a
	jp nz, __LABEL417
	ld a, (ix-3)
	sub 255
	jp nz, __LABEL419
	ld (ix-4), 1
	ld a, (ix-12)
	ld (ix-3), a
	call RND
	push bc
	push de
	push af
	ld a, 083h
	ld de, 00060h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 1
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-12), a
	ld a, (ix-3)
	push af
	call _ExpandPiece
	ld a, (_expandedSize.__DATA__ + 0)
	neg
	ld (ix-5), a
	ld (ix-6), 4
	ld hl, 1
	push hl
	ld hl, 0
	push hl
	ld a, (ix-12)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tetrisPieces
	call __ARRAY
	ld a, (hl)
	ld b, 4
__LABEL1183:
	srl a
	djnz __LABEL1183
	push af
	ld hl, 0
	push hl
	ld hl, 0
	push hl
	ld a, (ix-12)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tetrisPieces
	call __ARRAY
	ld a, (hl)
	ld b, 4
__LABEL1184:
	srl a
	djnz __LABEL1184
	push af
	call _SetSymbol
__LABEL419:
	ld a, (ix-4)
	push af
	ld a, (ix-4)
	push af
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _WillCollide
	or a
	jp z, __LABEL420
	ld a, (ix-5)
	push af
	ld h, 1
	pop af
	call __LTI8
	or a
	jp z, __LABEL422
	ld (ix-2), 1
	jp __LABEL423
__LABEL422:
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	ld a, (ix-5)
	push af
	call _EraseLines
	ld (ix-7), a
	or a
	jp z, __LABEL424
	ld a, (ix-7)
	dec a
	jp nz, __LABEL426
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	jp __LABEL427
__LABEL426:
	ld a, (ix-7)
	sub 2
	jp nz, __LABEL428
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	inc hl
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	jp __LABEL429
__LABEL428:
	ld a, (ix-7)
	sub 3
	jp nz, __LABEL430
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, 5
	add hl, de
	ld (ix-17), l
	ld (ix-16), h
	jp __LABEL431
__LABEL430:
	ld a, (ix-7)
	sub 4
	jp nz, __LABEL433
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, 10
	add hl, de
	ld (ix-17), l
	ld (ix-16), h
__LABEL433:
__LABEL431:
__LABEL429:
__LABEL427:
	ld a, (ix-14)
	add a, (ix-7)
	ld (ix-14), a
	sub (ix-15)
	ccf
	jp nc, __LABEL435
	ld a, (ix+5)
	sub 99
	jp nz, __LABEL437
	ld a, 1
	jp _RunTetris__leave
__LABEL437:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	sub 9
	jp nz, __LABEL439
	ld hl, 60
	push hl
	ld hl, _tetrisLevelMusic
	push hl
	call _PlayMusic
__LABEL439:
	call _ShowCurtain
	ld hl, 908
	push hl
	ld hl, 46
	call __BEEPER
	ld hl, 596
	push hl
	ld hl, 69
	call __BEEPER
	inc (ix+5)
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	inc a
	ld h, a
	ld a, 40
	call __DIVU8_FAST
	ld (ix-1), a
	ld (ix-14), 0
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld bc, 0
	push bc
	ld bc, 10
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-15), a
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, 50
	add hl, de
	ld (ix-17), l
	ld (ix-16), h
	ld a, (ix+5)
	push af
	call _SetLevel
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	inc a
	push af
	call _LoadTetrisScreen
__LABEL435:
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	call _UpdateScreen
	jp __LABEL425
__LABEL424:
	ld hl, 2949
	push hl
	ld hl, 6
	call __BEEPER
__LABEL425:
	ld (ix-3), 255
__LABEL423:
	jp __LABEL421
__LABEL420:
	xor a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	inc (ix-5)
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL440:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL441
	call INKEY
	ld d, h
	ld e, l
	ld bc, -19
	call __PSTORE_STR2
	dec (ix-9)
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	ld de, __LABEL415
	pop hl
	xor a
	call __STRNE
	ld h, (ix-8)
	or a
	jr z, __LABEL1185
	ld a, h
__LABEL1185:
	push af
	ld a, (ix-9)
	push af
	ld a, 1
	pop hl
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1186
	ld a, h
__LABEL1186:
	or a
	jp nz, __LABEL440
__LABEL442:
	ld (ix-8), 0
__LABEL443:
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	ld de, __LABEL415
	pop hl
	xor a
	call __STRNE
	or a
	jp z, __LABEL445
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	ld de, __LABEL446
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL447
	ld a, (ix-4)
	push af
	ld a, (ix-4)
	push af
	xor a
	push af
	ld a, 255
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _WillCollide
	or a
	jp nz, __LABEL450
	xor a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	dec (ix-6)
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	call _UpdateScreen
	ld (ix-8), 1
	ld (ix-9), 70
__LABEL450:
	jp __LABEL448
__LABEL447:
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	ld de, __LABEL451
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL452
	ld a, (ix-4)
	push af
	ld a, (ix-4)
	push af
	xor a
	push af
	ld a, 1
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _WillCollide
	or a
	jp nz, __LABEL455
	xor a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	inc (ix-6)
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	call _UpdateScreen
	ld (ix-8), 1
	ld (ix-9), 70
__LABEL455:
	jp __LABEL453
__LABEL452:
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	ld de, __LABEL456
	pop hl
	xor a
	call __STREQ
	or a
	jp nz, __LABEL441
__LABEL457:
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	ld de, __LABEL459
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL461
	ld a, (ix-4)
	inc a
	ld (ix-13), a
	push af
	ld a, 4
	pop hl
	cp h
	jp nc, __LABEL463
	ld (ix-13), 1
__LABEL463:
	ld a, (ix-13)
	push af
	ld a, (ix-4)
	push af
	xor a
	push af
	xor a
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _WillCollide
	or a
	jp nz, __LABEL465
	xor a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	ld a, (ix-13)
	ld (ix-4), a
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	call _UpdateScreen
	ld (ix-8), 1
	ld (ix-9), 200
__LABEL465:
__LABEL461:
__LABEL458:
__LABEL453:
__LABEL448:
__LABEL445:
	jp __LABEL440
__LABEL441:
__LABEL421:
	jp __LABEL416
__LABEL417:
	ld hl, 2949
	push hl
	ld hl, 28
	call __BEEPER
	ld hl, 3314
	push hl
	ld hl, 25
	call __BEEPER
	ld hl, 3947
	push hl
	ld hl, 21
	call __BEEPER
	ld hl, 4434
	push hl
	ld hl, 19
	call __BEEPER
	xor a
_RunTetris__leave:
	ex af, af'
	exx
	ld l, (ix-19)
	ld h, (ix-18)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_LoadArkanoidScreen:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld (ix-1), 1
	jp __LABEL466
__LABEL469:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _arkaScreens
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (ix-3), l
	ld (ix-2), h
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 512
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL472
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 1
	push af
	call _SetCell
__LABEL472:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 256
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL474
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 2
	push af
	call _SetCell
__LABEL474:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 128
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL476
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 3
	push af
	call _SetCell
__LABEL476:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 64
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL478
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL478:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 32
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL480
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 5
	push af
	call _SetCell
__LABEL480:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 16
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL482
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 6
	push af
	call _SetCell
__LABEL482:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 8
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL484
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 7
	push af
	call _SetCell
__LABEL484:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 4
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL486
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 8
	push af
	call _SetCell
__LABEL486:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 2
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL488
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL488:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 1
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL490
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL490:
__LABEL470:
	inc (ix-1)
__LABEL466:
	ld a, (ix-1)
	push af
	ld a, 12
	pop hl
	cp h
	jp nc, __LABEL469
__LABEL468:
	call _UpdateScreen
_LoadArkanoidScreen__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_GetSpeedX:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld a, (ix+5)
	or a
	jp nz, __LABEL491
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld a, l
	ld (ix-1), a
	push af
	ld h, 20
	pop af
	cp h
	jp nc, __LABEL493
	ld a, 081h
	ld de, 00080h
	ld bc, 00000h
	jp _GetSpeedX__leave
__LABEL493:
	ld a, 080h
	ld de, 00080h
	ld bc, 00000h
	jp _GetSpeedX__leave
__LABEL494:
	jp __LABEL492
__LABEL491:
	ld a, (ix+5)
	dec a
	jp nz, __LABEL495
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld a, l
	ld (ix-1), a
	push af
	ld h, 10
	pop af
	cp h
	jp nc, __LABEL497
	ld a, 080h
	ld de, 00080h
	ld bc, 00000h
	jp _GetSpeedX__leave
__LABEL497:
	ld a, (ix-1)
	push af
	ld h, 20
	pop af
	cp h
	jp nc, __LABEL499
	ld a, 000h
	ld de, 00000h
	ld bc, 00000h
	jp _GetSpeedX__leave
__LABEL499:
	ld a, 080h
	ld de, 00000h
	ld bc, 00000h
	jp _GetSpeedX__leave
__LABEL500:
__LABEL498:
	jp __LABEL496
__LABEL495:
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld a, l
	ld (ix-1), a
	push af
	ld h, 20
	pop af
	cp h
	jp nc, __LABEL501
	ld a, 081h
	ld de, 00000h
	ld bc, 00000h
	jp _GetSpeedX__leave
__LABEL501:
	ld a, 080h
	ld de, 00000h
	ld bc, 00000h
	jp _GetSpeedX__leave
__LABEL502:
__LABEL496:
__LABEL492:
_GetSpeedX__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_GetSpeedY:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld a, l
	ld (ix-1), a
	push af
	ld h, 20
	pop af
	cp h
	jp nc, __LABEL503
	ld a, 081h
	ld de, 00080h
	ld bc, 00000h
	jp _GetSpeedY__leave
__LABEL503:
	ld a, 080h
	ld de, 00080h
	ld bc, 00000h
	jp _GetSpeedY__leave
__LABEL504:
_GetSpeedY__leave:
	ld sp, ix
	pop ix
	ret
_RunArkanoid:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -41
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 40
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL1187
	ld bc, 1
	ldir
	ld a, (_playedArkaMusic)
	or a
	jp nz, __LABEL506
	ld a, 1
	ld (_playedArkaMusic), a
	ld hl, 96
	push hl
	ld hl, _arkaIntroMusic
	push hl
	call _PlayMusic
__LABEL506:
	ld de, __LABEL415
	ld bc, -21
	call __PSTORE_STR
	call _HideNextTitle
	ld a, (ix-3)
	push af
	call _SetLifes
__LABEL507:
	ld a, (ix-1)
	or a
	jp nz, __LABEL508
	ld a, (ix-4)
	push af
	xor a
	pop hl
	cp h
	jp nc, __LABEL510
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL510:
	ld a, (ix-5)
	push af
	xor a
	pop hl
	call __LTI8
	or a
	jp z, __LABEL512
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
__LABEL512:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	inc a
	push af
	call _LoadArkanoidScreen
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld h, a
	ld a, 11
	sub h
	ld (ix-2), a
	ld a, (ix+5)
	push af
	call _SetLevel
	call _CountOnCells
	ld (ix-7), a
__LABEL513:
	ld a, (ix-7)
	push af
	xor a
	pop hl
	cp h
	sbc a, a
	push af
	ld a, (ix-3)
	push af
	xor a
	pop hl
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1188
	ld a, h
__LABEL1188:
	or a
	jp z, __LABEL514
	ld a, (ix-4)
	push af
	xor a
	pop hl
	cp h
	jp nc, __LABEL516
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL516:
	ld a, (ix-5)
	push af
	xor a
	pop hl
	call __LTI8
	or a
	jp z, __LABEL518
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
__LABEL518:
	ld (ix-4), 4
	ld a, 083h
	ld de, 00040h
	ld bc, 00000h
	ld hl, -26
	call __PSTOREF
	ld (ix-5), 6
	ld a, 085h
	ld de, 00018h
	ld bc, 00000h
	ld hl, -31
	call __PSTOREF
	ld (ix-6), 19
	ld a, 081h
	ld de, 00000h
	ld bc, 00000h
	ld hl, -36
	call __PSTOREF
	ld a, 081h
	ld de, 00080h
	ld bc, 00000h
	ld hl, -41
	call __PSTOREF
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	call _UpdateScreen
	call INKEY
	ld d, h
	ld e, l
	ld bc, -21
	call __PSTORE_STR2
__LABEL519:
	ld l, (ix-21)
	ld h, (ix-20)
	push hl
	ld de, __LABEL459
	pop hl
	xor a
	call __STRNE
	or a
	jp z, __LABEL520
	call INKEY
	ld d, h
	ld e, l
	ld bc, -21
	call __PSTORE_STR2
	ld l, (ix-19)
	ld h, (ix-18)
	dec hl
	ld (ix-19), l
	ld (ix-18), h
	ld l, (ix-21)
	ld h, (ix-20)
	push hl
	ld de, __LABEL415
	pop hl
	xor a
	call __STRNE
	ld h, (ix-13)
	or a
	jr z, __LABEL1189
	ld a, h
__LABEL1189:
	push af
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	ld hl, 1
	pop de
	or a
	sbc hl, de
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1190
	ld a, h
__LABEL1190:
	or a
	jp nz, __LABEL519
__LABEL521:
	ld (ix-13), 0
__LABEL522:
	ld l, (ix-21)
	ld h, (ix-20)
	push hl
	ld de, __LABEL415
	pop hl
	xor a
	call __STRNE
	or a
	jp z, __LABEL524
	ld l, (ix-21)
	ld h, (ix-20)
	push hl
	ld de, __LABEL446
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL525
	ld a, (ix-4)
	push af
	ld a, 1
	pop hl
	cp h
	jp nc, __LABEL528
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	dec (ix-4)
	dec (ix-5)
	ld a, (ix-5)
	call __I8TOFREG
	ld hl, -26
	call __PSTOREF
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	call _UpdateScreen
	ld (ix-19), 50
	ld (ix-18), 0
	ld (ix-13), 1
__LABEL528:
	jp __LABEL526
__LABEL525:
	ld l, (ix-21)
	ld h, (ix-20)
	push hl
	ld de, __LABEL451
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL530
	ld a, (ix-4)
	push af
	ld h, 8
	pop af
	cp h
	jp nc, __LABEL532
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	inc (ix-4)
	inc (ix-5)
	ld a, (ix-5)
	call __I8TOFREG
	ld hl, -26
	call __PSTOREF
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	call _UpdateScreen
	ld (ix-19), 50
	ld (ix-18), 0
	ld (ix-13), 1
__LABEL532:
__LABEL530:
__LABEL526:
__LABEL524:
	jp __LABEL519
__LABEL520:
__LABEL533:
	ld (ix-14), 1
__LABEL535:
	ld a, (ix-14)
	or a
	jp z, __LABEL536
	ld (ix-14), 0
	push ix
	pop hl
	ld de, -26
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __ADDF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ld e, h
	ld d, h
	call __SUB32
	ld a, l
	ld (ix-8), a
	push ix
	pop hl
	ld de, -31
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __ADDF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ld e, h
	ld d, h
	call __SUB32
	ld a, l
	ld (ix-9), a
	ld a, (ix-8)
	push af
	ld h, 0
	pop af
	call __LTI8
	push af
	ld a, (ix-9)
	push af
	ld h, 0
	pop af
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1191
	ld a, h
__LABEL1191:
	push af
	ld a, (ix-5)
	push af
	ld a, 1
	pop hl
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1192
	ld a, h
__LABEL1192:
	push af
	ld a, (ix-6)
	push af
	ld a, 1
	pop hl
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1193
	ld a, h
__LABEL1193:
	push af
	ld a, (ix-6)
	add a, (ix-9)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	add a, (ix-8)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	ld h, (hl)
	or a
	jr z, __LABEL1194
	ld a, h
__LABEL1194:
	push af
	ld a, (ix-8)
	push af
	xor a
	pop hl
	call __LTI8
	push af
	ld a, (ix-9)
	push af
	ld h, 0
	pop af
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1195
	ld a, h
__LABEL1195:
	push af
	ld a, (ix-5)
	push af
	ld h, 10
	pop af
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1196
	ld a, h
__LABEL1196:
	push af
	ld a, (ix-6)
	push af
	ld a, 1
	pop hl
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1197
	ld a, h
__LABEL1197:
	push af
	ld a, (ix-6)
	add a, (ix-9)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	add a, (ix-8)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	ld h, (hl)
	or a
	jr z, __LABEL1198
	ld a, h
__LABEL1198:
	pop de
	or d
	push af
	ld a, (ix-8)
	push af
	ld h, 0
	pop af
	call __LTI8
	push af
	ld a, (ix-9)
	push af
	xor a
	pop hl
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1199
	ld a, h
__LABEL1199:
	push af
	ld a, (ix-5)
	push af
	ld a, 1
	pop hl
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1200
	ld a, h
__LABEL1200:
	push af
	ld a, (ix-6)
	push af
	ld h, 12
	pop af
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1201
	ld a, h
__LABEL1201:
	push af
	ld a, (ix-6)
	add a, (ix-9)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	add a, (ix-8)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	ld h, (hl)
	or a
	jr z, __LABEL1202
	ld a, h
__LABEL1202:
	pop de
	or d
	push af
	ld a, (ix-8)
	push af
	xor a
	pop hl
	call __LTI8
	push af
	ld a, (ix-9)
	push af
	xor a
	pop hl
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1203
	ld a, h
__LABEL1203:
	push af
	ld a, (ix-5)
	push af
	ld h, 10
	pop af
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1204
	ld a, h
__LABEL1204:
	push af
	ld a, (ix-6)
	push af
	ld h, 12
	pop af
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1205
	ld a, h
__LABEL1205:
	push af
	ld a, (ix-6)
	add a, (ix-9)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	add a, (ix-8)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	ld h, (hl)
	or a
	jr z, __LABEL1206
	ld a, h
__LABEL1206:
	pop de
	or d
	jp z, __LABEL537
	ld a, (ix-6)
	add a, (ix-9)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL540
	xor a
	push af
	ld a, (ix-6)
	add a, (ix-9)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -41
	call __PSTOREF
	ld (ix-14), 1
__LABEL540:
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	add a, (ix-8)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL542
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	add a, (ix-8)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
	ld (ix-14), 1
__LABEL542:
	ld a, (ix-14)
	or a
	jp nz, __LABEL544
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld a, l
	ld (ix-15), a
	push af
	ld h, 10
	pop af
	cp h
	jp nc, __LABEL545
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -41
	call __PSTOREF
	jp __LABEL546
__LABEL545:
	ld a, (ix-15)
	push af
	ld h, 20
	pop af
	cp h
	jp nc, __LABEL547
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
	jp __LABEL548
__LABEL547:
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -41
	call __PSTOREF
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
__LABEL548:
__LABEL546:
	xor a
	push af
	ld a, (ix-6)
	add a, (ix-9)
	push af
	ld a, (ix-5)
	add a, (ix-8)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
	ld (ix-14), 1
__LABEL544:
	jp __LABEL538
__LABEL537:
	ld a, (ix-9)
	push af
	ld h, 0
	pop af
	call __LTI8
	or a
	jp z, __LABEL549
	ld a, (ix-6)
	dec a
	jp nz, __LABEL551
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -41
	call __PSTOREF
	ld (ix-14), 1
	jp __LABEL552
__LABEL551:
	ld a, (ix-6)
	add a, (ix-9)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL554
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -41
	call __PSTOREF
	ld (ix-14), 1
	xor a
	push af
	ld a, (ix-6)
	add a, (ix-9)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
__LABEL554:
__LABEL552:
	jp __LABEL550
__LABEL549:
	ld a, (ix-9)
	push af
	xor a
	pop hl
	call __LTI8
	or a
	jp z, __LABEL556
	ld a, (ix-6)
	sub 19
	jp nz, __LABEL557
	ld a, (ix-5)
	push af
	ld a, (ix-4)
	pop hl
	call __LEI8
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-4)
	add a, 3
	ld h, a
	pop af
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1207
	ld a, h
__LABEL1207:
	or a
	jp z, __LABEL559
	ld a, (ix-5)
	sub (ix-4)
	push af
	call _GetSpeedX
	ld hl, -36
	call __PSTOREF
	call _GetSpeedY
	ld hl, -41
	call __PSTOREF
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	res 7, e
	push bc
	push de
	push af
	ld a, 081h
	ld de, 00000h
	ld bc, 00000h
	call __LTF
	push af
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	res 7, e
	push bc
	push de
	push af
	ld a, 081h
	ld de, 00000h
	ld bc, 00000h
	call __LTF
	ld h, a
	pop af
	or a
	jr z, __LABEL1208
	ld a, h
__LABEL1208:
	or a
	jp z, __LABEL562
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	ld a, 082h
	ld de, 00000h
	ld bc, 00000h
	call __MULF
	ld hl, -41
	call __PSTOREF
__LABEL562:
	ld a, (ix-5)
	sub 10
	sub 1
	sbc a, a
	push af
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	ld a, 000h
	ld de, 00000h
	ld bc, 00000h
	call __GTF
	ld h, a
	pop af
	or a
	jr z, __LABEL1209
	ld a, h
__LABEL1209:
	or a
	jp z, __LABEL564
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
__LABEL564:
	ld a, (ix-5)
	dec a
	sub 1
	sbc a, a
	push af
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	ld a, 000h
	ld de, 00000h
	ld bc, 00000h
	call __LTF
	ld h, a
	pop af
	or a
	jr z, __LABEL1210
	ld a, h
__LABEL1210:
	or a
	jp z, __LABEL566
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
__LABEL566:
	ld (ix-11), 1
	jp __LABEL560
__LABEL559:
	ld (ix-12), 1
__LABEL560:
	jp __LABEL558
__LABEL557:
	ld a, (ix-6)
	add a, (ix-9)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL568
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -41
	call __PSTOREF
	ld (ix-14), 1
	xor a
	push af
	ld a, (ix-6)
	add a, (ix-9)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
__LABEL568:
__LABEL558:
__LABEL556:
__LABEL550:
	ld a, (ix-8)
	push af
	ld h, 0
	pop af
	call __LTI8
	or a
	jp z, __LABEL569
	ld a, (ix-5)
	dec a
	jp nz, __LABEL571
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
	ld (ix-14), 1
	jp __LABEL572
__LABEL571:
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	add a, (ix-8)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL574
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
	ld (ix-14), 1
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	add a, (ix-8)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
__LABEL574:
__LABEL572:
	jp __LABEL570
__LABEL569:
	ld a, (ix-8)
	push af
	xor a
	pop hl
	call __LTI8
	or a
	jp z, __LABEL576
	ld a, (ix-5)
	sub 10
	jp nz, __LABEL577
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
	ld (ix-14), 1
	jp __LABEL578
__LABEL577:
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	add a, (ix-8)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL580
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
	ld (ix-14), 1
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	add a, (ix-8)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
__LABEL580:
__LABEL578:
__LABEL576:
__LABEL570:
__LABEL538:
	ld a, (ix-14)
	or a
	jp z, __LABEL582
	call _UpdateScreen
__LABEL582:
	jp __LABEL535
__LABEL536:
	ld a, (ix-7)
	push af
	xor a
	pop hl
	cp h
	jp nc, __LABEL583
	ld a, (ix-12)
	or a
	jp z, __LABEL585
	ld (ix-12), 0
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	call _UpdateScreen
	ld hl, 24
	push hl
	ld hl, _arkaDeathMusic
	push hl
	call _PlayMusic
	dec (ix-3)
	ld a, (ix-3)
	or a
	jp z, __LABEL534
__LABEL588:
	ld a, (ix-3)
	push af
	call _SetLifes
	call _UpdateScreen
	jp __LABEL534
__LABEL585:
	ld a, (ix-11)
	or a
	jp z, __LABEL589
	ld (ix-11), 0
	ld (ix-10), 0
	ld hl, 3314
	push hl
	ld hl, 0
	call __BEEPER
	jp __LABEL590
__LABEL589:
	ld a, (ix-10)
	or a
	jp z, __LABEL592
	ld (ix-11), 0
	ld (ix-10), 0
	ld hl, 806
	push hl
	ld hl, 4
	call __BEEPER
__LABEL592:
__LABEL590:
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	push ix
	pop hl
	ld de, -26
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __ADDF
	ld hl, -26
	call __PSTOREF
	push ix
	pop hl
	ld de, -31
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __ADDF
	ld hl, -31
	call __PSTOREF
	push ix
	pop hl
	ld de, -26
	add hl, de
	call __PLOADF
	call __FTOU32REG
	ld a, l
	ld (ix-5), a
	push ix
	pop hl
	ld de, -31
	add hl, de
	call __PLOADF
	call __FTOU32REG
	ld a, l
	ld (ix-6), a
	ld a, 1
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	call _UpdateScreen
	call _ResetFrameCounter
	ld (ix-13), 0
__LABEL593:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL594
	call INKEY
	ld d, h
	ld e, l
	ld bc, -21
	call __PSTORE_STR2
	ld l, (ix-19)
	ld h, (ix-18)
	dec hl
	ld (ix-19), l
	ld (ix-18), h
	ld l, (ix-21)
	ld h, (ix-20)
	push hl
	ld de, __LABEL415
	pop hl
	xor a
	call __STRNE
	ld h, (ix-13)
	or a
	jr z, __LABEL1211
	ld a, h
__LABEL1211:
	push af
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	ld hl, 1
	pop de
	or a
	sbc hl, de
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1212
	ld a, h
__LABEL1212:
	or a
	jp nz, __LABEL593
__LABEL595:
	ld (ix-13), 0
__LABEL596:
	ld l, (ix-21)
	ld h, (ix-20)
	push hl
	ld de, __LABEL415
	pop hl
	xor a
	call __STRNE
	or a
	jp z, __LABEL598
	ld l, (ix-21)
	ld h, (ix-20)
	push hl
	ld de, __LABEL446
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL599
	ld a, (ix-4)
	push af
	ld a, 1
	pop hl
	cp h
	jp nc, __LABEL602
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	dec (ix-4)
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	call _UpdateScreen
	ld (ix-19), 50
	ld (ix-18), 0
	ld (ix-13), 1
__LABEL602:
	jp __LABEL600
__LABEL599:
	ld l, (ix-21)
	ld h, (ix-20)
	push hl
	ld de, __LABEL451
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL604
	ld a, (ix-4)
	push af
	ld h, 8
	pop af
	cp h
	jp nc, __LABEL606
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	inc (ix-4)
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	call _UpdateScreen
	ld (ix-19), 50
	ld (ix-18), 0
	ld (ix-13), 1
__LABEL606:
__LABEL604:
__LABEL600:
__LABEL598:
	jp __LABEL593
__LABEL594:
__LABEL586:
	jp __LABEL584
__LABEL583:
	jp __LABEL534
__LABEL584:
	jp __LABEL533
__LABEL534:
	jp __LABEL513
__LABEL514:
	ld a, (ix-3)
	or a
	jp nz, __LABEL607
	ld (ix-1), 1
	jp __LABEL608
__LABEL607:
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, 50
	add hl, de
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	inc (ix+5)
	ld a, (ix+5)
	push af
	ld a, 99
	pop hl
	cp h
	jp nc, __LABEL610
	ld a, 1
	jp _RunArkanoid__leave
__LABEL610:
	call _ShowCurtain
__LABEL608:
	jp __LABEL507
__LABEL508:
	xor a
_RunArkanoid__leave:
	ex af, af'
	exx
	ld l, (ix-21)
	ld h, (ix-20)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_RunRacing:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -20
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 19
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -1
	add hl, bc
	ex de, hl
	ld hl, __LABEL1213
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -10
	add hl, bc
	ex de, hl
	ld hl, __LABEL1214
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -11
	add hl, bc
	ex de, hl
	ld hl, __LABEL1215
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -13
	add hl, bc
	ex de, hl
	ld hl, __LABEL1216
	ld bc, 1
	ldir
	ld a, (_playedRacingMusic)
	or a
	jp nz, __LABEL612
	ld a, 1
	ld (_playedRacingMusic), a
	ld hl, 42
	push hl
	ld hl, _raceIntroMusic
	push hl
	call _PlayMusic
__LABEL612:
	call _HideNextTitle
	ld l, (ix-20)
	ld h, (ix-19)
	push hl
	call _SetScore
__LABEL613:
	ld a, (ix-13)
	push af
	xor a
	pop hl
	cp h
	jp nc, __LABEL614
	ld (ix-4), 0
	ld (ix-7), 0
	ld (ix-10), 20
	ld (ix-11), 3
	ld (ix-1), 1
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld a, l
	ld (ix-14), a
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	ld h, a
	ld a, 10
	sub h
	ld (ix-15), a
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld bc, 0
	push bc
	ld bc, 10
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-16), a
	ld a, (ix-13)
	push af
	call _SetLifes
	ld a, (ix+5)
	push af
	call _SetLevel
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 1
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 3
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	push af
	ld a, 18
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 17
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL615:
	ld a, (ix-12)
	or a
	jp nz, __LABEL616
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 1
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 1
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 10
	push af
	call _SetCell
	ld a, (ix-1)
	dec a
	jp nz, __LABEL617
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	call _SetCell
	jp __LABEL618
__LABEL617:
	ld a, 1
	push af
	ld a, (ix-1)
	dec a
	push af
	ld a, 1
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, (ix-1)
	dec a
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL618:
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 9
	push af
	ld a, 1
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 9
	push af
	ld a, 10
	push af
	call _SetCell
	ld a, (ix-1)
	sub 10
	jp nz, __LABEL619
	ld (ix-1), 1
	jp __LABEL620
__LABEL619:
	inc (ix-1)
__LABEL620:
	ld a, (ix-4)
	sub 1
	sbc a, a
	push af
	ld a, (ix-10)
	push af
	ld a, 6
	pop hl
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1217
	ld a, h
__LABEL1217:
	push af
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix-14)
	inc a
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	call __LEI32
	ld h, a
	pop af
	or a
	jr z, __LABEL1218
	ld a, h
__LABEL1218:
	or a
	jp z, __LABEL621
	ld (ix-6), 254
	call RND
	push bc
	push de
	push af
	ld a, 082h
	ld de, 00000h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 1
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	push hl
	push de
	ld de, 0
	ld hl, 3
	call __MUL32
	ld a, l
	ld (ix-5), a
	ld (ix-10), 254
	ld a, 253
	push af
	ld a, (ix-5)
	push af
	call _PlaceCar
	ld (ix-4), 1
	jp __LABEL622
__LABEL621:
	ld a, (ix-4)
	or a
	jp z, __LABEL624
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _PlaceCar
	inc (ix-6)
	ld a, (ix-6)
	ld (ix-10), a
	ld a, (ix-6)
	push af
	ld a, 20
	pop hl
	call __LTI8
	or a
	jp z, __LABEL626
	ld (ix-4), 0
	dec (ix-16)
	ld l, (ix-20)
	ld h, (ix-19)
	inc hl
	ld (ix-20), l
	ld (ix-19), h
	ld l, (ix-20)
	ld h, (ix-19)
	push hl
	call _SetScore
	ld a, (ix-16)
	or a
	jp z, __LABEL616
__LABEL628:
__LABEL626:
	ld a, (ix-4)
	push af
	ld a, (ix-6)
	push af
	ld a, 4
	pop hl
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1219
	ld a, h
__LABEL1219:
	push af
	ld a, (ix-6)
	push af
	ld h, 12
	pop af
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1220
	ld a, h
__LABEL1220:
	push af
	call RND
	push bc
	push de
	push af
	ld a, 086h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix-14)
	inc a
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	call __LEI32
	ld h, a
	pop af
	or a
	jr z, __LABEL1221
	ld a, h
__LABEL1221:
	or a
	jp z, __LABEL630
	ld a, (ix-5)
	sub 3
	jp nz, __LABEL631
	ld (ix-2), 3
	jp __LABEL632
__LABEL631:
	ld (ix-2), 253
__LABEL632:
	call _UpdateScreen
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-6)
	add a, 4
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	add a, 3
	push af
	ld a, (ix-5)
	push af
	call _MoveRect
	ld a, (ix-5)
	add a, (ix-2)
	ld (ix-5), a
__LABEL630:
__LABEL624:
__LABEL622:
	ld a, (ix-7)
	sub 1
	sbc a, a
	push af
	ld a, (ix-10)
	push af
	ld a, 6
	pop hl
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1222
	ld a, h
__LABEL1222:
	push af
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix-14)
	inc a
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	call __LEI32
	ld h, a
	pop af
	or a
	jr z, __LABEL1223
	ld a, h
__LABEL1223:
	or a
	jp z, __LABEL633
	call RND
	push bc
	push de
	push af
	ld a, 082h
	ld de, 00000h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 1
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	push hl
	push de
	ld de, 0
	ld hl, 3
	call __MUL32
	ld a, l
	ld (ix-8), a
	ld (ix-9), 254
	ld (ix-10), 254
	ld a, 253
	push af
	ld a, (ix-8)
	push af
	call _PlaceCar
	ld (ix-7), 1
	jp __LABEL634
__LABEL633:
	ld a, (ix-7)
	or a
	jp z, __LABEL636
	ld a, (ix-9)
	push af
	ld a, (ix-8)
	push af
	call _PlaceCar
	inc (ix-9)
	ld a, (ix-9)
	ld h, (ix-10)
	call __LTI8
	push af
	ld a, (ix-4)
	sub 1
	sbc a, a
	pop de
	or d
	jp z, __LABEL638
	ld a, (ix-9)
	ld (ix-10), a
__LABEL638:
	ld a, (ix-9)
	push af
	ld a, 20
	pop hl
	call __LTI8
	or a
	jp z, __LABEL640
	ld (ix-7), 0
	dec (ix-16)
	ld l, (ix-20)
	ld h, (ix-19)
	inc hl
	ld (ix-20), l
	ld (ix-19), h
	ld l, (ix-20)
	ld h, (ix-19)
	push hl
	call _SetScore
	ld a, (ix-16)
	or a
	jp z, __LABEL616
__LABEL642:
__LABEL640:
	ld a, (ix-7)
	push af
	ld a, (ix-9)
	push af
	ld a, 4
	pop hl
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1224
	ld a, h
__LABEL1224:
	push af
	ld a, (ix-9)
	push af
	ld h, 12
	pop af
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1225
	ld a, h
__LABEL1225:
	push af
	call RND
	push bc
	push de
	push af
	ld a, 086h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix-14)
	inc a
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	call __LEI32
	ld h, a
	pop af
	or a
	jr z, __LABEL1226
	ld a, h
__LABEL1226:
	or a
	jp z, __LABEL644
	ld a, (ix-8)
	sub 3
	jp nz, __LABEL645
	ld (ix-2), 3
	jp __LABEL646
__LABEL645:
	ld (ix-2), 253
__LABEL646:
	call _UpdateScreen
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-9)
	add a, 4
	push af
	ld a, (ix-9)
	push af
	ld a, (ix-8)
	add a, 3
	push af
	ld a, (ix-8)
	push af
	call _MoveRect
	ld a, (ix-8)
	add a, (ix-2)
	ld (ix-8), a
__LABEL644:
__LABEL636:
__LABEL634:
	ld a, (ix-4)
	push af
	ld a, (ix-6)
	push af
	ld a, 13
	pop hl
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1227
	ld a, h
__LABEL1227:
	push af
	ld a, (ix-5)
	sub (ix-11)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1228
	ld a, h
__LABEL1228:
	push af
	ld a, (ix-7)
	push af
	ld a, (ix-9)
	push af
	ld a, 13
	pop hl
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1229
	ld a, h
__LABEL1229:
	push af
	ld a, (ix-8)
	sub (ix-11)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1230
	ld a, h
__LABEL1230:
	pop de
	or d
	jp z, __LABEL648
	ld (ix-12), 1
	jp __LABEL616
__LABEL648:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL649:
	ld a, (ix-15)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL650
	call INKEY
	ld d, h
	ld e, l
	ld bc, -18
	call __PSTORE_STR2
	ld l, (ix-18)
	ld h, (ix-17)
	push hl
	ld de, __LABEL446
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL651
	ld a, (ix-11)
	sub 6
	jp nz, __LABEL654
	xor a
	push af
	ld a, 253
	push af
	ld a, 20
	push af
	ld a, 17
	push af
	ld a, 8
	push af
	ld a, 6
	push af
	call _MoveRect
	call _UpdateScreen
	ld (ix-11), 3
	ld a, (ix-4)
	push af
	ld a, (ix-6)
	push af
	ld a, 13
	pop hl
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1231
	ld a, h
__LABEL1231:
	push af
	ld a, (ix-5)
	sub (ix-11)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1232
	ld a, h
__LABEL1232:
	push af
	ld a, (ix-7)
	push af
	ld a, (ix-9)
	push af
	ld a, 13
	pop hl
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1233
	ld a, h
__LABEL1233:
	push af
	ld a, (ix-8)
	sub (ix-11)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1234
	ld a, h
__LABEL1234:
	pop de
	or d
	jp z, __LABEL656
	ld (ix-12), 1
	jp __LABEL650
__LABEL656:
__LABEL654:
	jp __LABEL652
__LABEL651:
	ld l, (ix-18)
	ld h, (ix-17)
	push hl
	ld de, __LABEL451
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL657
	ld a, (ix-11)
	sub 3
	jp nz, __LABEL660
	xor a
	push af
	ld a, 3
	push af
	ld a, 20
	push af
	ld a, 17
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _MoveRect
	call _UpdateScreen
	ld (ix-11), 6
	ld a, (ix-4)
	push af
	ld a, (ix-6)
	push af
	ld a, 13
	pop hl
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1235
	ld a, h
__LABEL1235:
	push af
	ld a, (ix-5)
	sub (ix-11)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1236
	ld a, h
__LABEL1236:
	push af
	ld a, (ix-7)
	push af
	ld a, (ix-9)
	push af
	ld a, 13
	pop hl
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1237
	ld a, h
__LABEL1237:
	push af
	ld a, (ix-8)
	sub (ix-11)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1238
	ld a, h
__LABEL1238:
	pop de
	or d
	jp z, __LABEL662
	ld (ix-12), 1
	jp __LABEL650
__LABEL662:
__LABEL660:
	jp __LABEL658
__LABEL657:
	ld l, (ix-18)
	ld h, (ix-17)
	push hl
	ld de, __LABEL663
	pop hl
	xor a
	call __STREQ
	or a
	jp nz, __LABEL650
__LABEL665:
__LABEL658:
__LABEL652:
	jp __LABEL649
__LABEL650:
	jp __LABEL615
__LABEL616:
	ld a, (ix-12)
	or a
	jp z, __LABEL666
	dec (ix-13)
	ld a, 18
	push af
	ld a, (ix-11)
	inc a
	push af
	call _Explode
	call _ShowCurtain
	ld (ix-12), 0
	jp __LABEL667
__LABEL666:
	inc (ix+5)
	ld a, (ix+5)
	push af
	ld a, 99
	pop hl
	cp h
	jp nc, __LABEL669
	ld a, 1
	jp _RunRacing__leave
__LABEL669:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	or a
	jp nz, __LABEL671
	ld hl, 14
	push hl
	ld hl, _raceLevelMusic
	push hl
	call _PlayMusic
__LABEL671:
	ld l, (ix-20)
	ld h, (ix-19)
	ld de, 10
	add hl, de
	ld (ix-20), l
	ld (ix-19), h
	call _ShowCurtain
__LABEL667:
	jp __LABEL613
__LABEL614:
	xor a
_RunRacing__leave:
	ex af, af'
	exx
	ld l, (ix-18)
	ld h, (ix-17)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_PlaceCar:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+7)
	push af
	ld h, 1
	pop af
	call __LTI8
	or a
	jp z, __LABEL672
	xor a
	push af
	ld a, (ix+7)
	add a, 3
	push af
	ld a, 1
	push af
	ld a, (ix+5)
	add a, 3
	push af
	ld a, (ix+5)
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, (ix+7)
	add a, 4
	push af
	ld a, (ix+5)
	inc a
	push af
	call _SetCell
	ld a, (ix+7)
	push af
	ld a, 253
	pop hl
	call __LTI8
	or a
	jp z, __LABEL675
	ld a, 1
	push af
	ld a, (ix+7)
	add a, 3
	push af
	ld a, (ix+5)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, (ix+7)
	add a, 3
	push af
	ld a, (ix+5)
	inc a
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, (ix+7)
	add a, 3
	push af
	ld a, (ix+5)
	add a, 2
	push af
	call _SetCell
__LABEL675:
	ld a, (ix+7)
	push af
	ld a, 254
	pop hl
	call __LTI8
	or a
	jp z, __LABEL677
	ld a, 1
	push af
	ld a, (ix+7)
	add a, 2
	push af
	ld a, (ix+5)
	inc a
	push af
	call _SetCell
__LABEL677:
	ld a, (ix+7)
	or a
	jp nz, __LABEL679
	ld a, 1
	push af
	ld a, (ix+7)
	inc a
	push af
	ld a, (ix+5)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, (ix+7)
	inc a
	push af
	ld a, (ix+5)
	add a, 2
	push af
	call _SetCell
__LABEL679:
	jp __LABEL673
__LABEL672:
	ld a, (ix+7)
	push af
	ld a, 16
	pop hl
	call __LTI8
	or a
	jp z, __LABEL680
	ld a, (ix+7)
	sub 20
	jp nz, __LABEL682
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix+5)
	add a, 2
	push af
	ld a, (ix+5)
	push af
	call _FillRect
	jp __LABEL683
__LABEL682:
	ld a, 1
	push af
	xor a
	push af
	ld a, 19
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	add a, 2
	push af
	ld a, (ix+5)
	push af
	call _MoveRect
__LABEL683:
	jp __LABEL681
__LABEL680:
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix+7)
	add a, 3
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	add a, 2
	push af
	ld a, (ix+5)
	push af
	call _MoveRect
__LABEL681:
__LABEL673:
_PlaceCar__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_LoadSnakeScreen:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld (ix-1), 1
	jp __LABEL684
__LABEL687:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _snakeScreens
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (ix-3), l
	ld (ix-2), h
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 512
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL690
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 1
	push af
	call _SetCell
__LABEL690:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 256
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL692
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 2
	push af
	call _SetCell
__LABEL692:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 128
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL694
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 3
	push af
	call _SetCell
__LABEL694:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 64
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL696
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL696:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 32
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL698
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 5
	push af
	call _SetCell
__LABEL698:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 16
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL700
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 6
	push af
	call _SetCell
__LABEL700:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 8
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL702
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 7
	push af
	call _SetCell
__LABEL702:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 4
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL704
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 8
	push af
	call _SetCell
__LABEL704:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 2
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL706
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL706:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 1
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL708
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL708:
__LABEL688:
	inc (ix-1)
__LABEL684:
	ld a, (ix-1)
	push af
	ld a, 20
	pop hl
	cp h
	jp nc, __LABEL687
__LABEL686:
_LoadSnakeScreen__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_RunSnake:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -22
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 21
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1239
	ld bc, 1
	ldir
	ld hl, -22
	ld de, __LABEL1240
	ld bc, 40
	call __ALLOC_LOCAL_ARRAY
	push ix
	pop hl
	ld bc, -10
	add hl, bc
	ex de, hl
	ld hl, __LABEL1241
	ld bc, 1
	ldir
	ld a, (_playedSnakeMusic)
	or a
	jp nz, __LABEL710
	ld a, 1
	ld (_playedSnakeMusic), a
	ld hl, 40
	push hl
	ld hl, _snakeIntroMusic
	push hl
	call _PlayMusic
__LABEL710:
	call _HideNextTitle
	ld l, (ix-18)
	ld h, (ix-17)
	push hl
	call _SetScore
__LABEL711:
	ld a, (ix-4)
	push af
	xor a
	pop hl
	cp h
	jp nc, __LABEL712
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	push hl
	ld de, 0
	ld hl, 6
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-14), a
	ld (ix-13), 0
	ld (ix-6), 4
	ld (ix-7), 0
	ld l, (ix-20)
	ld h, (ix-19)
	push hl
	ld a, 5
	pop hl
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	inc hl
	push hl
	ld a, 10
	pop hl
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	inc hl
	inc hl
	push hl
	ld a, 5
	pop hl
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	inc hl
	inc hl
	inc hl
	push hl
	ld a, 11
	pop hl
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	ld de, 4
	add hl, de
	push hl
	ld a, 5
	pop hl
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	ld de, 5
	add hl, de
	push hl
	ld a, 12
	pop hl
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	ld de, 6
	add hl, de
	push hl
	ld a, 5
	pop hl
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	ld de, 7
	add hl, de
	push hl
	ld a, 13
	pop hl
	ld (hl), a
	ld a, (ix+5)
	push af
	call _SetLevel
	ld a, (ix-4)
	push af
	call _SetLifes
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	inc a
	push af
	call _LoadSnakeScreen
	call _UpdateScreen
	ld (ix-10), 1
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld bc, 0
	push bc
	ld bc, 12
	push bc
	call __SUB32
	ld a, l
	ld (ix-5), a
__LABEL713:
	ld a, (ix-3)
	or a
	jp nz, __LABEL714
	ld hl, 0
	push hl
	ld a, (ix-6)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	ld (ix-8), a
	ld hl, 1
	push hl
	ld a, (ix-6)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	ld (ix-9), a
	ld a, (ix-6)
	ld (ix-1), a
	jp __LABEL715
__LABEL718:
	ld a, (ix-1)
	sub (ix-6)
	jp nz, __LABEL720
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	ld (ix-8), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	ld (ix-9), a
	xor a
	push af
	ld a, (ix-9)
	push af
	ld a, (ix-8)
	push af
	call _SetCell
	ld hl, 0
	push hl
	ld a, (ix-1)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-10)
	or a
	jp z, __LABEL723
	ld a, 1
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	call _SetCell
__LABEL723:
	jp __LABEL721
__LABEL720:
	ld a, (ix-1)
	dec a
	jp nz, __LABEL724
	ld a, (ix-7)
	or a
	jp nz, __LABEL726
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	dec a
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL727
__LABEL726:
	ld a, (ix-7)
	dec a
	jp nz, __LABEL728
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	inc a
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL729
__LABEL728:
	ld a, (ix-7)
	sub 2
	jp nz, __LABEL730
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	dec a
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL731
__LABEL730:
	ld a, (ix-7)
	sub 3
	jp nz, __LABEL733
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	inc a
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
__LABEL733:
__LABEL731:
__LABEL729:
__LABEL727:
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 10
	pop hl
	cp h
	sbc a, a
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld h, 1
	pop af
	cp h
	sbc a, a
	pop de
	or d
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 20
	pop hl
	cp h
	sbc a, a
	pop de
	or d
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld h, 1
	pop af
	cp h
	sbc a, a
	pop de
	or d
	jp z, __LABEL735
	ld (ix-3), 1
	jp __LABEL714
__LABEL735:
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL737
	ld a, (ix-13)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	sub (ix-11)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1242
	ld a, h
__LABEL1242:
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	sub (ix-12)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1243
	ld a, h
__LABEL1243:
	or a
	jp z, __LABEL738
	ld hl, 388
	push hl
	ld hl, 25
	call __BEEPER
	ld l, (ix-18)
	ld h, (ix-17)
	inc hl
	ld (ix-18), l
	ld (ix-17), h
	dec (ix-14)
	ld a, (ix-14)
	or a
	jp z, __LABEL714
__LABEL741:
	inc (ix-6)
	ld a, (ix-8)
	push af
	ld hl, 0
	push hl
	ld a, (ix-6)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-9)
	push af
	ld hl, 1
	push hl
	ld a, (ix-6)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld l, (ix-18)
	ld h, (ix-17)
	push hl
	call _SetScore
	ld a, 1
	push af
	ld a, (ix-9)
	push af
	ld a, (ix-8)
	push af
	call _SetCell
	ld (ix-13), 0
	jp __LABEL739
__LABEL738:
	ld (ix-3), 1
	jp __LABEL714
__LABEL739:
__LABEL737:
	ld a, 1
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	call _SetCell
	jp __LABEL725
__LABEL724:
	ld hl, 0
	push hl
	ld a, (ix-1)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-10)
	or a
	jp z, __LABEL743
	ld a, 1
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	call _SetCell
__LABEL743:
__LABEL725:
__LABEL721:
__LABEL719:
	dec (ix-1)
__LABEL715:
	ld a, (ix-1)
	push af
	ld h, 1
	pop af
	call __LTI8
	or a
	jp z, __LABEL718
__LABEL717:
	call _UpdateScreen
	ld a, (ix-13)
	sub 1
	sbc a, a
	push af
	call RND
	push bc
	push de
	push af
	ld a, 087h
	ld de, 00048h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	push hl
	ld de, 0
	ld hl, 10
	call __MUL32
	call __LEI32
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1244
	ld a, h
__LABEL1244:
	or a
	jp z, __LABEL745
__LABEL746:
	call RND
	push bc
	push de
	push af
	ld a, 084h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 1
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-11), a
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 1
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-12), a
__LABEL748:
	ld a, (ix-12)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-11)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp nz, __LABEL746
__LABEL747:
	ld (ix-13), 1
	ld a, 1
	push af
	ld a, (ix-12)
	push af
	ld a, (ix-11)
	push af
	call _SetCell
	call _UpdateScreen
__LABEL745:
	call _ResetFrameCounter
__LABEL749:
	ld a, (ix-5)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL750
	call INKEY
	ld d, h
	ld e, l
	ld bc, -16
	call __PSTORE_STR2
	ld l, (ix-16)
	ld h, (ix-15)
	push hl
	ld de, __LABEL446
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL751
	ld (ix-7), 2
	jp __LABEL752
__LABEL751:
	ld l, (ix-16)
	ld h, (ix-15)
	push hl
	ld de, __LABEL451
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL753
	ld (ix-7), 3
	jp __LABEL754
__LABEL753:
	ld l, (ix-16)
	ld h, (ix-15)
	push hl
	ld de, __LABEL663
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL755
	ld (ix-7), 0
	jp __LABEL756
__LABEL755:
	ld l, (ix-16)
	ld h, (ix-15)
	push hl
	ld de, __LABEL456
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL758
	ld (ix-7), 1
__LABEL758:
__LABEL756:
__LABEL754:
__LABEL752:
	jp __LABEL749
__LABEL750:
	jp __LABEL713
__LABEL714:
	ld a, (ix-3)
	or a
	jp z, __LABEL759
	dec (ix-4)
	ld l, (ix-20)
	ld h, (ix-19)
	inc hl
	ld a, (hl)
	push af
	ld l, (ix-20)
	ld h, (ix-19)
	ld a, (hl)
	push af
	call _Explode
	call _ShowCurtain
	ld (ix-3), 0
	jp __LABEL760
__LABEL759:
	inc (ix+5)
	ld a, (ix+5)
	push af
	ld a, 99
	pop hl
	cp h
	jp nc, __LABEL762
	ld a, 1
	jp _RunSnake__leave
__LABEL762:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	or a
	jp nz, __LABEL764
	ld hl, 14
	push hl
	ld hl, _snakeLevelMusic
	push hl
	call _PlayMusic
__LABEL764:
	ld l, (ix-18)
	ld h, (ix-17)
	ld de, 10
	add hl, de
	ld (ix-18), l
	ld (ix-17), h
	ld l, (ix-18)
	ld h, (ix-17)
	push hl
	call _SetScore
	call _ShowCurtain
__LABEL760:
	jp __LABEL711
__LABEL712:
	xor a
_RunSnake__leave:
	ex af, af'
	exx
	ld l, (ix-16)
	ld h, (ix-15)
	call __MEM_FREE
	ld l, (ix-20)
	ld h, (ix-19)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_FindBottom:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL765
__LABEL768:
	ld (ix-2), 1
	jp __LABEL770
__LABEL773:
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL776
	ld a, (ix-1)
	ld (ix-3), a
	jp __LABEL772
__LABEL776:
__LABEL774:
	inc (ix-2)
__LABEL770:
	ld a, (ix-2)
	push af
	ld a, 10
	pop hl
	call __LTI8
	or a
	jp z, __LABEL773
__LABEL772:
__LABEL769:
	inc (ix-1)
__LABEL765:
	ld a, (ix-1)
	push af
	ld a, 17
	pop hl
	call __LTI8
	or a
	jp z, __LABEL768
__LABEL767:
	ld a, (ix-3)
_FindBottom__leave:
	ld sp, ix
	pop ix
	ret
_RunDestroyer:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -17
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 16
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1245
	ld bc, 1
	ldir
	ld a, (_playedDestroyerMusic)
	or a
	jp nz, __LABEL778
	ld a, 1
	ld (_playedDestroyerMusic), a
	ld hl, 68
	push hl
	ld hl, _destroyerIntroMusic
	push hl
	call _PlayMusic
__LABEL778:
	call _HideNextTitle
	ld l, (ix-15)
	ld h, (ix-14)
	push hl
	call _SetScore
__LABEL779:
	ld a, (ix-4)
	push af
	xor a
	pop hl
	cp h
	jp nc, __LABEL780
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	push hl
	ld de, 0
	ld hl, 1
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	push hl
	push de
	ld de, 0
	ld hl, 5
	call __MUL32
	push de
	push hl
	ld de, 0
	ld hl, 50
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-10), a
	ld (ix-9), 0
	ld (ix-6), 5
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, (ix+5)
	push af
	call _SetLevel
	ld a, (ix-4)
	push af
	call _SetLifes
	call _UpdateScreen
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	push hl
	ld de, 0
	ld hl, 2
	call __MUL32
	ld bc, 0
	push bc
	ld bc, 50
	push bc
	call __SUB32
	ld a, l
	ld (ix-5), a
__LABEL781:
	ld a, (ix-3)
	sub 1
	sbc a, a
	push af
	ld a, (ix-10)
	push af
	xor a
	pop hl
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1246
	ld a, h
__LABEL1246:
	or a
	jp z, __LABEL782
	ld a, (ix-9)
	or a
	jp z, __LABEL784
	xor a
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	call _UpdateScreen
__LABEL784:
	call _FindBottom
	ld (ix-2), a
	push af
	ld a, 16
	pop hl
	call __LTI8
	or a
	jp z, __LABEL785
	ld (ix-3), 1
	jp __LABEL782
__LABEL785:
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _MoveRect
	ld (ix-1), 1
	jp __LABEL787
__LABEL790:
	ld a, 1
	push af
	ld a, 1
	push af
	call RND
	push bc
	push de
	push af
	ld a, 084h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 1
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	push af
	call _SetCell
__LABEL791:
	inc (ix-1)
__LABEL787:
	ld a, (ix-1)
	push af
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld bc, 0
	push bc
	ld bc, 1
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	pop hl
	call __LTI8
	or a
	jp z, __LABEL790
__LABEL789:
__LABEL786:
	ld a, (ix-9)
	or a
	jp z, __LABEL793
	ld a, 1
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
__LABEL793:
	ld (ix-17), 0
	ld (ix-16), 0
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL794:
	ld a, (ix-5)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL795
	ld a, (ix-9)
	or a
	jp z, __LABEL797
	ld a, (ix-8)
	push af
	ld a, 1
	pop hl
	cp h
	sbc a, a
	push af
	ld a, (ix-8)
	dec a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	ld h, (hl)
	or a
	jr z, __LABEL1247
	ld a, h
__LABEL1247:
	or a
	jp z, __LABEL798
	ld hl, 9429
	push hl
	ld hl, 0
	call __BEEPER
	ld (ix-9), 0
	xor a
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-8)
	dec a
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	ld l, (ix-15)
	ld h, (ix-14)
	inc hl
	ld (ix-15), l
	ld (ix-14), h
	ld l, (ix-15)
	ld h, (ix-14)
	push hl
	call _SetScore
	dec (ix-10)
	ld a, (ix-10)
	or a
	jp z, __LABEL795
__LABEL801:
	jp __LABEL799
__LABEL798:
	ld a, (ix-8)
	dec a
	jp nz, __LABEL802
	ld (ix-9), 0
	xor a
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	jp __LABEL803
__LABEL802:
	xor a
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	dec (ix-8)
	ld a, 1
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
__LABEL803:
__LABEL799:
	call _UpdateScreen
__LABEL797:
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	ld de, 0
	pop hl
	call __EQ16
	push af
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _Frames
	ex de, hl
	pop hl
	or a
	sbc hl, de
	sbc a, a
	pop de
	or d
	jp z, __LABEL805
	call INKEY
	ld d, h
	ld e, l
	ld bc, -13
	call __PSTORE_STR2
	ld hl, 57090
	call _MultiKeys
	or a
	jp z, __LABEL806
	ld a, (ix-6)
	sub 2
	jp nz, __LABEL808
	xor a
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	dec (ix-6)
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	inc a
	push af
	call _SetCell
	ld (ix-11), 1
	jp __LABEL809
__LABEL808:
	ld a, (ix-6)
	sub 10
	jp nz, __LABEL810
	xor a
	push af
	ld a, 255
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-6)
	dec a
	push af
	call _MoveRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	dec (ix-6)
	ld (ix-11), 1
	jp __LABEL811
__LABEL810:
	ld a, (ix-6)
	push af
	ld a, 2
	pop hl
	cp h
	jp nc, __LABEL813
	xor a
	push af
	ld a, 255
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _MoveRect
	dec (ix-6)
	ld (ix-11), 1
__LABEL813:
__LABEL811:
__LABEL809:
	jp __LABEL807
__LABEL806:
	ld hl, 57089
	call _MultiKeys
	or a
	jp z, __LABEL815
	ld a, (ix-6)
	sub 9
	jp nz, __LABEL816
	xor a
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	inc (ix-6)
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	dec a
	push af
	call _SetCell
	ld (ix-11), 1
	jp __LABEL817
__LABEL816:
	ld a, (ix-6)
	dec a
	jp nz, __LABEL818
	xor a
	push af
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	push af
	call _MoveRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	inc (ix-6)
	ld (ix-11), 1
	jp __LABEL819
__LABEL818:
	ld a, (ix-6)
	push af
	ld h, 9
	pop af
	cp h
	jp nc, __LABEL821
	xor a
	push af
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _MoveRect
	inc (ix-6)
	ld (ix-11), 1
__LABEL821:
__LABEL819:
__LABEL817:
__LABEL815:
__LABEL807:
	ld hl, 32513
	call _MultiKeys
	or a
	jp z, __LABEL823
	ld a, (ix-9)
	or a
	jp nz, __LABEL825
	ld (ix-9), 1
	ld a, (ix-6)
	ld (ix-7), a
	ld (ix-8), 18
	ld a, 1
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	call _UpdateScreen
__LABEL825:
__LABEL823:
	ld a, (ix-11)
	or a
	jp z, __LABEL827
	ld (ix-11), 0
	call _Frames
	ld de, 4
	add hl, de
	ld (ix-17), l
	ld (ix-16), h
	call _UpdateScreen
__LABEL827:
__LABEL805:
	jp __LABEL794
__LABEL795:
	jp __LABEL781
__LABEL782:
	ld a, (ix-3)
	or a
	jp z, __LABEL828
	dec (ix-4)
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _Explode
	call _ShowCurtain
	ld (ix-3), 0
	jp __LABEL829
__LABEL828:
	inc (ix+5)
	ld a, (ix+5)
	push af
	ld a, 99
	pop hl
	cp h
	jp nc, __LABEL831
	ld a, 1
	jp _RunDestroyer__leave
__LABEL831:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	or a
	jp nz, __LABEL833
	ld hl, 54
	push hl
	ld hl, _destroyerLevelMusic
	push hl
	call _PlayMusic
__LABEL833:
	ld l, (ix-15)
	ld h, (ix-14)
	ld de, 10
	add hl, de
	ld (ix-15), l
	ld (ix-14), h
	ld l, (ix-15)
	ld h, (ix-14)
	push hl
	call _SetScore
	call _ShowCurtain
__LABEL829:
	jp __LABEL779
__LABEL780:
	xor a
_RunDestroyer__leave:
	ex af, af'
	exx
	ld l, (ix-13)
	ld h, (ix-12)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_RunGhostHunter:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -10
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 9
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -2
	add hl, bc
	ex de, hl
	ld hl, __LABEL1248
	ld bc, 1
	ldir
	ld a, (_playedGhostMusic)
	or a
	jp nz, __LABEL835
	ld a, 1
	ld (_playedGhostMusic), a
	ld hl, 60
	push hl
	ld hl, _ghostIntroMusic
	push hl
	call _PlayMusic
__LABEL835:
	call _HideNextTitle
	ld l, (ix-10)
	ld h, (ix-9)
	push hl
	call _SetScore
__LABEL836:
	ld a, (ix-2)
	push af
	xor a
	pop hl
	cp h
	jp nc, __LABEL837
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	push hl
	ld de, 0
	ld hl, 1
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	push hl
	push de
	ld de, 0
	ld hl, 5
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-6), a
	ld (ix-4), 0
	ld a, (ix+5)
	push af
	call _SetLevel
	ld a, (ix-2)
	push af
	call _SetLifes
	call _UpdateScreen
__LABEL838:
	ld a, (ix-1)
	sub 1
	sbc a, a
	push af
	ld a, (ix-6)
	push af
	xor a
	pop hl
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1249
	ld a, h
__LABEL1249:
	or a
	jp z, __LABEL839
__LABEL840:
	ld a, (ix-4)
	or a
	jp nz, __LABEL841
	call INKEY
	push hl
	ld de, __LABEL415
	pop hl
	ld a, 1
	call __STRNE
	or a
	jp z, __LABEL843
	ld (ix-1), 1
	jp __LABEL841
__LABEL843:
	call RND
	push bc
	push de
	push af
	ld a, 08Dh
	ld de, 0401Ch
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	push hl
	ld de, 0
	ld hl, 1
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	push hl
	push de
	ld de, 0
	ld hl, 10
	call __MUL32
	call __LTI32
	or a
	jp z, __LABEL845
	call RND
	push bc
	push de
	push af
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	inc a
	call __U8TOFREG
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 2
	call __SWAP32
	call __DIVI32
	ld a, l
	ld (ix-3), a
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	push hl
	ld de, 0
	ld hl, 3
	call __MUL32
	ld bc, 0
	push bc
	ld bc, 47
	push bc
	call __SUB32
	ld a, l
	ld (ix-5), a
	ld a, (ix-3)
	push af
	call _DrawGhost
	ld (ix-4), 1
__LABEL845:
	jp __LABEL840
__LABEL841:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL846:
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1250
	ld a, h
__LABEL1250:
	push af
	ld a, (ix-1)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1251
	ld a, h
__LABEL1251:
	or a
	jp z, __LABEL847
	call INKEY
	ld d, h
	ld e, l
	ld bc, -8
	call __PSTORE_STR2
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld de, __LABEL446
	pop hl
	xor a
	call __STREQ
	push af
	ld a, (ix-3)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1252
	ld a, h
__LABEL1252:
	push af
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld de, __LABEL451
	pop hl
	xor a
	call __STREQ
	push af
	ld a, (ix-3)
	dec a
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1253
	ld a, h
__LABEL1253:
	pop de
	or d
	push af
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld de, __LABEL663
	pop hl
	xor a
	call __STREQ
	push af
	ld a, (ix-3)
	sub 2
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1254
	ld a, h
__LABEL1254:
	pop de
	or d
	push af
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld de, __LABEL456
	pop hl
	xor a
	call __STREQ
	push af
	ld a, (ix-3)
	sub 3
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1255
	ld a, h
__LABEL1255:
	pop de
	or d
	push af
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld de, __LABEL459
	pop hl
	xor a
	call __STREQ
	push af
	ld a, (ix-3)
	sub 4
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1256
	ld a, h
__LABEL1256:
	pop de
	or d
	jp z, __LABEL848
	ld (ix-4), 0
	dec (ix-6)
	ld l, (ix-10)
	ld h, (ix-9)
	inc hl
	ld (ix-10), l
	ld (ix-9), h
	ld a, (ix-3)
	push af
	call _KillGhost
	ld l, (ix-10)
	ld h, (ix-9)
	push hl
	call _SetScore
	call _UpdateScreen
__LABEL850:
	call INKEY
	push hl
	ld de, __LABEL415
	pop hl
	ld a, 1
	call __STRNE
	or a
	jp nz, __LABEL850
__LABEL851:
	jp __LABEL849
__LABEL848:
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld de, __LABEL415
	pop hl
	xor a
	call __STRNE
	or a
	jp z, __LABEL853
	ld (ix-1), 1
	ld (ix-4), 0
__LABEL853:
__LABEL849:
	jp __LABEL846
__LABEL847:
	ld a, (ix-4)
	or a
	jp z, __LABEL855
	ld (ix-1), 1
__LABEL855:
	ld (ix-4), 0
	jp __LABEL838
__LABEL839:
	ld a, (ix-1)
	or a
	jp z, __LABEL856
	dec (ix-2)
	call _ShowBigGhost
	call _ShowCurtain
	ld (ix-1), 0
	jp __LABEL857
__LABEL856:
	inc (ix+5)
	ld a, (ix+5)
	push af
	ld a, 99
	pop hl
	cp h
	jp nc, __LABEL859
	ld a, 1
	jp _RunGhostHunter__leave
__LABEL859:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	or a
	jp nz, __LABEL861
	ld hl, 18
	push hl
	ld hl, _ghostLevelMusic
	push hl
	call _PlayMusic
__LABEL861:
	ld l, (ix-10)
	ld h, (ix-9)
	ld de, 10
	add hl, de
	ld (ix-10), l
	ld (ix-9), h
	ld l, (ix-10)
	ld h, (ix-9)
	push hl
	call _SetScore
	call _ShowCurtain
__LABEL857:
	jp __LABEL836
__LABEL837:
	xor a
_RunGhostHunter__leave:
	ex af, af'
	exx
	ld l, (ix-8)
	ld h, (ix-7)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_ShowBigGhost:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld (ix-1), 1
	jp __LABEL862
__LABEL865:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _bigGhost
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (ix-3), l
	ld (ix-2), h
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 512
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL868
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 1
	push af
	call _SetCell
__LABEL868:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 256
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL870
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 2
	push af
	call _SetCell
__LABEL870:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 128
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL872
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 3
	push af
	call _SetCell
__LABEL872:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 64
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL874
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL874:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 32
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL876
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 5
	push af
	call _SetCell
__LABEL876:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 16
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL878
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 6
	push af
	call _SetCell
__LABEL878:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 8
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL880
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 7
	push af
	call _SetCell
__LABEL880:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 4
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL882
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 8
	push af
	call _SetCell
__LABEL882:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 2
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL884
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL884:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld de, 1
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL886
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL886:
__LABEL866:
	inc (ix-1)
__LABEL862:
	ld a, (ix-1)
	push af
	ld a, 20
	pop hl
	cp h
	jp nc, __LABEL865
__LABEL864:
	call _UpdateScreen
	ld hl, 1
	call __PAUSE
	ld hl, 66
	push hl
	ld hl, _ghostScarySound
	push hl
	call _PlayMusic
	ld hl, 66
	push hl
	ld hl, _ghostScarySound
	push hl
	call _PlayMusic
__LABEL887:
	call INKEY
	push hl
	ld de, __LABEL415
	pop hl
	ld a, 1
	call __STRNE
	or a
	jp nz, __LABEL887
__LABEL888:
	ld hl, 80
	call __PAUSE
_ShowBigGhost__leave:
	ld sp, ix
	pop ix
	ret
_DrawGhost:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld a, (ix+5)
	or a
	jp nz, __LABEL889
	ld (ix-1), 1
	ld (ix-2), 4
	jp __LABEL890
__LABEL889:
	ld a, (ix+5)
	dec a
	jp nz, __LABEL891
	ld (ix-1), 6
	ld (ix-2), 10
	jp __LABEL892
__LABEL891:
	ld a, (ix+5)
	sub 2
	jp nz, __LABEL893
	ld (ix-1), 3
	ld (ix-2), 1
	jp __LABEL894
__LABEL893:
	ld a, (ix+5)
	sub 3
	jp nz, __LABEL895
	ld (ix-1), 4
	ld (ix-2), 15
	jp __LABEL896
__LABEL895:
	ld (ix-1), 3
	ld (ix-2), 7
__LABEL896:
__LABEL894:
__LABEL892:
__LABEL890:
	ld a, 1
	push af
	ld a, (ix-2)
	add a, 5
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	add a, 4
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	add a, 4
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-2)
	inc a
	push af
	ld a, (ix-1)
	inc a
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-2)
	inc a
	push af
	ld a, (ix-1)
	add a, 3
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-2)
	add a, 3
	push af
	ld a, (ix-2)
	add a, 3
	push af
	ld a, (ix-1)
	add a, 3
	push af
	ld a, (ix-1)
	inc a
	push af
	call _FillRect
	xor a
	push af
	ld a, (ix-2)
	add a, 5
	push af
	ld a, (ix-1)
	inc a
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-2)
	add a, 5
	push af
	ld a, (ix-1)
	add a, 3
	push af
	call _SetCell
_DrawGhost__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_KillGhost:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld a, (ix+5)
	or a
	jp nz, __LABEL897
	ld (ix-1), 1
	ld (ix-2), 4
	jp __LABEL898
__LABEL897:
	ld a, (ix+5)
	dec a
	jp nz, __LABEL899
	ld (ix-1), 6
	ld (ix-2), 10
	jp __LABEL900
__LABEL899:
	ld a, (ix+5)
	sub 2
	jp nz, __LABEL901
	ld (ix-1), 3
	ld (ix-2), 1
	jp __LABEL902
__LABEL901:
	ld a, (ix+5)
	sub 3
	jp nz, __LABEL903
	ld (ix-1), 4
	ld (ix-2), 15
	jp __LABEL904
__LABEL903:
	ld (ix-1), 3
	ld (ix-2), 7
__LABEL904:
__LABEL902:
__LABEL900:
__LABEL898:
	ld (ix-3), 0
	jp __LABEL905
__LABEL908:
	xor a
	push af
	ld a, (ix-2)
	add a, (ix-3)
	push af
	ld a, (ix-2)
	add a, (ix-3)
	push af
	ld a, (ix-1)
	add a, 4
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	call _UpdateScreen
	ld hl, 233
	push hl
	ld hl, 7
	call __BEEPER
__LABEL909:
	inc (ix-3)
__LABEL905:
	ld a, (ix-3)
	push af
	ld a, 5
	pop hl
	cp h
	jp nc, __LABEL908
__LABEL907:
_KillGhost__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_ShowChar:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -8
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 7
	ld d, h
	ld e, l
	inc de
	ldir
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	ld hl, 0
	push hl
	ld hl, 0
	push hl
	xor a
	call __STRSLICE
	ld a, 1
	call __ASC
	ld l, a
	ld h, 0
	ld (ix-8), l
	ld (ix-7), h
	ld l, (ix-8)
	ld h, (ix-7)
	add hl, hl
	add hl, hl
	add hl, hl
	ex de, hl
	ld hl, (_chars)
	add hl, de
	ld (ix-8), l
	ld (ix-7), h
	xor a
	push af
	ld a, 8
	push af
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 2
	push af
	call _FillRect
	ld a, (ix+7)
	push af
	ld h, 5
	pop af
	cp h
	jp nc, __LABEL910
	ld a, (ix+7)
	add a, a
	ld h, a
	ld a, 10
	sub h
	ld (ix-1), a
	ld a, (ix+7)
	ld (ix-2), a
	ld (ix-5), 1
	jp __LABEL912
__LABEL915:
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld a, (ix-5)
	dec a
	ld l, a
	ld h, 0
	ex de, hl
	pop hl
	add hl, de
	ld a, (hl)
	ld (ix-6), a
	ld a, (ix-2)
	ld (ix-4), a
	jp __LABEL917
__LABEL920:
	ld a, 8
	sub (ix-4)
	ld h, 1
	or a
	ld b, a
	ld a, h
	jr z, __LABEL1258
__LABEL1257:
	add a, a
	djnz __LABEL1257
__LABEL1258:
	ld (ix-3), a
	ld a, (ix-6)
	and (ix-3)
	jp z, __LABEL923
	ld a, 1
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-4)
	inc a
	push af
	call _SetCell
__LABEL923:
__LABEL921:
	inc (ix-4)
__LABEL917:
	ld a, (ix-4)
	push af
	ld a, (ix-2)
	add a, (ix-1)
	dec a
	pop hl
	cp h
	jp nc, __LABEL920
__LABEL919:
__LABEL916:
	inc (ix-5)
__LABEL912:
	ld a, (ix-5)
	push af
	ld a, 8
	pop hl
	cp h
	jp nc, __LABEL915
__LABEL914:
	jp __LABEL911
__LABEL910:
	ld a, (ix+7)
	push af
	ld a, 5
	pop hl
	cp h
	jp nc, __LABEL925
	ld a, 10
	sub (ix+7)
	ld (ix+7), a
	add a, a
	ld h, a
	ld a, 10
	sub h
	ld (ix-1), a
	ld a, (ix+7)
	ld (ix-2), a
	ld (ix-5), 1
	jp __LABEL926
__LABEL929:
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld a, (ix-5)
	dec a
	ld l, a
	ld h, 0
	ex de, hl
	pop hl
	add hl, de
	ld a, (hl)
	ld (ix-6), a
	ld a, (ix-2)
	add a, (ix-1)
	dec a
	ld (ix-4), a
	jp __LABEL931
__LABEL934:
	ld a, (ix-4)
	dec a
	ld h, 1
	or a
	ld b, a
	ld a, h
	jr z, __LABEL1260
__LABEL1259:
	add a, a
	djnz __LABEL1259
__LABEL1260:
	ld (ix-3), a
	ld a, (ix-6)
	and (ix-3)
	jp z, __LABEL937
	ld a, 1
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-4)
	inc a
	push af
	call _SetCell
__LABEL937:
__LABEL935:
	dec (ix-4)
__LABEL931:
	ld a, (ix-4)
	cp (ix-2)
	jp nc, __LABEL934
__LABEL933:
__LABEL930:
	inc (ix-5)
__LABEL926:
	ld a, (ix-5)
	push af
	ld a, 8
	pop hl
	cp h
	jp nc, __LABEL929
__LABEL928:
__LABEL925:
__LABEL911:
	ld hl, 2
	call __PAUSE
_ShowChar__leave:
	ex af, af'
	exx
	ld l, (ix+4)
	ld h, (ix+5)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_ShowTetris:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL1261
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1262
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 19
	push af
	ld a, 4
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 19
	push af
	ld a, 10
	push af
	ld a, 6
	push af
	call _FillRect
__LABEL938:
	ld a, (ix-1)
	or a
	jp nz, __LABEL939
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 6
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, (ix-4)
	push af
	ld hl, __LABEL940
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-4)
	add a, (ix-3)
	ld (ix-4), a
	dec a
	sub 1
	sbc a, a
	push af
	ld a, (ix-4)
	sub 9
	sub 1
	sbc a, a
	pop de
	or d
	jp z, __LABEL942
	ld a, (ix-3)
	neg
	ld (ix-3), a
__LABEL942:
	call _UpdateScreen
	ld (ix-2), 9
	jp __LABEL943
__LABEL946:
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-2)
	inc a
	push af
	ld a, (ix-2)
	push af
	ld a, 6
	push af
	ld a, 4
	push af
	call _MoveRect
	ld a, (ix-4)
	push af
	ld hl, __LABEL940
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-4)
	add a, (ix-3)
	ld (ix-4), a
	dec a
	sub 1
	sbc a, a
	push af
	ld a, (ix-4)
	sub 9
	sub 1
	sbc a, a
	pop de
	or d
	jp z, __LABEL949
	ld a, (ix-3)
	neg
	ld (ix-3), a
__LABEL949:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL950:
	call _Frames
	push hl
	ld de, 30
	pop hl
	or a
	sbc hl, de
	jp nc, __LABEL951
	ld a, (ix-4)
	push af
	ld hl, __LABEL940
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-4)
	add a, (ix-3)
	ld (ix-4), a
	dec a
	sub 1
	sbc a, a
	push af
	ld a, (ix-4)
	sub 9
	sub 1
	sbc a, a
	pop de
	or d
	jp z, __LABEL953
	ld a, (ix-3)
	neg
	ld (ix-3), a
__LABEL953:
	call _UpdateScreen
	call INKEY
	ld d, h
	ld e, l
	ld bc, -6
	call __PSTORE_STR2
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL415
	pop hl
	xor a
	call __STRNE
	or a
	jp z, __LABEL955
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL663
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL956
	ld hl, _level
	inc (hl)
	ld a, 99
	ld hl, (_level - 1)
	call __LTI8
	or a
	jp z, __LABEL959
	xor a
	ld (_level), a
__LABEL959:
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
	jp __LABEL957
__LABEL956:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL456
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL960
	ld hl, _level
	dec (hl)
	ld h, 0
	ld a, (_level)
	call __LTI8
	or a
	jp z, __LABEL963
	ld a, 99
	ld (_level), a
__LABEL963:
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
	jp __LABEL961
__LABEL960:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL446
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL964
	ld a, 2
	jp _ShowTetris__leave
__LABEL964:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL451
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL966
	ld a, 1
	jp _ShowTetris__leave
__LABEL966:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL459
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL969
	ld a, 3
	jp _ShowTetris__leave
__LABEL969:
__LABEL967:
__LABEL965:
__LABEL961:
__LABEL957:
__LABEL955:
	jp __LABEL950
__LABEL951:
__LABEL947:
	inc (ix-2)
__LABEL943:
	ld a, (ix-2)
	push af
	ld a, 16
	pop hl
	cp h
	jp nc, __LABEL946
__LABEL945:
	xor a
	push af
	ld a, 18
	push af
	ld a, 17
	push af
	ld a, 6
	push af
	ld a, 4
	push af
	call _FillRect
	jp __LABEL938
__LABEL939:
_ShowTetris__leave:
	ex af, af'
	exx
	ld l, (ix-6)
	ld h, (ix-5)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	ret
_ShowArkanoid:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -8
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 7
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL1263
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1264
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 11
	push af
	ld a, 9
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL970:
	ld a, (ix-1)
	or a
	jp nz, __LABEL971
	ld (ix-5), 2
	ld (ix-6), 19
	ld a, 1
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-5)
	inc a
	push af
	ld a, (ix-5)
	dec a
	push af
	call _FillRect
	ld a, (ix-4)
	push af
	ld hl, __LABEL972
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-4)
	add a, (ix-3)
	ld (ix-4), a
	dec a
	sub 1
	sbc a, a
	push af
	ld a, (ix-4)
	sub 9
	sub 1
	sbc a, a
	pop de
	or d
	jp z, __LABEL974
	ld a, (ix-3)
	neg
	ld (ix-3), a
__LABEL974:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL975:
	call _Frames
	push hl
	ld de, 30
	pop hl
	or a
	sbc hl, de
	jp c, __LABEL975
__LABEL976:
	ld (ix-2), 9
	jp __LABEL977
__LABEL980:
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-5)
	inc a
	push af
	ld a, (ix-5)
	dec a
	push af
	call _FillRect
	inc (ix-5)
	dec (ix-6)
	ld a, 1
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-5)
	inc a
	push af
	ld a, (ix-5)
	dec a
	push af
	call _FillRect
	ld a, (ix-4)
	push af
	ld hl, __LABEL972
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-4)
	add a, (ix-3)
	ld (ix-4), a
	dec a
	sub 1
	sbc a, a
	push af
	ld a, (ix-4)
	sub 9
	sub 1
	sbc a, a
	pop de
	or d
	jp z, __LABEL983
	ld a, (ix-3)
	neg
	ld (ix-3), a
__LABEL983:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL984:
	call _Frames
	push hl
	ld de, 30
	pop hl
	or a
	sbc hl, de
	jp nc, __LABEL985
	ld a, (ix-4)
	push af
	ld hl, __LABEL972
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-4)
	add a, (ix-3)
	ld (ix-4), a
	dec a
	sub 1
	sbc a, a
	push af
	ld a, (ix-4)
	sub 9
	sub 1
	sbc a, a
	pop de
	or d
	jp z, __LABEL987
	ld a, (ix-3)
	neg
	ld (ix-3), a
__LABEL987:
	call _UpdateScreen
	call INKEY
	ld d, h
	ld e, l
	ld bc, -8
	call __PSTORE_STR2
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld de, __LABEL415
	pop hl
	xor a
	call __STRNE
	or a
	jp z, __LABEL989
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld de, __LABEL663
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL990
	ld hl, _level
	inc (hl)
	ld a, 99
	ld hl, (_level - 1)
	call __LTI8
	or a
	jp z, __LABEL993
	ld a, 1
	ld (_level), a
__LABEL993:
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
	jp __LABEL991
__LABEL990:
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld de, __LABEL456
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL994
	ld hl, _level
	dec (hl)
	ld h, 1
	ld a, (_level)
	call __LTI8
	or a
	jp z, __LABEL997
	ld a, 99
	ld (_level), a
__LABEL997:
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
	jp __LABEL995
__LABEL994:
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld de, __LABEL446
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL998
	ld a, 2
	jp _ShowArkanoid__leave
__LABEL998:
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld de, __LABEL451
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1000
	ld a, 1
	jp _ShowArkanoid__leave
__LABEL1000:
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld de, __LABEL459
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1003
	ld a, 3
	jp _ShowArkanoid__leave
__LABEL1003:
__LABEL1001:
__LABEL999:
__LABEL995:
__LABEL991:
__LABEL989:
	jp __LABEL984
__LABEL985:
__LABEL981:
	inc (ix-2)
__LABEL977:
	ld a, (ix-2)
	push af
	ld a, 15
	pop hl
	cp h
	jp nc, __LABEL980
__LABEL979:
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-5)
	inc a
	push af
	ld a, (ix-5)
	dec a
	push af
	call _FillRect
	jp __LABEL970
__LABEL971:
_ShowArkanoid__leave:
	ex af, af'
	exx
	ld l, (ix-8)
	ld h, (ix-7)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	ret
_ShowRacing:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL1265
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1266
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL1004:
	ld a, (ix-1)
	or a
	jp nz, __LABEL1005
	ld (ix-2), 1
	jp __LABEL1006
__LABEL1009:
	ld a, (ix-2)
	dec a
	jp nz, __LABEL1011
	xor a
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 3
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	push af
	ld a, 18
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 17
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 3
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 11
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 12
	push af
	ld a, 12
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 13
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	call _FillRect
	jp __LABEL1012
__LABEL1011:
	ld a, (ix-2)
	push af
	ld h, 4
	pop af
	cp h
	sbc a, a
	push af
	ld a, (ix-2)
	push af
	ld a, 4
	pop hl
	cp h
	sbc a, a
	pop de
	or d
	jp z, __LABEL1013
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-2)
	add a, 11
	push af
	ld a, (ix-2)
	add a, 8
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _MoveRect
	jp __LABEL1014
__LABEL1013:
	ld a, (ix-2)
	sub 4
	jp nz, __LABEL1016
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-2)
	add a, 11
	push af
	ld a, (ix-2)
	add a, 8
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _MoveRect
	xor a
	push af
	ld a, 3
	push af
	ld a, 20
	push af
	ld a, 17
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _MoveRect
__LABEL1016:
__LABEL1014:
__LABEL1012:
	ld a, (ix-4)
	push af
	ld hl, __LABEL1017
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-4)
	add a, (ix-3)
	ld (ix-4), a
	dec a
	sub 1
	sbc a, a
	push af
	ld a, (ix-4)
	sub 9
	sub 1
	sbc a, a
	pop de
	or d
	jp z, __LABEL1019
	ld a, (ix-3)
	neg
	ld (ix-3), a
__LABEL1019:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1020:
	call _Frames
	push hl
	ld de, 30
	pop hl
	or a
	sbc hl, de
	jp nc, __LABEL1021
	ld a, (ix-4)
	push af
	ld hl, __LABEL1017
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-4)
	add a, (ix-3)
	ld (ix-4), a
	dec a
	sub 1
	sbc a, a
	push af
	ld a, (ix-4)
	sub 9
	sub 1
	sbc a, a
	pop de
	or d
	jp z, __LABEL1023
	ld a, (ix-3)
	neg
	ld (ix-3), a
__LABEL1023:
	call _UpdateScreen
	call INKEY
	ld d, h
	ld e, l
	ld bc, -6
	call __PSTORE_STR2
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL415
	pop hl
	xor a
	call __STRNE
	or a
	jp z, __LABEL1025
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL663
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1026
	ld hl, _level
	inc (hl)
	ld a, 99
	ld hl, (_level - 1)
	call __LTI8
	or a
	jp z, __LABEL1029
	xor a
	ld (_level), a
__LABEL1029:
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
	jp __LABEL1027
__LABEL1026:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL456
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1030
	ld hl, _level
	dec (hl)
	ld h, 0
	ld a, (_level)
	call __LTI8
	or a
	jp z, __LABEL1033
	ld a, 99
	ld (_level), a
__LABEL1033:
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
	jp __LABEL1031
__LABEL1030:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL446
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1034
	ld a, 2
	jp _ShowRacing__leave
__LABEL1034:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL451
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1036
	ld a, 1
	jp _ShowRacing__leave
__LABEL1036:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL459
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1039
	ld a, 3
	jp _ShowRacing__leave
__LABEL1039:
__LABEL1037:
__LABEL1035:
__LABEL1031:
__LABEL1027:
__LABEL1025:
	jp __LABEL1020
__LABEL1021:
__LABEL1010:
	inc (ix-2)
__LABEL1006:
	ld a, (ix-2)
	push af
	ld a, 8
	pop hl
	cp h
	jp nc, __LABEL1009
__LABEL1008:
	xor a
	push af
	ld a, 18
	push af
	ld a, 17
	push af
	ld a, 6
	push af
	ld a, 4
	push af
	call _FillRect
	jp __LABEL1004
__LABEL1005:
_ShowRacing__leave:
	ex af, af'
	exx
	ld l, (ix-6)
	ld h, (ix-5)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	ret
_ShowSnake:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL1267
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1268
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL1040:
	ld a, (ix-1)
	or a
	jp nz, __LABEL1041
	ld (ix-2), 0
	jp __LABEL1042
__LABEL1045:
	ld a, (ix-2)
	or a
	jp nz, __LABEL1047
	xor a
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 15
	push af
	ld a, 15
	push af
	ld a, 6
	push af
	ld a, 3
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 15
	push af
	ld a, 9
	push af
	call _SetCell
	jp __LABEL1048
__LABEL1047:
	xor a
	push af
	ld a, 1
	push af
	ld a, 15
	push af
	ld a, 15
	push af
	ld a, (ix-2)
	add a, 6
	dec a
	push af
	ld a, (ix-2)
	add a, 3
	dec a
	push af
	call _MoveRect
__LABEL1048:
	ld a, (ix-4)
	push af
	ld hl, __LABEL1049
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-4)
	add a, (ix-3)
	ld (ix-4), a
	dec a
	sub 1
	sbc a, a
	push af
	ld a, (ix-4)
	sub 9
	sub 1
	sbc a, a
	pop de
	or d
	jp z, __LABEL1051
	ld a, (ix-3)
	neg
	ld (ix-3), a
__LABEL1051:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1052:
	call _Frames
	push hl
	ld de, 30
	pop hl
	or a
	sbc hl, de
	jp nc, __LABEL1053
	ld a, (ix-4)
	push af
	ld hl, __LABEL1049
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-4)
	add a, (ix-3)
	ld (ix-4), a
	dec a
	sub 1
	sbc a, a
	push af
	ld a, (ix-4)
	sub 9
	sub 1
	sbc a, a
	pop de
	or d
	jp z, __LABEL1055
	ld a, (ix-3)
	neg
	ld (ix-3), a
__LABEL1055:
	call _UpdateScreen
	call INKEY
	ld d, h
	ld e, l
	ld bc, -6
	call __PSTORE_STR2
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL415
	pop hl
	xor a
	call __STRNE
	or a
	jp z, __LABEL1057
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL663
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1058
	ld hl, _level
	inc (hl)
	ld a, 99
	ld hl, (_level - 1)
	call __LTI8
	or a
	jp z, __LABEL1061
	xor a
	ld (_level), a
__LABEL1061:
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
	jp __LABEL1059
__LABEL1058:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL456
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1062
	ld hl, _level
	dec (hl)
	ld h, 0
	ld a, (_level)
	call __LTI8
	or a
	jp z, __LABEL1065
	ld a, 99
	ld (_level), a
__LABEL1065:
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
	jp __LABEL1063
__LABEL1062:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL446
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1066
	ld a, 2
	jp _ShowSnake__leave
__LABEL1066:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL451
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1068
	ld a, 1
	jp _ShowSnake__leave
__LABEL1068:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL459
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1071
	ld a, 3
	jp _ShowSnake__leave
__LABEL1071:
__LABEL1069:
__LABEL1067:
__LABEL1063:
__LABEL1059:
__LABEL1057:
	jp __LABEL1052
__LABEL1053:
__LABEL1046:
	inc (ix-2)
__LABEL1042:
	ld a, (ix-2)
	push af
	ld a, 3
	pop hl
	cp h
	jp nc, __LABEL1045
__LABEL1044:
	jp __LABEL1040
__LABEL1041:
_ShowSnake__leave:
	ex af, af'
	exx
	ld l, (ix-6)
	ld h, (ix-5)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	ret
_ShowDestroyer:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL1269
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1270
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL1072:
	ld a, (ix-1)
	or a
	jp nz, __LABEL1073
	ld (ix-2), 0
	jp __LABEL1074
__LABEL1077:
	ld a, (ix-2)
	or a
	jp nz, __LABEL1079
	xor a
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 11
	push af
	ld a, 9
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	push af
	ld a, 4
	push af
	call _SetCell
	jp __LABEL1080
__LABEL1079:
	xor a
	push af
	ld a, 18
	sub (ix-2)
	inc a
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	sub (ix-2)
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL1080:
	ld a, (ix-4)
	push af
	ld hl, __LABEL1081
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-4)
	add a, (ix-3)
	ld (ix-4), a
	dec a
	sub 1
	sbc a, a
	push af
	ld a, (ix-4)
	sub 9
	sub 1
	sbc a, a
	pop de
	or d
	jp z, __LABEL1083
	ld a, (ix-3)
	neg
	ld (ix-3), a
__LABEL1083:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1084:
	call _Frames
	push hl
	ld de, 20
	pop hl
	or a
	sbc hl, de
	jp nc, __LABEL1085
	ld a, (ix-4)
	push af
	ld hl, __LABEL1081
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-4)
	add a, (ix-3)
	ld (ix-4), a
	dec a
	sub 1
	sbc a, a
	push af
	ld a, (ix-4)
	sub 9
	sub 1
	sbc a, a
	pop de
	or d
	jp z, __LABEL1087
	ld a, (ix-3)
	neg
	ld (ix-3), a
__LABEL1087:
	call _UpdateScreen
	call INKEY
	ld d, h
	ld e, l
	ld bc, -6
	call __PSTORE_STR2
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL415
	pop hl
	xor a
	call __STRNE
	or a
	jp z, __LABEL1089
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL663
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1090
	ld hl, _level
	inc (hl)
	ld a, 99
	ld hl, (_level - 1)
	call __LTI8
	or a
	jp z, __LABEL1093
	xor a
	ld (_level), a
__LABEL1093:
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
	jp __LABEL1091
__LABEL1090:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL456
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1094
	ld hl, _level
	dec (hl)
	ld h, 0
	ld a, (_level)
	call __LTI8
	or a
	jp z, __LABEL1097
	ld a, 99
	ld (_level), a
__LABEL1097:
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
	jp __LABEL1095
__LABEL1094:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL446
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1098
	ld a, 2
	jp _ShowDestroyer__leave
__LABEL1098:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL451
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1100
	ld a, 1
	jp _ShowDestroyer__leave
__LABEL1100:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL459
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1103
	ld a, 3
	jp _ShowDestroyer__leave
__LABEL1103:
__LABEL1101:
__LABEL1099:
__LABEL1095:
__LABEL1091:
__LABEL1089:
	jp __LABEL1084
__LABEL1085:
__LABEL1078:
	inc (ix-2)
__LABEL1074:
	ld a, (ix-2)
	push af
	ld a, 8
	pop hl
	cp h
	jp nc, __LABEL1077
__LABEL1076:
	jp __LABEL1072
__LABEL1073:
_ShowDestroyer__leave:
	ex af, af'
	exx
	ld l, (ix-6)
	ld h, (ix-5)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	ret
_ShowGhost:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL1271
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1272
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 9
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL1104:
	ld a, (ix-1)
	or a
	jp nz, __LABEL1105
	ld (ix-2), 1
	jp __LABEL1106
__LABEL1109:
	ld a, (ix-2)
	dec a
	sub 1
	sbc a, a
	push af
	ld a, (ix-2)
	sub 3
	sub 1
	sbc a, a
	pop de
	or d
	jp z, __LABEL1111
	xor a
	push af
	ld a, 18
	push af
	ld a, 11
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	jp __LABEL1112
__LABEL1111:
	ld a, (ix-2)
	sub 2
	jp nz, __LABEL1113
	ld a, 1
	push af
	ld a, 17
	push af
	ld a, 12
	push af
	ld a, 5
	push af
	ld a, 1
	push af
	call _FillRect
	xor a
	push af
	ld a, 12
	push af
	ld a, 1
	push af
	call _SetCell
	xor a
	push af
	ld a, 12
	push af
	ld a, 5
	push af
	call _SetCell
	xor a
	push af
	ld a, 13
	push af
	ld a, 2
	push af
	call _SetCell
	xor a
	push af
	ld a, 13
	push af
	ld a, 4
	push af
	call _SetCell
	xor a
	push af
	ld a, 15
	push af
	ld a, 15
	push af
	ld a, 4
	push af
	ld a, 2
	push af
	call _FillRect
	xor a
	push af
	ld a, 17
	push af
	ld a, 2
	push af
	call _SetCell
	xor a
	push af
	ld a, 17
	push af
	ld a, 4
	push af
	call _SetCell
	jp __LABEL1114
__LABEL1113:
	ld a, (ix-2)
	sub 4
	jp nz, __LABEL1116
	ld a, 1
	push af
	ld a, 17
	push af
	ld a, 12
	push af
	ld a, 10
	push af
	ld a, 6
	push af
	call _FillRect
	xor a
	push af
	ld a, 12
	push af
	ld a, 6
	push af
	call _SetCell
	xor a
	push af
	ld a, 12
	push af
	ld a, 10
	push af
	call _SetCell
	xor a
	push af
	ld a, 13
	push af
	ld a, 7
	push af
	call _SetCell
	xor a
	push af
	ld a, 13
	push af
	ld a, 9
	push af
	call _SetCell
	xor a
	push af
	ld a, 15
	push af
	ld a, 15
	push af
	ld a, 9
	push af
	ld a, 7
	push af
	call _FillRect
	xor a
	push af
	ld a, 17
	push af
	ld a, 7
	push af
	call _SetCell
	xor a
	push af
	ld a, 17
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL1116:
__LABEL1114:
__LABEL1112:
	ld a, (ix-4)
	push af
	ld hl, __LABEL1117
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-4)
	add a, (ix-3)
	ld (ix-4), a
	dec a
	sub 1
	sbc a, a
	push af
	ld a, (ix-4)
	sub 9
	sub 1
	sbc a, a
	pop de
	or d
	jp z, __LABEL1119
	ld a, (ix-3)
	neg
	ld (ix-3), a
__LABEL1119:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1120:
	call _Frames
	push hl
	ld de, 30
	pop hl
	or a
	sbc hl, de
	jp nc, __LABEL1121
	ld a, (ix-4)
	push af
	ld hl, __LABEL1117
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-4)
	add a, (ix-3)
	ld (ix-4), a
	dec a
	sub 1
	sbc a, a
	push af
	ld a, (ix-4)
	sub 9
	sub 1
	sbc a, a
	pop de
	or d
	jp z, __LABEL1123
	ld a, (ix-3)
	neg
	ld (ix-3), a
__LABEL1123:
	call _UpdateScreen
	call INKEY
	ld d, h
	ld e, l
	ld bc, -6
	call __PSTORE_STR2
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL415
	pop hl
	xor a
	call __STRNE
	or a
	jp z, __LABEL1125
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL663
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1126
	ld hl, _level
	inc (hl)
	ld a, 99
	ld hl, (_level - 1)
	call __LTI8
	or a
	jp z, __LABEL1129
	xor a
	ld (_level), a
__LABEL1129:
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
	jp __LABEL1127
__LABEL1126:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL456
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1130
	ld hl, _level
	dec (hl)
	ld h, 0
	ld a, (_level)
	call __LTI8
	or a
	jp z, __LABEL1133
	ld a, 99
	ld (_level), a
__LABEL1133:
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
	jp __LABEL1131
__LABEL1130:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL446
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1134
	ld a, 2
	jp _ShowGhost__leave
__LABEL1134:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL451
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1136
	ld a, 1
	jp _ShowGhost__leave
__LABEL1136:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL459
	pop hl
	xor a
	call __STREQ
	or a
	jp z, __LABEL1139
	ld a, 3
	jp _ShowGhost__leave
__LABEL1139:
__LABEL1137:
__LABEL1135:
__LABEL1131:
__LABEL1127:
__LABEL1125:
	jp __LABEL1120
__LABEL1121:
__LABEL1110:
	inc (ix-2)
__LABEL1106:
	ld a, (ix-2)
	push af
	ld a, 4
	pop hl
	cp h
	jp nc, __LABEL1109
__LABEL1108:
	jp __LABEL1104
__LABEL1105:
_ShowGhost__leave:
	ex af, af'
	exx
	ld l, (ix-6)
	ld h, (ix-5)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	ret
_SelectGame:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	call _ShowNextTitle
	xor a
	push af
	xor a
	push af
	call _SetSymbol
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
__LABEL1140:
	ld a, (ix-1)
	sub 3
	jp z, __LABEL1141
	ld a, (_game)
	or a
	jp nz, __LABEL1142
	call _ShowTetris
	ld (ix-1), a
	jp __LABEL1143
__LABEL1142:
	ld a, (_game)
	dec a
	jp nz, __LABEL1144
	call _ShowArkanoid
	ld (ix-1), a
	jp __LABEL1145
__LABEL1144:
	ld a, (_game)
	sub 2
	jp nz, __LABEL1146
	call _ShowRacing
	ld (ix-1), a
	jp __LABEL1147
__LABEL1146:
	ld a, (_game)
	sub 3
	jp nz, __LABEL1148
	call _ShowSnake
	ld (ix-1), a
	jp __LABEL1149
__LABEL1148:
	ld a, (_game)
	sub 4
	jp nz, __LABEL1150
	call _ShowDestroyer
	ld (ix-1), a
	jp __LABEL1151
__LABEL1150:
	ld a, (_game)
	sub 5
	jp nz, __LABEL1153
	call _ShowGhost
	ld (ix-1), a
__LABEL1153:
__LABEL1151:
__LABEL1149:
__LABEL1147:
__LABEL1145:
__LABEL1143:
	ld a, (ix-1)
	dec a
	jp nz, __LABEL1154
	ld hl, _game
	inc (hl)
	ld a, 5
	ld hl, (_game - 1)
	cp h
	jp nc, __LABEL1157
	xor a
	ld (_game), a
__LABEL1157:
	jp __LABEL1155
__LABEL1154:
	ld a, (ix-1)
	sub 2
	jp nz, __LABEL1158
	ld hl, _game
	dec (hl)
	ld a, 5
	ld hl, (_game - 1)
	cp h
	jp nc, __LABEL1161
	ld a, 5
	ld (_game), a
__LABEL1161:
	jp __LABEL1159
__LABEL1158:
	ld a, (ix-1)
	sub 3
	jp nz, __LABEL1163
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	call _UpdateScreen
	ld a, (_game)
	or a
	jp nz, __LABEL1164
	ld a, (_level)
	push af
	call _RunTetris
	jp _SelectGame__leave
__LABEL1164:
	ld a, (_game)
	dec a
	jp nz, __LABEL1166
	ld a, (_level)
	push af
	call _RunArkanoid
	jp _SelectGame__leave
__LABEL1166:
	ld a, (_game)
	sub 2
	jp nz, __LABEL1168
	ld a, (_level)
	push af
	call _RunRacing
	jp _SelectGame__leave
__LABEL1168:
	ld a, (_game)
	sub 3
	jp nz, __LABEL1170
	ld a, (_level)
	push af
	call _RunSnake
	jp _SelectGame__leave
__LABEL1170:
	ld a, (_game)
	sub 4
	jp nz, __LABEL1172
	ld a, (_level)
	push af
	call _RunDestroyer
	jp _SelectGame__leave
__LABEL1172:
	ld a, (_game)
	sub 5
	jp nz, __LABEL1175
	ld a, (_level)
	push af
	call _RunGhostHunter
	jp _SelectGame__leave
__LABEL1175:
__LABEL1173:
__LABEL1171:
__LABEL1169:
__LABEL1167:
__LABEL1165:
__LABEL1163:
__LABEL1159:
__LABEL1155:
	jp __LABEL1140
__LABEL1141:
_SelectGame__leave:
	ld sp, ix
	pop ix
	ret
__LABEL18:
	DEFW 000Bh
	DEFB 39h
	DEFB 39h
	DEFB 39h
	DEFB 39h
	DEFB 20h
	DEFB 49h
	DEFB 4Eh
	DEFB 20h
	DEFB 4Fh
	DEFB 4Eh
	DEFB 45h
__LABEL19:
	DEFW 0011h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A0h
__LABEL25:
	DEFW 0011h
	DEFB 0A4h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 0A2h
__LABEL26:
	DEFW 0001h
	DEFB 90h
__LABEL27:
	DEFW 0011h
	DEFB 0A0h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A0h
__LABEL28:
	DEFW 0003h
	DEFB 95h
	DEFB 96h
	DEFB 97h
__LABEL29:
	DEFW 0002h
	DEFB 9Eh
	DEFB 9Fh
__LABEL30:
	DEFW 0003h
	DEFB 9Bh
	DEFB 9Ch
	DEFB 9Dh
__LABEL105:
	DEFW 0002h
	DEFB 20h
	DEFB 20h
__LABEL141:
	DEFW 0001h
	DEFB 30h
__LABEL415:
	DEFW 0000h
__LABEL446:
	DEFW 0001h
	DEFB 6Fh
__LABEL451:
	DEFW 0001h
	DEFB 70h
__LABEL456:
	DEFW 0001h
	DEFB 61h
__LABEL459:
	DEFW 0001h
	DEFB 20h
__LABEL663:
	DEFW 0001h
	DEFB 71h
__LABEL940:
	DEFW 0001h
	DEFB 41h
__LABEL972:
	DEFW 0001h
	DEFB 42h
__LABEL1017:
	DEFW 0001h
	DEFB 43h
__LABEL1049:
	DEFW 0001h
	DEFB 44h
__LABEL1081:
	DEFW 0001h
	DEFB 45h
__LABEL1117:
	DEFW 0001h
	DEFB 46h
#line 1 "addf.asm"

#line 1 "stackf.asm"

	; -------------------------------------------------------------
	; Functions to manage FP-Stack of the ZX Spectrum ROM CALC
	; -------------------------------------------------------------


	__FPSTACK_PUSH EQU 2AB6h	; Stores an FP number into the ROM FP stack (A, ED CB)
	__FPSTACK_POP  EQU 2BF1h	; Pops an FP number out of the ROM FP stack (A, ED CB)

__FPSTACK_PUSH2: ; Pushes Current A ED CB registers and top of the stack on (SP + 4)
	                 ; Second argument to push into the stack calculator is popped out of the stack
	                 ; Since the caller routine also receives the parameters into the top of the stack
	                 ; four bytes must be removed from SP before pop them out

	    call __FPSTACK_PUSH ; Pushes A ED CB into the FP-STACK
	    exx
	    pop hl       ; Caller-Caller return addr
	    exx
	    pop hl       ; Caller return addr

	    pop af
	    pop de
	    pop bc

	    push hl      ; Caller return addr
	    exx
	    push hl      ; Caller-Caller return addr
	    exx

	    jp __FPSTACK_PUSH


__FPSTACK_I16:	; Pushes 16 bits integer in HL into the FP ROM STACK
					; This format is specified in the ZX 48K Manual
					; You can push a 16 bit signed integer as
					; 0 SS LL HH 0, being SS the sign and LL HH the low
					; and High byte respectively
		ld a, h
		rla			; sign to Carry
		sbc	a, a	; 0 if positive, FF if negative
		ld e, a
		ld d, l
		ld c, h
		xor a
		ld b, a
		jp __FPSTACK_PUSH
#line 2 "addf.asm"

	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)
	; All of them uses A EDCB registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order AF DE BC (F not used).
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__ADDF:	; Addition
		call __FPSTACK_PUSH2

		; ------------- ROM ADD
		rst 28h
		defb 0fh	; ADD
		defb 38h;   ; END CALC

		jp __FPSTACK_POP

#line 13724 "Program.zxbas"
#line 1 "array.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	; -------------------------------------------------------------------
	; Simple array Index routine
	; Number of total indexes dimensions - 1 at beginning of memory
	; HL = Start of array memory (First two bytes contains N-1 dimensions)
	; Dimension values on the stack, (top of the stack, highest dimension)
	; E.g. A(2, 4) -> PUSH <4>; PUSH <2>

	; For any array of N dimension A(aN-1, ..., a1, a0)
	; and dimensions D[bN-1, ..., b1, b0], the offset is calculated as
	; O = [a0 + b0 * (a1 + b1 * (a2 + ... bN-2(aN-1)))]
; What I will do here is to calculate the following sequence:
	; ((aN-1 * bN-2) + aN-2) * bN-3 + ...


#line 1 "mul16.asm"

__MUL16:	; Mutiplies HL with the last value stored into de stack
				; Works for both signed and unsigned

			PROC

			LOCAL __MUL16LOOP
	        LOCAL __MUL16NOADD

			ex de, hl
			pop hl		; Return address
			ex (sp), hl ; CALLEE caller convention

__MUL16_FAST:
	        ld b, 16
	        ld a, h
	        ld c, l
	        ld hl, 0

__MUL16LOOP:
	        add hl, hl  ; hl << 1
	        sla c
	        rla         ; a,c << 1
	        jp nc, __MUL16NOADD
	        add hl, de

__MUL16NOADD:
	        djnz __MUL16LOOP

			ret	; Result in hl (16 lower bits)

			ENDP

#line 20 "array.asm"

#line 24 "C:/zxbasic/library-asm/array.asm"

__ARRAY_PTR:   ;; computes an array offset from a pointer
	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c

__ARRAY:
		PROC

		LOCAL LOOP
		LOCAL ARRAY_END
		LOCAL RET_ADDRESS ; Stores return address
		LOCAL TMP_ARR_PTR ; Stores pointer temporarily

	    ld e, (hl)
	    inc hl
	    ld d, (hl)
	    inc hl
	    ld (TMP_ARR_PTR), hl
	    ex de, hl
		ex (sp), hl	; Return address in HL, array address in the stack
		ld (RET_ADDRESS + 1), hl ; Stores it for later

		exx
		pop hl		; Will use H'L' as the pointer
		ld c, (hl)	; Loads Number of dimensions from (hl)
		inc hl
		ld b, (hl)
		inc hl		; Ready
		exx

		ld hl, 0	; HL = Offset "accumulator"

LOOP:
#line 62 "C:/zxbasic/library-asm/array.asm"
		pop bc		; Get next index (Ai) from the stack

#line 72 "C:/zxbasic/library-asm/array.asm"

		add hl, bc	; Adds current index

		exx			; Checks if B'C' = 0
		ld a, b		; Which means we must exit (last element is not multiplied by anything)
		or c
		jr z, ARRAY_END		; if B'Ci == 0 we are done

		ld e, (hl)			; Loads next dimension into D'E'
		inc hl
		ld d, (hl)
		inc hl
		push de
		dec bc				; Decrements loop counter
		exx
		pop de				; DE = Max bound Number (i-th dimension)

	    call __FNMUL
		jp LOOP

ARRAY_END:
		ld a, (hl)
		exx

#line 101 "C:/zxbasic/library-asm/array.asm"
	    LOCAL ARRAY_SIZE_LOOP

	    ex de, hl
	    ld hl, 0
	    ld b, a
ARRAY_SIZE_LOOP:
	    add hl, de
	    djnz ARRAY_SIZE_LOOP

#line 111 "C:/zxbasic/library-asm/array.asm"

	    ex de, hl
		ld hl, (TMP_ARR_PTR)
		ld a, (hl)
		inc hl
		ld h, (hl)
		ld l, a
		add hl, de  ; Adds element start

RET_ADDRESS:
		jp 0

	    ;; Performs a faster multiply for little 16bit numbs
	    LOCAL __FNMUL, __FNMUL2

__FNMUL:
	    xor a
	    or h
	    jp nz, __MUL16_FAST
	    or l
	    ret z

	    cp 33
	    jp nc, __MUL16_FAST

	    ld b, l
	    ld l, h  ; HL = 0

__FNMUL2:
	    add hl, de
	    djnz __FNMUL2
	    ret

TMP_ARR_PTR:
	    DW 0  ; temporary storage for pointer to tables

		ENDP

#line 13725 "Program.zxbas"
#line 1 "arrayalloc.asm"


#line 1 "calloc.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the MIT license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the MIT license on the internet

#line 1 "alloc.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the MIT license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the MIT license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be freed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.

#line 1 "error.asm"

	; Simple error control routines
; vim:ts=4:et:

	ERR_NR    EQU    23610    ; Error code system variable


	; Error code definitions (as in ZX spectrum manual)

; Set error code with:
	;    ld a, ERROR_CODE
	;    ld (ERR_NR), a


	ERROR_Ok                EQU    -1
	ERROR_SubscriptWrong    EQU     2
	ERROR_OutOfMemory       EQU     3
	ERROR_OutOfScreen       EQU     4
	ERROR_NumberTooBig      EQU     5
	ERROR_InvalidArg        EQU     9
	ERROR_IntOutOfRange     EQU    10
	ERROR_NonsenseInBasic   EQU    11
	ERROR_InvalidFileName   EQU    14
	ERROR_InvalidColour     EQU    19
	ERROR_BreakIntoProgram  EQU    20
	ERROR_TapeLoadingErr    EQU    26


	; Raises error using RST #8
__ERROR:
	    ld (__ERROR_CODE), a
	    rst 8
__ERROR_CODE:
	    nop
	    ret

	; Sets the error system variable, but keeps running.
	; Usually this instruction if followed by the END intermediate instruction.
__STOP:
	    ld (ERR_NR), a
	    ret
#line 69 "alloc.asm"
#line 1 "heapinit.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.




	; ---------------------------------------------------------------------
	;  __MEM_INIT must be called to initalize this library with the
	; standard parameters
	; ---------------------------------------------------------------------
__MEM_INIT: ; Initializes the library using (RAMTOP) as start, and
	        ld hl, ZXBASIC_MEM_HEAP  ; Change this with other address of heap start
	        ld de, ZXBASIC_HEAP_SIZE ; Change this with your size

	; ---------------------------------------------------------------------
	;  __MEM_INIT2 initalizes this library
; Parameters:
;   HL : Memory address of 1st byte of the memory heap
;   DE : Length in bytes of the Memory Heap
	; ---------------------------------------------------------------------
__MEM_INIT2:
	        ; HL as TOP
	        PROC

	        dec de
	        dec de
	        dec de
	        dec de        ; DE = length - 4; HL = start
	        ; This is done, because we require 4 bytes for the empty dummy-header block

	        xor a
	        ld (hl), a
	        inc hl
        ld (hl), a ; First "free" block is a header: size=0, Pointer=&(Block) + 4
	        inc hl

	        ld b, h
	        ld c, l
	        inc bc
	        inc bc      ; BC = starts of next block

	        ld (hl), c
	        inc hl
	        ld (hl), b
	        inc hl      ; Pointer to next block

	        ld (hl), e
	        inc hl
	        ld (hl), d
	        inc hl      ; Block size (should be length - 4 at start); This block contains all the available memory

	        ld (hl), a ; NULL (0000h) ; No more blocks (a list with a single block)
	        inc hl
	        ld (hl), a

	        ld a, 201
	        ld (__MEM_INIT), a; "Pokes" with a RET so ensure this routine is not called again
	        ret

	        ENDP

#line 70 "alloc.asm"


	; ---------------------------------------------------------------------
	; MEM_ALLOC
	;  Allocates a block of memory in the heap.
	;
	; Parameters
	;  BC = Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	; ---------------------------------------------------------------------

MEM_ALLOC:
__MEM_ALLOC: ; Returns the 1st free block found of the given length (in BC)
	        PROC

	        LOCAL __MEM_LOOP
	        LOCAL __MEM_DONE
	        LOCAL __MEM_SUBTRACT
	        LOCAL __MEM_START
	        LOCAL TEMP, TEMP0

	TEMP EQU TEMP0 + 1

	        ld hl, 0
	        ld (TEMP), hl

__MEM_START:
	        ld hl, ZXBASIC_MEM_HEAP  ; This label point to the heap start
	        inc bc
	        inc bc  ; BC = BC + 2 ; block size needs 2 extra bytes for hidden pointer

__MEM_LOOP:  ; Loads lengh at (HL, HL+). If Lenght >= BC, jump to __MEM_DONE
	        ld a, h ;  HL = NULL (No memory available?)
	        or l
#line 111 "C:/zxbasic/library-asm/alloc.asm"
	        ret z ; NULL
#line 113 "C:/zxbasic/library-asm/alloc.asm"
	        ; HL = Pointer to Free block
	        ld e, (hl)
	        inc hl
	        ld d, (hl)
	        inc hl          ; DE = Block Length

	        push hl         ; HL = *pointer to -> next block
	        ex de, hl
	        or a            ; CF = 0
	        sbc hl, bc      ; FREE >= BC (Length)  (HL = BlockLength - Length)
	        jp nc, __MEM_DONE
	        pop hl
	        ld (TEMP), hl

	        ex de, hl
	        ld e, (hl)
	        inc hl
	        ld d, (hl)
	        ex de, hl
	        jp __MEM_LOOP

__MEM_DONE:  ; A free block has been found.
	             ; Check if at least 4 bytes remains free (HL >= 4)
	        push hl
	        exx  ; exx to preserve bc
	        pop hl
	        ld bc, 4
	        or a
	        sbc hl, bc
	        exx
	        jp nc, __MEM_SUBTRACT
	        ; At this point...
	        ; less than 4 bytes remains free. So we return this block entirely
	        ; We must link the previous block with the next to this one
	        ; (DE) => Pointer to next block
	        ; (TEMP) => &(previous->next)
	        pop hl     ; Discard current block pointer
	        push de
	        ex de, hl  ; DE = Previous block pointer; (HL) = Next block pointer
	        ld a, (hl)
	        inc hl
	        ld h, (hl)
	        ld l, a    ; HL = (HL)
	        ex de, hl  ; HL = Previous block pointer; DE = Next block pointer
TEMP0:
	        ld hl, 0   ; Pre-previous block pointer

	        ld (hl), e
	        inc hl
	        ld (hl), d ; LINKED
	        pop hl ; Returning block.

	        ret

__MEM_SUBTRACT:
	        ; At this point we have to store HL value (Length - BC) into (DE - 2)
	        ex de, hl
	        dec hl
	        ld (hl), d
	        dec hl
	        ld (hl), e ; Store new block length

	        add hl, de ; New length + DE => free-block start
	        pop de     ; Remove previous HL off the stack

	        ld (hl), c ; Store length on its 1st word
	        inc hl
	        ld (hl), b
	        inc hl     ; Return hl
	        ret

	        ENDP

#line 13 "calloc.asm"


	; ---------------------------------------------------------------------
	; MEM_CALLOC
	;  Allocates a block of memory in the heap, and clears it filling it
	;  with 0 bytes
	;
	; Parameters
	;  BC = Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	; ---------------------------------------------------------------------
__MEM_CALLOC:
	        push bc
	        call __MEM_ALLOC
	        pop bc
	        ld a, h
	        or l
	        ret z  ; No memory
	        ld (hl), 0
	        dec bc
	        ld a, b
	        or c
	        ret z  ; Already filled (1 byte-length block)
	        ld d, h
	        ld e, l
	        inc de
	        push hl
	        ldir
	        pop hl
	        ret
#line 3 "arrayalloc.asm"


	; ---------------------------------------------------------------------
	; __ALLOC_LOCAL_ARRAY
	;  Allocates an array element area in the heap, and clears it filling it
	;  with 0 bytes
	;
	; Parameters
	;  HL = Offset to be added to IX => HL = IX + HL
	;  BC = Length of the element area = n.elements * size(element)
	;  DE = PTR to the index table
	;
; Returns:
	;  HL = (IX + HL) + 4
	; ---------------------------------------------------------------------

__ALLOC_LOCAL_ARRAY:
	    push de
	    push ix
	    pop de
	    add hl, de  ; hl = ix + hl
	    pop de
	    ld (hl), e
	    inc hl
	    ld (hl), d
	    inc hl
	    push hl
	    call __MEM_CALLOC
	    pop de
	    ex de, hl
	    ld (hl), e
	    inc hl
	    ld (hl), d
	    ret


	; ---------------------------------------------------------------------
	; __ALLOC_INITIALIZED_LOCAL_ARRAY
	;  Allocates an array element area in the heap, and clears it filling it
	;  with 0 bytes
	;
	; Parameters
	;  HL = Offset to be added to IX => HL = IX + HL
	;  BC = Length of the element area = n.elements * size(element)
	;  DE = PTR to the index table
	;  [SP + 2] = PTR to the element area
	;
; Returns:
	;  HL = (IX + HL) + 4
	; ---------------------------------------------------------------------

__ALLOC_INITIALIZED_LOCAL_ARRAY:
	    push bc
	    call __ALLOC_LOCAL_ARRAY
	    pop bc
	    ;; Swaps [SP], [SP + 2]
	    exx
	    pop hl       ; HL <- RET address
	    ex (sp), hl  ; HL <- Data table, [SP] <- RET address
	    push hl      ; [SP] <- Data table
	    exx
	    ex (sp), hl  ; HL = Data table, (SP) = (IX + HL + 4) - start of array address lbound
	    ; HL = data table
	    ; BC = length
	    ; DE = new data area
	    ldir
	    pop hl  ; HL = addr of LBound area if used
	    ret


#line 137 "C:/zxbasic/library-asm/arrayalloc.asm"
#line 13726 "Program.zxbas"
#line 1 "asc.asm"

	; Returns the ascii code for the given str
#line 1 "free.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.



	; ---------------------------------------------------------------------
	; MEM_FREE
	;  Frees a block of memory
	;
; Parameters:
	;  HL = Pointer to the block to be freed. If HL is NULL (0) nothing
	;  is done
	; ---------------------------------------------------------------------

MEM_FREE:
__MEM_FREE: ; Frees the block pointed by HL
	            ; HL DE BC & AF modified
	        PROC

	        LOCAL __MEM_LOOP2
	        LOCAL __MEM_LINK_PREV
	        LOCAL __MEM_JOIN_TEST
	        LOCAL __MEM_BLOCK_JOIN

	        ld a, h
	        or l
	        ret z       ; Return if NULL pointer

	        dec hl
	        dec hl
	        ld b, h
	        ld c, l    ; BC = Block pointer

	        ld hl, ZXBASIC_MEM_HEAP  ; This label point to the heap start

__MEM_LOOP2:
	        inc hl
	        inc hl     ; Next block ptr

	        ld e, (hl)
	        inc hl
	        ld d, (hl) ; Block next ptr
	        ex de, hl  ; DE = &(block->next); HL = block->next

	        ld a, h    ; HL == NULL?
	        or l
	        jp z, __MEM_LINK_PREV; if so, link with previous

	        or a       ; Clear carry flag
	        sbc hl, bc ; Carry if BC > HL => This block if before
	        add hl, bc ; Restores HL, preserving Carry flag
	        jp c, __MEM_LOOP2 ; This block is before. Keep searching PASS the block

	;------ At this point current HL is PAST BC, so we must link (DE) with BC, and HL in BC->next

__MEM_LINK_PREV:    ; Link (DE) with BC, and BC->next with HL
	        ex de, hl
	        push hl
	        dec hl

	        ld (hl), c
	        inc hl
	        ld (hl), b ; (DE) <- BC

	        ld h, b    ; HL <- BC (Free block ptr)
	        ld l, c
	        inc hl     ; Skip block length (2 bytes)
	        inc hl
	        ld (hl), e ; Block->next = DE
	        inc hl
	        ld (hl), d
	        ; --- LINKED ; HL = &(BC->next) + 2

	        call __MEM_JOIN_TEST
	        pop hl

__MEM_JOIN_TEST:   ; Checks for fragmented contiguous blocks and joins them
	                   ; hl = Ptr to current block + 2
	        ld d, (hl)
	        dec hl
	        ld e, (hl)
	        dec hl
	        ld b, (hl) ; Loads block length into BC
	        dec hl
	        ld c, (hl) ;

	        push hl    ; Saves it for later
	        add hl, bc ; Adds its length. If HL == DE now, it must be joined
	        or a
	        sbc hl, de ; If Z, then HL == DE => We must join
	        pop hl
	        ret nz

__MEM_BLOCK_JOIN:  ; Joins current block (pointed by HL) with next one (pointed by DE). HL->length already in BC
	        push hl    ; Saves it for later
	        ex de, hl

	        ld e, (hl) ; DE -> block->next->length
	        inc hl
	        ld d, (hl)
	        inc hl

	        ex de, hl  ; DE = &(block->next)
	        add hl, bc ; HL = Total Length

	        ld b, h
	        ld c, l    ; BC = Total Length

	        ex de, hl
	        ld e, (hl)
	        inc hl
	        ld d, (hl) ; DE = block->next

	        pop hl     ; Recovers Pointer to block
	        ld (hl), c
	        inc hl
	        ld (hl), b ; Length Saved
	        inc hl
	        ld (hl), e
	        inc hl
	        ld (hl), d ; Next saved
	        ret

	        ENDP

#line 3 "asc.asm"

__ASC:
		PROC
		LOCAL __ASC_END

		ex af, af'	; Saves free_mem flag

		ld a, h
		or l
		ret z		; NULL? return

		ld c, (hl)
		inc hl
		ld b, (hl)

		ld a, b
		or c
		jr z, __ASC_END		; No length? return

		inc hl
		ld a, (hl)
	    dec hl

__ASC_END:
		dec hl
		ex af, af'
		or a
		call nz, __MEM_FREE	; Free memory if needed

		ex af, af'	; Recover result

		ret
		ENDP
#line 13727 "Program.zxbas"
#line 1 "band16.asm"

; vim:ts=4:et:
	; FASTCALL bitwise and16 version.
	; result in hl
; __FASTCALL__ version (operands: A, H)
	; Performs 16bit or 16bit and returns the boolean
; Input: HL, DE
; Output: HL <- HL AND DE

__BAND16:
		ld a, h
		and d
	    ld h, a

	    ld a, l
	    and e
	    ld l, a

	    ret

#line 13728 "Program.zxbas"
#line 1 "beeper.asm"

; vim:ts=4:et:sw=4:
	; This is a fast beep routine, but needs parameters
	; codified in a different way.
; See http://www.wearmouth.demon.co.uk/zx82.htm#L03F8

	; Needs pitch on top of the stack
	; HL = duration

__BEEPER:
	    ex de, hl
	    pop hl
	    ex (sp), hl ; CALLEE
	    push ix     ; BEEPER changes IX
	    call 03B5h
	    pop ix
	    ret


#line 13729 "Program.zxbas"
#line 1 "border.asm"

	; __FASTCALL__ Routine to change de border
	; Parameter (color) specified in A register

	BORDER EQU 229Bh

	; Nothing to do! (Directly from the ZX Spectrum ROM)

#line 13730 "Program.zxbas"
#line 1 "bright.asm"

	; Sets bright flag in ATTR_P permanently
; Parameter: Paper color in A register

#line 1 "const.asm"

	; Global constants

	P_FLAG	EQU 23697
	FLAGS2	EQU 23681
	ATTR_P	EQU 23693	; permanet ATTRIBUTES
	ATTR_T	EQU 23695	; temporary ATTRIBUTES
	CHARS	EQU 23606 ; Pointer to ROM/RAM Charset
	UDG	EQU 23675 ; Pointer to UDG Charset
	MEM0	EQU 5C92h ; Temporary memory buffer used by ROM chars

#line 5 "bright.asm"

BRIGHT:
		ld hl, ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

__SET_BRIGHT:
		; Another entry. This will set the bright flag at location pointer by DE
		cp 8
		jr z, IS_TR

		; # Convert to 0/1
		or a
		jr z, IS_ZERO
		ld a, 0x40

IS_ZERO:
		ld b, a	; Saves the color
		ld a, (hl)
		and 0BFh ; Clears previous value
		or b
		ld (hl), a
		inc hl
		res 6, (hl)  ;Reset bit 6 to disable transparency
		ret

IS_TR:  ; transparent
		inc hl ; Points DE to MASK_T or MASK_P
	    set 6, (hl)  ;Set bit 6 to enable transparency
		ret

	; Sets the BRIGHT flag passed in A register in the ATTR_T variable
BRIGHT_TMP:
		ld hl, ATTR_T
		jr __SET_BRIGHT
	    ENDP
#line 13731 "Program.zxbas"
#line 1 "chr.asm"

	; CHR$(x, y, x) returns the string CHR$(x) + CHR$(y) + CHR$(z)
	;



CHR:	; Returns HL = Pointer to STRING (NULL if no memory)
			; Requires alloc.asm for dynamic memory heap.
		; Parameters: HL = Number of bytes to insert (already push onto the stack)
			; STACK => parameters (16 bit, only the High byte is considered)
			; Used registers A, A', BC, DE, HL, H'L'

			PROC

			LOCAL __POPOUT
			LOCAL TMP

	TMP		EQU 23629 ; (DEST System variable)

			ld a, h
			or l
			ret z	; If Number of parameters is ZERO, return NULL STRING

			ld b, h
			ld c, l

			pop hl	; Return address
			ld (TMP), hl

			push bc
			inc bc
			inc bc	; BC = BC + 2 => (2 bytes for the length number)
			call __MEM_ALLOC
			pop bc

			ld d, h
			ld e, l			; Saves HL in DE

			ld a, h
			or l
			jr z, __POPOUT	; No Memory, return

			ld (hl), c
			inc hl
			ld (hl), b
			inc hl

__POPOUT:	; Removes out of the stack every byte and return
				; If Zero Flag is set, don't store bytes in memory
			ex af, af' ; Save Zero Flag

			ld a, b
			or c
			jr z, __CHR_END

			dec bc
			pop af 	   ; Next byte

			ex af, af' ; Recovers Zero flag
			jr z, __POPOUT

			ex af, af' ; Saves Zero flag
			ld (hl), a
			inc hl
	        ex af, af' ; Recovers Zero Flag

			jp __POPOUT

__CHR_END:
			ld hl, (TMP)
			push hl		; Restores return addr
			ex de, hl	; Recovers original HL ptr
			ret

			ENDP

#line 13732 "Program.zxbas"
#line 1 "cls.asm"

	; JUMPS directly to spectrum CLS
	; This routine does not clear lower screen

	;CLS	EQU	0DAFh

	; Our faster implementation

#line 1 "sposn.asm"

	; Printing positioning library.
			PROC
			LOCAL ECHO_E

__LOAD_S_POSN:		; Loads into DE current ROW, COL print position from S_POSN mem var.
			ld de, (S_POSN)
			ld hl, (MAXX)
			or a
			sbc hl, de
			ex de, hl
			ret


__SAVE_S_POSN:		; Saves ROW, COL from DE into S_POSN mem var.
			ld hl, (MAXX)
			or a
			sbc hl, de
			ld (S_POSN), hl ; saves it again
			ret


	ECHO_E	EQU 23682
	MAXX	EQU ECHO_E   ; Max X position + 1
	MAXY	EQU MAXX + 1 ; Max Y position + 1

	S_POSN	EQU 23688
	POSX	EQU S_POSN		; Current POS X
	POSY	EQU S_POSN + 1	; Current POS Y

			ENDP

#line 9 "cls.asm"

CLS:
		PROC

		LOCAL COORDS
		LOCAL __CLS_SCR
		LOCAL ATTR_P
		LOCAL SCREEN

		ld hl, 0
		ld (COORDS), hl
	    ld hl, 1821h
		ld (S_POSN), hl
__CLS_SCR:
		ld hl, SCREEN
		ld (hl), 0
		ld d, h
		ld e, l
		inc de
		ld bc, 6144
		ldir

		; Now clear attributes

		ld a, (ATTR_P)
		ld (hl), a
		ld bc, 767
		ldir
		ret

	COORDS	EQU	23677
	SCREEN	EQU 16384 ; Default start of the screen (can be changed)
	ATTR_P	EQU 23693
	;you can poke (SCREEN_SCRADDR) to change CLS, DRAW & PRINTing address

	SCREEN_ADDR EQU (__CLS_SCR + 1) ; Address used by print and other screen routines
								    ; to get the start of the screen
		ENDP

#line 13733 "Program.zxbas"
#line 1 "copy_attr.asm"


#line 1 "print.asm"

; vim:ts=4:sw=4:et:
; vim:ts=4:sw=4:et:
	; PRINT command routine
	; Does not print attribute. Use PRINT_STR or PRINT_NUM for that



#line 1 "in_screen.asm"




__IN_SCREEN:
		; Returns NO carry if current coords (D, E)
		; are OUT of the screen limits (MAXX, MAXY)

		PROC
		LOCAL __IN_SCREEN_ERR

		ld hl, MAXX
		ld a, e
		cp (hl)
		jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range

		ld a, d
		inc hl
		cp (hl)
		;; jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range
		;; ret
	    ret c                       ; Return if carry (OK)

__IN_SCREEN_ERR:
__OUT_OF_SCREEN_ERR:
		; Jumps here if out of screen
		ld a, ERROR_OutOfScreen
	    jp __STOP   ; Saves error code and exits

		ENDP
#line 9 "print.asm"
#line 1 "table_jump.asm"


JUMP_HL_PLUS_2A: ; Does JP (HL + A*2) Modifies DE. Modifies A
		add a, a

JUMP_HL_PLUS_A:	 ; Does JP (HL + A) Modifies DE
		ld e, a
		ld d, 0

JUMP_HL_PLUS_DE: ; Does JP (HL + DE)
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		ex de, hl
CALL_HL:
		jp (hl)

#line 10 "print.asm"
#line 1 "ink.asm"

	; Sets ink color in ATTR_P permanently
; Parameter: Paper color in A register



INK:
		PROC
		LOCAL __SET_INK
		LOCAL __SET_INK2

		ld de, ATTR_P

__SET_INK:
		cp 8
		jr nz, __SET_INK2

		inc de ; Points DE to MASK_T or MASK_P
		ld a, (de)
		or 7 ; Set bits 0,1,2 to enable transparency
		ld (de), a
		ret

__SET_INK2:
		; Another entry. This will set the ink color at location pointer by DE
		and 7	; # Gets color mod 8
		ld b, a	; Saves the color
		ld a, (de)
		and 0F8h ; Clears previous value
		or b
		ld (de), a
		inc de ; Points DE to MASK_T or MASK_P
		ld a, (de)
		and 0F8h ; Reset bits 0,1,2 sign to disable transparency
		ld (de), a ; Store new attr
		ret

	; Sets the INK color passed in A register in the ATTR_T variable
INK_TMP:
		ld de, ATTR_T
		jp __SET_INK

		ENDP

#line 11 "print.asm"
#line 1 "paper.asm"

	; Sets paper color in ATTR_P permanently
; Parameter: Paper color in A register



PAPER:
		PROC
		LOCAL __SET_PAPER
		LOCAL __SET_PAPER2

		ld de, ATTR_P

__SET_PAPER:
		cp 8
		jr nz, __SET_PAPER2
		inc de
		ld a, (de)
		or 038h
		ld (de), a
		ret

		; Another entry. This will set the paper color at location pointer by DE
__SET_PAPER2:
		and 7	; # Remove
		rlca
		rlca
		rlca		; a *= 8

		ld b, a	; Saves the color
		ld a, (de)
		and 0C7h ; Clears previous value
		or b
		ld (de), a
		inc de ; Points to MASK_T or MASK_P accordingly
		ld a, (de)
		and 0C7h  ; Resets bits 3,4,5
		ld (de), a
		ret


	; Sets the PAPER color passed in A register in the ATTR_T variable
PAPER_TMP:
		ld de, ATTR_T
		jp __SET_PAPER
		ENDP

#line 12 "print.asm"
#line 1 "flash.asm"

	; Sets flash flag in ATTR_P permanently
; Parameter: Paper color in A register



FLASH:
		ld hl, ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

__SET_FLASH:
		; Another entry. This will set the flash flag at location pointer by DE
		cp 8
		jr z, IS_TR

		; # Convert to 0/1
		or a
		jr z, IS_ZERO
		ld a, 0x80

IS_ZERO:
		ld b, a	; Saves the color
		ld a, (hl)
		and 07Fh ; Clears previous value
		or b
		ld (hl), a
		inc hl
		res 7, (hl)  ;Reset bit 7 to disable transparency
		ret

IS_TR:  ; transparent
		inc hl ; Points DE to MASK_T or MASK_P
		set 7, (hl)  ;Set bit 7 to enable transparency
		ret

	; Sets the FLASH flag passed in A register in the ATTR_T variable
FLASH_TMP:
		ld hl, ATTR_T
		jr __SET_FLASH
	    ENDP

#line 13 "print.asm"

#line 1 "over.asm"

	; Sets OVER flag in P_FLAG permanently
; Parameter: OVER flag in bit 0 of A register



OVER:
		PROC

		ld c, a ; saves it for later
		and 2
		ld hl, FLAGS2
		res 1, (HL)
		or (hl)
		ld (hl), a

		ld a, c	; Recovers previous value
		and 1	; # Convert to 0/1
		add a, a; # Shift left 1 bit for permanent

		ld hl, P_FLAG
		res 1, (hl)
		or (hl)
		ld (hl), a
		ret

	; Sets OVER flag in P_FLAG temporarily
OVER_TMP:
		ld c, a ; saves it for later
		and 2	; gets bit 1; clears carry
		rra
		ld hl, FLAGS2
		res 0, (hl)
		or (hl)
		ld (hl), a

		ld a, c	; Recovers previous value
		and 1
		ld hl, P_FLAG
		res 0, (hl)
	    or (hl)
		ld (hl), a
		jp __SET_ATTR_MODE

		ENDP

#line 15 "print.asm"
#line 1 "inverse.asm"

	; Sets INVERSE flag in P_FLAG permanently
; Parameter: INVERSE flag in bit 0 of A register



INVERSE:
		PROC

		and 1	; # Convert to 0/1
		add a, a; # Shift left 3 bits for permanent
		add a, a
		add a, a
		ld hl, P_FLAG
		res 3, (hl)
		or (hl)
		ld (hl), a
		ret

	; Sets INVERSE flag in P_FLAG temporarily
INVERSE_TMP:
		and 1
		add a, a
		add a, a; # Shift left 2 bits for temporary
		ld hl, P_FLAG
		res 2, (hl)
		or (hl)
		ld (hl), a
		jp __SET_ATTR_MODE

		ENDP

#line 16 "print.asm"
#line 1 "bold.asm"

	; Sets BOLD flag in P_FLAG permanently
; Parameter: BOLD flag in bit 0 of A register


BOLD:
		PROC

		and 1
		rlca
	    rlca
	    rlca
		ld hl, FLAGS2
		res 3, (HL)
		or (hl)
		ld (hl), a
		ret

	; Sets BOLD flag in P_FLAG temporarily
BOLD_TMP:
		and 1
		rlca
		rlca
		ld hl, FLAGS2
		res 2, (hl)
		or (hl)
		ld (hl), a
		ret

		ENDP

#line 17 "print.asm"
#line 1 "italic.asm"

	; Sets ITALIC flag in P_FLAG permanently
; Parameter: ITALIC flag in bit 0 of A register


ITALIC:
		PROC

		and 1
	    rrca
	    rrca
	    rrca
		ld hl, FLAGS2
		res 5, (HL)
		or (hl)
		ld (hl), a
		ret

	; Sets ITALIC flag in P_FLAG temporarily
ITALIC_TMP:
		and 1
		rrca
		rrca
		rrca
		rrca
		ld hl, FLAGS2
		res 4, (hl)
		or (hl)
		ld (hl), a
		ret

		ENDP

#line 18 "print.asm"

#line 1 "attr.asm"

	; Attribute routines
; vim:ts=4:et:sw:







__ATTR_ADDR:
	    ; calc start address in DE (as (32 * d) + e)
    ; Contributed by Santiago Romero at http://www.speccy.org
	    ld h, 0                     ;  7 T-States
	    ld a, d                     ;  4 T-States
	    add a, a     ; a * 2        ;  4 T-States
	    add a, a     ; a * 4        ;  4 T-States
	    ld l, a      ; HL = A * 4   ;  4 T-States

	    add hl, hl   ; HL = A * 8   ; 15 T-States
	    add hl, hl   ; HL = A * 16  ; 15 T-States
	    add hl, hl   ; HL = A * 32  ; 15 T-States

    ld d, 18h ; DE = 6144 + E. Note: 6144 is the screen size (before attr zone)
	    add hl, de

	    ld de, (SCREEN_ADDR)    ; Adds the screen address
	    add hl, de

	    ; Return current screen address in HL
	    ret


	; Sets the attribute at a given screen coordinate (D, E).
	; The attribute is taken from the ATTR_T memory variable
	; Used by PRINT routines
SET_ATTR:

	    ; Checks for valid coords
	    call __IN_SCREEN
	    ret nc

__SET_ATTR:
	    ; Internal __FASTCALL__ Entry used by printing routines
	    PROC

	    call __ATTR_ADDR

__SET_ATTR2:  ; Sets attr from ATTR_T to (HL) which points to the scr address
	    ld de, (ATTR_T)    ; E = ATTR_T, D = MASK_T

	    ld a, d
	    and (hl)
	    ld c, a    ; C = current screen color, masked

	    ld a, d
	    cpl        ; Negate mask
	    and e    ; Mask current attributes
	    or c    ; Mix them
	    ld (hl), a ; Store result in screen

	    ret

	    ENDP


	; Sets the attribute at a given screen pixel address in hl
	; HL contains the address in RAM for a given pixel (not a coordinate)
SET_PIXEL_ADDR_ATTR:
	    ;; gets ATTR position with offset given in SCREEN_ADDR
	    ld a, h
	    rrca
	    rrca
	    rrca
	    and 3
	    or 18h
	    ld h, a
	    ld de, (SCREEN_ADDR)
	    add hl, de  ;; Final screen addr
	    jp __SET_ATTR2
#line 20 "print.asm"

	; Putting a comment starting with @INIT <address>
	; will make the compiler to add a CALL to <address>
	; It is useful for initialization routines.


__PRINT_INIT: ; To be called before program starts (initializes library)
	        PROC

	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl

	        ld hl, 1821h
	        ld (MAXX), hl  ; Sets current maxX and maxY

	        xor a
	        ld (FLAGS2), a

	        ret


__PRINTCHAR: ; Print character store in accumulator (A register)
	             ; Modifies H'L', B'C', A'F', D'E', A

	        LOCAL PO_GR_1

	        LOCAL __PRCHAR
	        LOCAL __PRINT_CONT
	        LOCAL __PRINT_CONT2
	        LOCAL __PRINT_JUMP
	        LOCAL __SRCADDR
	        LOCAL __PRINT_UDG
	        LOCAL __PRGRAPH
	        LOCAL __PRINT_START
	        LOCAL __ROM_SCROLL_SCR
	        LOCAL __TVFLAGS

	        __ROM_SCROLL_SCR EQU 0DFEh
	        __TVFLAGS EQU 5C3Ch

	PRINT_JUMP_STATE EQU __PRINT_JUMP + 1

__PRINT_JUMP:
	        jp __PRINT_START    ; Where to jump. If we print 22 (AT), next two calls jumps to AT1 and AT2 respectively


	        LOCAL __SCROLL
__SCROLL:  ; Scroll?
	        ld hl, __TVFLAGS
	        bit 1, (hl)
	        ret z
	        call __ROM_SCROLL_SCR
	        ld hl, __TVFLAGS
	        res 1, (hl)
	        ret
#line 76 "C:/zxbasic/library-asm/print.asm"

__PRINT_START:
	        cp ' '
	        jp c, __PRINT_SPECIAL    ; Characters below ' ' are special ones

	        exx               ; Switch to alternative registers
	        ex af, af'        ; Saves a value (char to print) for later


	        call __SCROLL
#line 87 "C:/zxbasic/library-asm/print.asm"
	        call __LOAD_S_POSN

	; At this point we have the new coord
	        ld hl, (SCREEN_ADDR)

	        ld a, d
	        ld c, a     ; Saves it for later

	        and 0F8h    ; Masks 3 lower bit ; zy
	        ld d, a

	        ld a, c     ; Recovers it
	        and 07h     ; MOD 7 ; y1
	        rrca
	        rrca
	        rrca

	        or e
	        ld e, a
	        add hl, de    ; HL = Screen address + DE
	        ex de, hl     ; DE = Screen address

	        ex af, af'

	        cp 80h    ; Is it an UDG or a ?
	        jp c, __SRCADDR

	        cp 90h
	        jp nc, __PRINT_UDG

	        ; Print a 8 bit pattern (80h to 8Fh)

	        ld b, a
	        call PO_GR_1 ; This ROM routine will generate the bit pattern at MEM0
	        ld hl, MEM0
	        jp __PRGRAPH

	PO_GR_1 EQU 0B38h

__PRINT_UDG:
	        sub 90h ; Sub ASC code
	        ld bc, (UDG)
	        jp __PRGRAPH0

	__SOURCEADDR EQU (__SRCADDR + 1)    ; Address of the pointer to chars source
__SRCADDR:
	        ld bc, (CHARS)

__PRGRAPH0:
        add a, a   ; A = a * 2 (since a < 80h) ; Thanks to Metalbrain at http://foro.speccy.org
	        ld l, a
	        ld h, 0    ; HL = a * 2 (accumulator)
	        add hl, hl
	        add hl, hl ; HL = a * 8
	        add hl, bc ; HL = CHARS address

__PRGRAPH:
	        ex de, hl  ; HL = Write Address, DE = CHARS address
	        bit 2, (iy + $47)
	        call nz, __BOLD
	        bit 4, (iy + $47)
	        call nz, __ITALIC
	        ld b, 8 ; 8 bytes per char
__PRCHAR:
	        ld a, (de) ; DE *must* be ALWAYS source, and HL destiny

PRINT_MODE:     ; Which operation is used to write on the screen
                ; Set it with:
	                ; LD A, <OPERATION>
	                ; LD (PRINT_MODE), A
	                ;
                ; Available opertions:
                ; NORMAL : 0h  --> NOP         ; OVER 0
                ; XOR    : AEh --> XOR (HL)    ; OVER 1
                ; OR     : B6h --> OR (HL)     ; PUTSPRITE
                ; AND    : A6h --> AND (HL)    ; PUTMASK
	        nop     ;

INVERSE_MODE:   ; 00 -> NOP -> INVERSE 0
	        nop     ; 2F -> CPL -> INVERSE 1

	        ld (hl), a

	        inc de
	        inc h     ; Next line
	        djnz __PRCHAR

	        call __LOAD_S_POSN
	        push de
	        call __SET_ATTR
	        pop de
	        inc e            ; COL = COL + 1
	        ld hl, (MAXX)
	        ld a, e
	        dec l            ; l = MAXX
	        cp l            ; Lower than max?
	        jp c, __PRINT_CONT; Nothing to do
	        call __PRINT_EOL1
	        exx            ; counteracts __PRINT_EOL1 exx
	        jp __PRINT_CONT2

__PRINT_CONT:
	        call __SAVE_S_POSN

__PRINT_CONT2:
	        exx
	        ret

	; ------------- SPECIAL CHARS (< 32) -----------------

__PRINT_SPECIAL:    ; Jumps here if it is a special char
	        exx
	        ld hl, __PRINT_TABLE
	        jp JUMP_HL_PLUS_2A


PRINT_EOL:        ; Called WHENEVER there is no ";" at end of PRINT sentence
	        exx

__PRINT_0Dh:        ; Called WHEN printing CHR$(13)

	        call __SCROLL
#line 210 "C:/zxbasic/library-asm/print.asm"
	        call __LOAD_S_POSN

__PRINT_EOL1:        ; Another entry called from PRINT when next line required
	        ld e, 0

__PRINT_EOL2:
	        ld a, d
	        inc a

__PRINT_AT1_END:
	        ld hl, (MAXY)
	        cp l
	        jr c, __PRINT_EOL_END    ; Carry if (MAXY) < d

	        ld hl, __TVFLAGS
	        set 1, (hl)
	        ld a, d
#line 230 "C:/zxbasic/library-asm/print.asm"

__PRINT_EOL_END:
	        ld d, a

__PRINT_AT2_END:
	        call __SAVE_S_POSN
	        exx
	        ret

__PRINT_COM:
	        exx
	        push hl
	        push de
	        push bc
	        call PRINT_COMMA
	        pop bc
	        pop de
	        pop hl
	        ret

__PRINT_TAB:
	        ld hl, __PRINT_TAB1
	        jp __PRINT_SET_STATE

__PRINT_TAB1:
	        ld (MEM0), a
	        ld hl, __PRINT_TAB2
	        ld (PRINT_JUMP_STATE), hl
	        ret

__PRINT_TAB2:
	        ld a, (MEM0)        ; Load tab code (ignore the current one)
	        push hl
	        push de
	        push bc
	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl
	        call PRINT_TAB
	        pop bc
	        pop de
	        pop hl
	        ret

__PRINT_NOP:
__PRINT_RESTART:
	        ld hl, __PRINT_START
	        jp __PRINT_SET_STATE

__PRINT_AT:
	        ld hl, __PRINT_AT1

__PRINT_SET_STATE:
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        exx
	        ret

__PRINT_AT1:    ; Jumps here if waiting for 1st parameter
	        exx
	        ld hl, __PRINT_AT2
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        call __LOAD_S_POSN
	        jp __PRINT_AT1_END

__PRINT_AT2:
	        exx
	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        call __LOAD_S_POSN
	        ld e, a
	        ld hl, (MAXX)
	        cp (hl)
	        jr c, __PRINT_AT2_END
	        jr __PRINT_EOL1

__PRINT_DEL:
	        call __LOAD_S_POSN        ; Gets current screen position
	        dec e
	        ld a, -1
	        cp e
	        jp nz, __PRINT_AT2_END
	        ld hl, (MAXX)
	        ld e, l
	        dec e
	        dec e
	        dec d
	        cp d
	        jp nz, __PRINT_AT2_END
	        ld d, h
	        dec d
	        jp __PRINT_AT2_END

__PRINT_INK:
	        ld hl, __PRINT_INK2
	        jp __PRINT_SET_STATE

__PRINT_INK2:
	        exx
	        call INK_TMP
	        jp __PRINT_RESTART

__PRINT_PAP:
	        ld hl, __PRINT_PAP2
	        jp __PRINT_SET_STATE

__PRINT_PAP2:
	        exx
	        call PAPER_TMP
	        jp __PRINT_RESTART

__PRINT_FLA:
	        ld hl, __PRINT_FLA2
	        jp __PRINT_SET_STATE

__PRINT_FLA2:
	        exx
	        call FLASH_TMP
	        jp __PRINT_RESTART

__PRINT_BRI:
	        ld hl, __PRINT_BRI2
	        jp __PRINT_SET_STATE

__PRINT_BRI2:
	        exx
	        call BRIGHT_TMP
	        jp __PRINT_RESTART

__PRINT_INV:
	        ld hl, __PRINT_INV2
	        jp __PRINT_SET_STATE

__PRINT_INV2:
	        exx
	        call INVERSE_TMP
	        jp __PRINT_RESTART

__PRINT_OVR:
	        ld hl, __PRINT_OVR2
	        jp __PRINT_SET_STATE

__PRINT_OVR2:
	        exx
	        call OVER_TMP
	        jp __PRINT_RESTART

__PRINT_BOLD:
	        ld hl, __PRINT_BOLD2
	        jp __PRINT_SET_STATE

__PRINT_BOLD2:
	        exx
	        call BOLD_TMP
	        jp __PRINT_RESTART

__PRINT_ITA:
	        ld hl, __PRINT_ITA2
	        jp __PRINT_SET_STATE

__PRINT_ITA2:
	        exx
	        call ITALIC_TMP
	        jp __PRINT_RESTART


__BOLD:
	        push hl
	        ld hl, MEM0
	        ld b, 8
__BOLD_LOOP:
	        ld a, (de)
	        ld c, a
	        rlca
	        or c
	        ld (hl), a
	        inc hl
	        inc de
	        djnz __BOLD_LOOP
	        pop hl
	        ld de, MEM0
	        ret


__ITALIC:
	        push hl
	        ld hl, MEM0
	        ex de, hl
	        ld bc, 8
	        ldir
	        ld hl, MEM0
	        srl (hl)
	        inc hl
	        srl (hl)
	        inc hl
	        srl (hl)
	        inc hl
	        inc hl
	        inc hl
	        sla (hl)
	        inc hl
	        sla (hl)
	        inc hl
	        sla (hl)
	        pop hl
	        ld de, MEM0
	        ret

PRINT_COMMA:
	        call __LOAD_S_POSN
	        ld a, e
	        and 16
	        add a, 16

PRINT_TAB:
	        PROC
	        LOCAL LOOP, CONTINUE

	        inc a
	        call __LOAD_S_POSN ; e = current row
	        ld d, a
	        ld a, e
	        cp 21h
	        jr nz, CONTINUE
	        ld e, -1
CONTINUE:
	        ld a, d
	        inc e
	        sub e  ; A = A - E
	        and 31 ;
	        ret z  ; Already at position E
	        ld b, a
LOOP:
	        ld a, ' '
	        call __PRINTCHAR
	        djnz LOOP
	        ret
	        ENDP

PRINT_AT: ; Changes cursor to ROW, COL
	         ; COL in A register
	         ; ROW in stack

	        pop hl    ; Ret address
	        ex (sp), hl ; callee H = ROW
	        ld l, a
	        ex de, hl

	        call __IN_SCREEN
	        ret nc    ; Return if out of screen

	        ld hl, __TVFLAGS
	        res 1, (hl)
#line 482 "C:/zxbasic/library-asm/print.asm"
	        jp __SAVE_S_POSN

	        LOCAL __PRINT_COM
	        LOCAL __BOLD
	        LOCAL __BOLD_LOOP
	        LOCAL __ITALIC
	        LOCAL __PRINT_EOL1
	        LOCAL __PRINT_EOL2
	        LOCAL __PRINT_AT1
	        LOCAL __PRINT_AT2
	        LOCAL __PRINT_AT2_END
	        LOCAL __PRINT_BOLD
	        LOCAL __PRINT_BOLD2
	        LOCAL __PRINT_ITA
	        LOCAL __PRINT_ITA2
	        LOCAL __PRINT_INK
	        LOCAL __PRINT_PAP
	        LOCAL __PRINT_SET_STATE
	        LOCAL __PRINT_TABLE
	        LOCAL __PRINT_TAB, __PRINT_TAB1, __PRINT_TAB2

__PRINT_TABLE:    ; Jump table for 0 .. 22 codes

	        DW __PRINT_NOP    ;  0
	        DW __PRINT_NOP    ;  1
	        DW __PRINT_NOP    ;  2
	        DW __PRINT_NOP    ;  3
	        DW __PRINT_NOP    ;  4
	        DW __PRINT_NOP    ;  5
	        DW __PRINT_COM    ;  6 COMMA
	        DW __PRINT_NOP    ;  7
	        DW __PRINT_DEL    ;  8 DEL
	        DW __PRINT_NOP    ;  9
	        DW __PRINT_NOP    ; 10
	        DW __PRINT_NOP    ; 11
	        DW __PRINT_NOP    ; 12
	        DW __PRINT_0Dh    ; 13
	        DW __PRINT_BOLD   ; 14
	        DW __PRINT_ITA    ; 15
	        DW __PRINT_INK    ; 16
	        DW __PRINT_PAP    ; 17
	        DW __PRINT_FLA    ; 18
	        DW __PRINT_BRI    ; 19
	        DW __PRINT_INV    ; 20
	        DW __PRINT_OVR    ; 21
	        DW __PRINT_AT     ; 22 AT
	        DW __PRINT_TAB    ; 23 TAB

	        ENDP


#line 3 "copy_attr.asm"
#line 4 "C:/zxbasic/library-asm/copy_attr.asm"



COPY_ATTR:
		; Just copies current permanent attribs to temporal attribs
		; and sets print mode
		PROC

		LOCAL INVERSE1
		LOCAL __REFRESH_TMP

	INVERSE1 EQU 02Fh

		ld hl, (ATTR_P)
		ld (ATTR_T), hl

		ld hl, FLAGS2
		call __REFRESH_TMP

		ld hl, P_FLAG
		call __REFRESH_TMP


__SET_ATTR_MODE:		; Another entry to set print modes. A contains (P_FLAG)


		LOCAL TABLE
		LOCAL CONT2

		rra					; Over bit to carry
		ld a, (FLAGS2)
		rla					; Over bit in bit 1, Over2 bit in bit 2
		and 3				; Only bit 0 and 1 (OVER flag)

		ld c, a
		ld b, 0

		ld hl, TABLE
		add hl, bc
		ld a, (hl)
		ld (PRINT_MODE), a

		ld hl, (P_FLAG)
		xor a			; NOP -> INVERSE0
		bit 2, l
		jr z, CONT2
		ld a, INVERSE1 	; CPL -> INVERSE1

CONT2:
		ld (INVERSE_MODE), a
		ret

TABLE:
		nop				; NORMAL MODE
		xor (hl)		; OVER 1 MODE
		and (hl)		; OVER 2 MODE
		or  (hl)		; OVER 3 MODE

#line 65 "C:/zxbasic/library-asm/copy_attr.asm"

__REFRESH_TMP:
		ld a, (hl)
		and 10101010b
		ld c, a
		rra
		or c
		ld (hl), a
		ret

		ENDP

#line 13734 "Program.zxbas"
#line 1 "div32.asm"

#line 1 "neg32.asm"

__ABS32:
		bit 7, d
		ret z

__NEG32: ; Negates DEHL (Two's complement)
		ld a, l
		cpl
		ld l, a

		ld a, h
		cpl
		ld h, a

		ld a, e
		cpl
		ld e, a

		ld a, d
		cpl
		ld d, a

		inc l
		ret nz

		inc h
		ret nz

		inc de
		ret

#line 2 "div32.asm"

				 ; ---------------------------------------------------------
__DIVU32:    ; 32 bit unsigned division
	             ; DEHL = Dividend, Stack Top = Divisor
	             ; OPERANDS P = Dividend, Q = Divisor => OPERATION => P / Q
				 ;
				 ; Changes A, BC DE HL B'C' D'E' H'L'
				 ; ---------------------------------------------------------
	        exx
	        pop hl   ; return address
	        pop de   ; low part
	        ex (sp), hl ; CALLEE Convention ; H'L'D'E' => Dividend

__DIVU32START: ; Performs D'E'H'L' / HLDE
	        ; Now switch to DIVIDEND = B'C'BC / DIVISOR = D'E'DE (A / B)
	        push de ; push Lowpart(Q)
			ex de, hl	; DE = HL
	        ld hl, 0
	        exx
	        ld b, h
	        ld c, l
	        pop hl
	        push de
	        ex de, hl
	        ld hl, 0        ; H'L'HL = 0
	        exx
	        pop bc          ; Pop HightPart(B) => B = B'C'BC
	        exx

	        ld a, 32 ; Loop count

__DIV32LOOP:
	        sll c  ; B'C'BC << 1 ; Output most left bit to carry
	        rl  b
	        exx
	        rl c
	        rl b
	        exx

	        adc hl, hl
	        exx
	        adc hl, hl
	        exx

	        sbc hl,de
	        exx
	        sbc hl,de
	        exx
	        jp nc, __DIV32NOADD	; use JP inside a loop for being faster

	        add hl, de
	        exx
	        adc hl, de
	        exx
	        dec bc

__DIV32NOADD:
	        dec a
	        jp nz, __DIV32LOOP	; use JP inside a loop for being faster
	        ; At this point, quotient is stored in B'C'BC and the reminder in H'L'HL

	        push hl
	        exx
	        pop de
	        ex de, hl ; D'E'H'L' = 32 bits modulus
	        push bc
	        exx
	        pop de    ; DE = B'C'
	        ld h, b
	        ld l, c   ; DEHL = quotient D'E'H'L' = Modulus

	        ret     ; DEHL = quotient, D'E'H'L' = Modulus



__MODU32:    ; 32 bit modulus for 32bit unsigned division
	             ; DEHL = Dividend, Stack Top = Divisor (DE, HL)

	        exx
	        pop hl   ; return address
	        pop de   ; low part
	        ex (sp), hl ; CALLEE Convention ; H'L'D'E' => Dividend

	        call __DIVU32START	; At return, modulus is at D'E'H'L'

__MODU32START:

			exx
			push de
			push hl

			exx
			pop hl
			pop de

			ret


__DIVI32:    ; 32 bit signed division
	             ; DEHL = Dividend, Stack Top = Divisor
	             ; A = Dividend, B = Divisor => A / B
	        exx
	        pop hl   ; return address
	        pop de   ; low part
	        ex (sp), hl ; CALLEE Convention ; H'L'D'E' => Dividend

__DIVI32START:
			exx
			ld a, d	 ; Save sign
			ex af, af'
			bit 7, d ; Negative?
			call nz, __NEG32 ; Negates DEHL

			exx		; Now works with H'L'D'E'
			ex af, af'
			xor h
			ex af, af'  ; Stores sign of the result for later

			bit 7, h ; Negative?
			ex de, hl ; HLDE = DEHL
			call nz, __NEG32
			ex de, hl

			call __DIVU32START
			ex af, af' ; Recovers sign
			and 128	   ; positive?
			ret z

			jp __NEG32 ; Negates DEHL and returns from there


__MODI32:	; 32bits signed division modulus
			exx
	        pop hl   ; return address
	        pop de   ; low part
	        ex (sp), hl ; CALLEE Convention ; H'L'D'E' => Dividend

			call __DIVI32START
			jp __MODU32START

#line 13735 "Program.zxbas"
#line 1 "div8.asm"

				; --------------------------------
__DIVU8:	; 8 bit unsigned integer division
				; Divides (Top of stack, High Byte) / A
		pop hl	; --------------------------------
		ex (sp), hl	; CALLEE

__DIVU8_FAST:	; Does A / H
		ld l, h
		ld h, a		; At this point do H / L

		ld b, 8
		xor a		; A = 0, Carry Flag = 0

__DIV8LOOP:
		sla	h
		rla
		cp	l
		jr	c, __DIV8NOSUB
		sub	l
		inc	h

__DIV8NOSUB:
		djnz __DIV8LOOP

		ld	l, a		; save remainder
		ld	a, h		;

		ret			; a = Quotient,


					; --------------------------------
__DIVI8:		; 8 bit signed integer division Divides (Top of stack) / A
		pop hl		; --------------------------------
		ex (sp), hl

__DIVI8_FAST:
		ld e, a		; store operands for later
		ld c, h

		or a		; negative?
		jp p, __DIV8A
		neg			; Make it positive

__DIV8A:
		ex af, af'
		ld a, h
		or a
		jp p, __DIV8B
		neg
		ld h, a		; make it positive

__DIV8B:
		ex af, af'

		call __DIVU8_FAST

		ld a, c
		xor l		; bit 7 of A = 1 if result is negative

		ld a, h		; Quotient
		ret p		; return if positive

		neg
		ret


__MODU8:		; 8 bit module. REturns A mod (Top of stack) (unsigned operands)
		pop hl
		ex (sp), hl	; CALLEE

__MODU8_FAST:	; __FASTCALL__ entry
		call __DIVU8_FAST
		ld a, l		; Remainder

		ret		; a = Modulus


__MODI8:		; 8 bit module. REturns A mod (Top of stack) (For singed operands)
		pop hl
		ex (sp), hl	; CALLEE

__MODI8_FAST:	; __FASTCALL__ entry
		call __DIVI8_FAST
		ld a, l		; remainder

		ret		; a = Modulus

#line 13736 "Program.zxbas"
#line 1 "divf.asm"




	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)

	; All of them uses C EDHL registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order BC DE HL (B not used).
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__DIVF:	; Division
		PROC
		LOCAL __DIVBYZERO
		LOCAL TMP, ERR_SP

	TMP         EQU 23629 ;(DEST)
	ERR_SP      EQU 23613

		call __FPSTACK_PUSH2

		ld hl, (ERR_SP)
		ld (TMP), hl
		ld hl, __DIVBYZERO
		push hl
		ld hl, 0
		add hl, sp
		ld (ERR_SP), hl

		; ------------- ROM DIV
		rst 28h
		defb 01h	; EXCHANGE
		defb 05h	; DIV
		defb 38h;   ; END CALC

		pop hl
		ld hl, (TMP)
		ld (ERR_SP), hl

		jp __FPSTACK_POP

__DIVBYZERO:
		ld hl, (TMP)
		ld (ERR_SP), hl

		ld a, ERROR_NumberTooBig
		ld (ERR_NR), a

		; Returns 0 on DIV BY ZERO error
		xor a
		ld b, a
		ld c, a
		ld d, a
		ld e, a
		ret

		ENDP

#line 13737 "Program.zxbas"
#line 1 "eq16.asm"

__EQ16:	; Test if 16bit values HL == DE
		; Returns result in A: 0 = False, FF = True
			xor a	; Reset carry flag
			sbc hl, de
			ret nz
			inc a
			ret

#line 13738 "Program.zxbas"

#line 1 "ftou32reg.asm"



__FTOU32REG:	; Converts a Float to (un)signed 32 bit integer (NOTE: It's ALWAYS 32 bit signed)
					; Input FP number in A EDCB (A exponent, EDCB mantissa)
				; Output: DEHL 32 bit number (signed)
		PROC

		LOCAL __IS_FLOAT
		LOCAL __NEGATE

		or a
		jr nz, __IS_FLOAT
		; Here if it is a ZX ROM Integer

		ld h, c
		ld l, d
	ld a, e	 ; Takes sign: FF = -, 0 = +
		ld de, 0
		inc a
		jp z, __NEG32	; Negates if negative
		ret

__IS_FLOAT:  ; Jumps here if it is a true floating point number
		ld h, e
		push hl  ; Stores it for later (Contains Sign in H)

		push de
		push bc

		exx
		pop de   ; Loads mantissa into C'B' E'D'
		pop bc	 ;

		set 7, c ; Highest mantissa bit is always 1
		exx

		ld hl, 0 ; DEHL = 0
		ld d, h
		ld e, l

		;ld a, c  ; Get exponent
		sub 128  ; Exponent -= 128
		jr z, __FTOU32REG_END	; If it was <= 128, we are done (Integers must be > 128)
		jr c, __FTOU32REG_END	; It was decimal (0.xxx). We are done (return 0)

		ld b, a  ; Loop counter = exponent - 128

__FTOU32REG_LOOP:
		exx 	 ; Shift C'B' E'D' << 1, output bit stays in Carry
		sla d
		rl e
		rl b
		rl c

	    exx		 ; Shift DEHL << 1, inserting the carry on the right
		rl l
		rl h
		rl e
		rl d

		djnz __FTOU32REG_LOOP

__FTOU32REG_END:
		pop af   ; Take the sign bit
		or a	 ; Sets SGN bit to 1 if negative
		jp m, __NEGATE ; Negates DEHL

		ret

__NEGATE:
	    exx
	    ld a, d
	    or e
	    or b
	    or c
	    exx
	    jr z, __END
	    inc l
	    jr nz, __END
	    inc h
	    jr nz, __END
	    inc de
	LOCAL __END
__END:
	    jp __NEG32
		ENDP


__FTOU8:	; Converts float in C ED LH to Unsigned byte in A
		call __FTOU32REG
		ld a, l
		ret

#line 13740 "Program.zxbas"
#line 1 "gtf.asm"

#line 1 "u32tofreg.asm"


__I8TOFREG:
		ld l, a
		rlca
		sbc a, a	; A = SGN(A)
		ld h, a
		ld e, a
		ld d, a

__I32TOFREG:	; Converts a 32bit signed integer (stored in DEHL)
					; to a Floating Point Number returned in (A ED CB)

		ld a, d
		or a		; Test sign

		jp p, __U32TOFREG	; It was positive, proceed as 32bit unsigned

		call __NEG32		; Convert it to positive
		call __U32TOFREG	; Convert it to Floating point

		set 7, e			; Put the sign bit (negative) in the 31bit of mantissa
		ret

__U8TOFREG:
					; Converts an unsigned 8 bit (A) to Floating point
		ld l, a
		ld h, 0
		ld e, h
		ld d, h

__U32TOFREG:	; Converts an unsigned 32 bit integer (DEHL)
					; to a Floating point number returned in A ED CB

	    PROC

	    LOCAL __U32TOFREG_END

		ld a, d
		or e
		or h
		or l
	    ld b, d
		ld c, e		; Returns 00 0000 0000 if ZERO
		ret z

		push de
		push hl

		exx
		pop de  ; Loads integer into B'C' D'E'
		pop bc
		exx

		ld l, 128	; Exponent
		ld bc, 0	; DEBC = 0
		ld d, b
		ld e, c

__U32TOFREG_LOOP: ; Also an entry point for __F16TOFREG
		exx
		ld a, d 	; B'C'D'E' == 0 ?
		or e
		or b
		or c
		jp z, __U32TOFREG_END	; We are done

		srl b ; Shift B'C' D'E' >> 1, output bit stays in Carry
		rr c
		rr d
		rr e
		exx

		rr e ; Shift EDCB >> 1, inserting the carry on the left
		rr d
		rr c
		rr b

		inc l	; Increment exponent
		jp __U32TOFREG_LOOP


__U32TOFREG_END:
		exx
	    ld a, l     ; Puts the exponent in a
		res 7, e	; Sets the sign bit to 0 (positive)

		ret
	    ENDP

#line 2 "gtf.asm"



	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)

	; All of them uses A EDCB registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order A DE BC.
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__GTF:	; A > B
		call __FPSTACK_PUSH2 ; ENTERS B, A

		; ------------- ROM NOS-GRTR
		ld b, 0Dh	; B < A
		rst 28h
		defb 0Dh	; B < A
		defb 38h;   ; END CALC

		call __FPSTACK_POP
		jp __FTOU8; Convert to 8 bits

#line 13741 "Program.zxbas"

#line 1 "inkey.asm"

	; INKEY Function
	; Returns a string allocated in dynamic memory
	; containing the string.
	; An empty string otherwise.



INKEY:
		PROC
		LOCAL __EMPTY_INKEY
		LOCAL KEY_SCAN
		LOCAL KEY_TEST
		LOCAL KEY_CODE

		ld bc, 3	; 1 char length string
		call __MEM_ALLOC

		ld a, h
		or l
		ret z	; Return if NULL (No memory)

		push hl ; Saves memory pointer

		call KEY_SCAN
		jp nz, __EMPTY_INKEY

		call KEY_TEST
		jp nc, __EMPTY_INKEY

		dec d	; D is expected to be FLAGS so set bit 3 $FF
				; 'L' Mode so no keywords.
		ld e, a	; main key to A
				; C is MODE 0 'KLC' from above still.
		call KEY_CODE ; routine K-DECODE
		pop hl

		ld (hl), 1
		inc hl
		ld (hl), 0
		inc hl
		ld (hl), a
		dec hl
		dec hl	; HL Points to string result
		ret

__EMPTY_INKEY:
		pop hl
		xor a
		ld (hl), a
		inc hl
		ld (hl), a
		dec hl
		ret

	KEY_SCAN	EQU 028Eh
	KEY_TEST	EQU 031Eh
	KEY_CODE	EQU 0333h

		ENDP

#line 13743 "Program.zxbas"
#line 1 "lei32.asm"


#line 1 "sub32.asm"

	; SUB32
	; Perform TOP of the stack - DEHL
	; Pops operand out of the stack (CALLEE)
	; and returns result in DEHL. Carry an Z are set correctly

__SUB32:
		exx
		pop bc		; saves return address in BC'
		exx

		or a        ; clears carry flag
		ld b, h     ; Operands come reversed => BC <- HL,  HL = HL - BC
		ld c, l
		pop hl
		sbc hl, bc
		ex de, hl

		ld b, h	    ; High part (DE) now in HL. Repeat operation
		ld c, l
		pop hl
		sbc hl, bc
		ex de, hl   ; DEHL now has de 32 bit result

		exx
		push bc		; puts return address back
		exx
		ret
#line 3 "lei32.asm"

__LEI32: ; Test 32 bit values Top of the stack <= HL,DE
	    PROC
	    LOCAL checkParity
	    exx
	    pop de ; Preserves return address
	    exx

	    call __SUB32

	    exx
	    push de ; Puts return address back
	    exx

	    ex af, af'
	    ld a, h
	    or l
	    or e
	    or d
	    ld a, 1
	    ret z

	    ex af, af'
	    jp po, checkParity
	    ld a, d
	    xor 0x80
checkParity:
	    ld a, 0     ; False
	    ret p
	    inc a       ; True
	    ret
	    ENDP
#line 13744 "Program.zxbas"
#line 1 "lei8.asm"

__LEI8: ; Signed <= comparison for 8bit int
	        ; A <= H (registers)
	    PROC
	    LOCAL checkParity
	    sub h
	    jr nz, __LTI
	    inc a
	    ret

__LTI8:  ; Test 8 bit values A < H
	    sub h

__LTI:   ; Generic signed comparison
	    jp po, checkParity
	    xor 0x80
checkParity:
	    ld a, 0     ; False
	    ret p
	    inc a       ; True
	    ret
	    ENDP
#line 13745 "Program.zxbas"
#line 1 "loadstr.asm"



	; Loads a string (ptr) from HL
	; and duplicates it on dynamic memory again
	; Finally, it returns result pointer in HL

__ILOADSTR:		; This is the indirect pointer entry HL = (HL)
			ld a, h
			or l
			ret z
			ld a, (hl)
			inc hl
			ld h, (hl)
			ld l, a

__LOADSTR:		; __FASTCALL__ entry
			ld a, h
			or l
			ret z	; Return if NULL

			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl  ; BC = LEN(a$)

			inc bc
			inc bc	; BC = LEN(a$) + 2 (two bytes for length)

			push hl
			push bc
			call __MEM_ALLOC
			pop bc  ; Recover length
			pop de  ; Recover origin

			ld a, h
			or l
			ret z	; Return if NULL (No memory)

			ex de, hl ; ldir takes HL as source, DE as destiny, so SWAP HL,DE
			push de	; Saves destiny start
			ldir	; Copies string (length number included)
			pop hl	; Recovers destiny in hl as result
			ret
#line 13746 "Program.zxbas"
#line 1 "ltf.asm"





	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)

	; All of them uses A EDCB registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order A HL BC.
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__LTF:	; A < B
		call __FPSTACK_PUSH2 ; Enters B, A

		; ------------- ROM NOS-LESS
		ld b, 0Ch	; A > B (Operands stack-reversed)
		rst 28h
		defb 0Ch;	; A > B
		defb 38h;   ; END CALC

		call __FPSTACK_POP
		jp __FTOU8 ; Convert to 8 bits

#line 13747 "Program.zxbas"
#line 1 "lti32.asm"




__LTI32: ; Test 32 bit values in Top of the stack < HLDE
	    PROC
	    LOCAL checkParity
	    exx
	    pop de ; Preserves return address
	    exx

	    call __SUB32

	    exx
	    push de ; Restores return address
	    exx

	    jp po, checkParity
	    ld a, d
	    xor 0x80
checkParity:
	    ld a, 0     ; False
	    ret p
	    inc a       ; True
	    ret
	    ENDP
#line 13748 "Program.zxbas"
#line 1 "lti8.asm"


#line 13749 "Program.zxbas"
#line 1 "mul32.asm"

#line 1 "_mul32.asm"


; Ripped from: http://www.andreadrian.de/oldcpu/z80_number_cruncher.html#moztocid784223
	; Used with permission.
	; Multiplies 32x32 bit integer (DEHL x D'E'H'L')
	; 64bit result is returned in H'L'H L B'C'A C


__MUL32_64START:
			push hl
			exx
			ld b, h
			ld c, l		; BC = Low Part (A)
			pop hl		; HL = Load Part (B)
			ex de, hl	; DE = Low Part (B), HL = HightPart(A) (must be in B'C')
			push hl

			exx
			pop bc		; B'C' = HightPart(A)
			exx			; A = B'C'BC , B = D'E'DE

				; multiply routine 32 * 32bit = 64bit
				; h'l'hlb'c'ac = b'c'bc * d'e'de
				; needs register a, changes flags
				;
				; this routine was with tiny differences in the
				; sinclair zx81 rom for the mantissa multiply

__LMUL:
	        and     a               ; reset carry flag
	        sbc     hl,hl           ; result bits 32..47 = 0
	        exx
	        sbc     hl,hl           ; result bits 48..63 = 0
	        exx
	        ld      a,b             ; mpr is b'c'ac
	        ld      b,33            ; initialize loop counter
	        jp      __LMULSTART

__LMULLOOP:
	        jr      nc,__LMULNOADD  ; JP is 2 cycles faster than JR. Since it's inside a LOOP
	                                ; it can save up to 33 * 2 = 66 cycles
	                                ; But JR if 3 cycles faster if JUMP not taken!
	        add     hl,de           ; result += mpd
	        exx
	        adc     hl,de
	        exx

__LMULNOADD:
	        exx
	        rr      h               ; right shift upper
	        rr      l               ; 32bit of result
	        exx
	        rr      h
	        rr      l

__LMULSTART:
	        exx
	        rr      b               ; right shift mpr/
	        rr      c               ; lower 32bit of result
	        exx
	        rra                     ; equivalent to rr a
	        rr      c
	        djnz    __LMULLOOP

			ret						; result in h'l'hlb'c'ac

#line 2 "mul32.asm"

__MUL32:	; multiplies 32 bit un/signed integer.
				; First operand stored in DEHL, and 2nd onto stack
				; Lowest part of 2nd operand on top of the stack
				; returns the result in DE.HL
			exx
			pop hl	; Return ADDRESS
			pop de	; Low part
			ex (sp), hl ; CALLEE -> HL = High part
			ex de, hl
			call __MUL32_64START

__TO32BIT:  ; Converts H'L'HLB'C'AC to DEHL (Discards H'L'HL)
			exx
			push bc
			exx
			pop de
			ld h, a
			ld l, c
			ret


#line 13750 "Program.zxbas"
#line 1 "mulf.asm"



	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)
	; All of them uses A EDCB registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order A DE BC.
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__MULF:	; Multiplication
		call __FPSTACK_PUSH2

		; ------------- ROM MUL
		rst 28h
		defb 04h	;
		defb 38h;   ; END CALC

		jp __FPSTACK_POP

#line 13751 "Program.zxbas"
#line 1 "negf.asm"





	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)

	; All of them uses C EDHL registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order BC DE HL (B not used).
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__NEGF:	; A = -A
		call __FPSTACK_PUSH

		; ------------- ROM NEGATE
		rst 28h
		defb 1Bh	; NEGF
		defb 38h;   ; END CALC

		jp __FPSTACK_POP


#line 13752 "Program.zxbas"

#line 1 "pause.asm"

	; The PAUSE statement (Calling the ROM)

__PAUSE:
		ld b, h
	    ld c, l
	    jp 1F3Dh  ; PAUSE_1
#line 13754 "Program.zxbas"
#line 1 "ploadf.asm"

	; Parameter / Local var load
	; A => Offset
	; IX = Stack Frame
; RESULT: HL => IX + DE

#line 1 "iloadf.asm"

	; __FASTCALL__ routine which
	; loads a 40 bits floating point into A ED CB
	; stored at position pointed by POINTER HL
	;A DE, BC <-- ((HL))

__ILOADF:
	    ld a, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, a

	; __FASTCALL__ routine which
	; loads a 40 bits floating point into A ED CB
	; stored at position pointed by POINTER HL
	;A DE, BC <-- (HL)

__LOADF:    ; Loads a 40 bits FP number from address pointed by HL
		ld a, (hl)
		inc hl
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
		ld c, (hl)
		inc hl
		ld b, (hl)
		ret

#line 7 "ploadf.asm"

__PLOADF:
	    push ix
	    pop hl
	    add hl, de
	    jp __LOADF

#line 13755 "Program.zxbas"

#line 1 "printstr.asm"






	; PRINT command routine
	; Prints string pointed by HL

PRINT_STR:
__PRINTSTR:		; __FASTCALL__ Entry to print_string
			PROC
			LOCAL __PRINT_STR_LOOP
	        LOCAL __PRINT_STR_END

	        ld d, a ; Saves A reg (Flag) for later

			ld a, h
			or l
			ret z	; Return if the pointer is NULL

	        push hl

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl	; BC = LEN(a$); HL = &a$

__PRINT_STR_LOOP:
			ld a, b
			or c
			jr z, __PRINT_STR_END 	; END if BC (counter = 0)

			ld a, (hl)
			call __PRINTCHAR
			inc hl
			dec bc
			jp __PRINT_STR_LOOP

__PRINT_STR_END:
	        pop hl
	        ld a, d ; Recovers A flag
	        or a   ; If not 0 this is a temporary string. Free it
	        ret z
	        jp __MEM_FREE ; Frees str from heap and return from there

__PRINT_STR:
	        ; Fastcall Entry
	        ; It ONLY prints strings
	        ; HL = String start
	        ; BC = String length (Number of chars)
	        push hl ; Push str address for later
	        ld d, a ; Saves a FLAG
	        jp __PRINT_STR_LOOP

			ENDP

#line 13757 "Program.zxbas"
#line 1 "pstoref.asm"

	; Stores FP number in A ED CB at location HL+IX
	; HL = Offset
	; IX = Stack Frame
	; A ED CB = FP Number

#line 1 "storef.asm"

__PISTOREF:	; Indect Stores a float (A, E, D, C, B) at location stored in memory, pointed by (IX + HL)
			push de
			ex de, hl	; DE <- HL
			push ix
			pop hl		; HL <- IX
			add hl, de  ; HL <- IX + HL
			pop de

__ISTOREF:  ; Load address at hl, and stores A,E,D,C,B registers at that address. Modifies A' register
	        ex af, af'
			ld a, (hl)
			inc hl
			ld h, (hl)
			ld l, a     ; HL = (HL)
	        ex af, af'

__STOREF:	; Stores the given FP number in A EDCB at address HL
			ld (hl), a
			inc hl
			ld (hl), e
			inc hl
			ld (hl), d
			inc hl
			ld (hl), c
			inc hl
			ld (hl), b
			ret

#line 7 "pstoref.asm"

	; Stored a float number in A ED CB into the address pointed by IX + HL
__PSTOREF:
		push de
	    ex de, hl  ; DE <- HL
	    push ix
		pop hl	   ; HL <- IX
	    add hl, de ; HL <- IX + DE
		pop de
	    jp __STOREF

#line 13758 "Program.zxbas"
#line 1 "pstorestr.asm"

; vim:ts=4:et:sw=4
	;
	; Stores an string (pointer to the HEAP by DE) into the address pointed
	; by (IX + BC). A new copy of the string is created into the HEAP
	;

#line 1 "storestr.asm"

; vim:ts=4:et:sw=4
	; Stores value of current string pointed by DE register into address pointed by HL
	; Returns DE = Address pointer  (&a$)
	; Returns HL = HL               (b$ => might be needed later to free it from the heap)
	;
	; e.g. => HL = _variableName    (DIM _variableName$)
	;         DE = Address into the HEAP
	;
	; This function will resize (REALLOC) the space pointed by HL
	; before copying the content of b$ into a$


#line 1 "strcpy.asm"

#line 1 "realloc.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.







	; ---------------------------------------------------------------------
	; MEM_REALLOC
	;  Reallocates a block of memory in the heap.
	;
	; Parameters
	;  HL = Pointer to the original block
	;  BC = New Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	;
; Notes:
	;  If BC = 0, the block is freed, otherwise
	;  the content of the original block is copied to the new one, and
	;  the new size is adjusted. If BC < original length, the content
	;  will be truncated. Otherwise, extra block content might contain
	;  memory garbage.
	;
	; ---------------------------------------------------------------------
__REALLOC:    ; Reallocates block pointed by HL, with new length BC
	        PROC

	        LOCAL __REALLOC_END

	        ld a, h
	        or l
	        jp z, __MEM_ALLOC    ; If HL == NULL, just do a malloc

	        ld e, (hl)
	        inc hl
	        ld d, (hl)    ; DE = First 2 bytes of HL block

	        push hl
	        exx
	        pop de
	        inc de        ; DE' <- HL + 2
	        exx            ; DE' <- HL (Saves current pointer into DE')

	        dec hl        ; HL = Block start

	        push de
	        push bc
	        call __MEM_FREE        ; Frees current block
	        pop bc
	        push bc
	        call __MEM_ALLOC    ; Gets a new block of length BC
	        pop bc
	        pop de

	        ld a, h
	        or l
	        ret z        ; Return if HL == NULL (No memory)

	        ld (hl), e
	        inc hl
	        ld (hl), d
	        inc hl        ; Recovers first 2 bytes in HL

	        dec bc
	        dec bc        ; BC = BC - 2 (Two bytes copied)

	        ld a, b
	        or c
	        jp z, __REALLOC_END        ; Ret if nothing to copy (BC == 0)

	        exx
	        push de
	        exx
	        pop de        ; DE <- DE' ; Start of remaining block

	        push hl        ; Saves current Block + 2 start
        ex de, hl    ; Exchanges them: DE is destiny block
	        ldir        ; Copies BC Bytes
	        pop hl        ; Recovers Block + 2 start

__REALLOC_END:

	        dec hl        ; Set HL
	        dec hl        ; To begin of block
	        ret

	        ENDP

#line 2 "strcpy.asm"

	; String library


__STRASSIGN: ; Performs a$ = b$ (HL = address of a$; DE = Address of b$)
			PROC

			LOCAL __STRREALLOC
			LOCAL __STRCONTINUE
			LOCAL __B_IS_NULL
			LOCAL __NOTHING_TO_COPY

			ld b, d
			ld c, e
			ld a, b
			or c
			jr z, __B_IS_NULL

			ex de, hl
			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl		; BC = LEN(b$)
			ex de, hl	; DE = &b$

__B_IS_NULL:		; Jumps here if B$ pointer is NULL
			inc bc
			inc bc		; BC = BC + 2  ; (LEN(b$) + 2 bytes for storing length)

			push de
			push hl

			ld a, h
			or l
			jr z, __STRREALLOC

			dec hl
			ld d, (hl)
			dec hl
			ld e, (hl)	; DE = MEMBLOCKSIZE(a$)
			dec de
			dec de		; DE = DE - 2  ; (Membloksize takes 2 bytes for memblock length)

			ld h, b
			ld l, c		; HL = LEN(b$) + 2  => Minimum block size required
			ex de, hl	; Now HL = BLOCKSIZE(a$), DE = LEN(b$) + 2

			or a		; Prepare to subtract BLOCKSIZE(a$) - LEN(b$)
			sbc hl, de  ; Carry if len(b$) > Blocklen(a$)
			jr c, __STRREALLOC ; No need to realloc
			; Need to reallocate at least to len(b$) + 2
			ex de, hl	; DE = Remaining bytes in a$ mem block.
			ld hl, 4
			sbc hl, de  ; if remaining bytes < 4 we can continue
			jr nc,__STRCONTINUE ; Otherwise, we realloc, to free some bytes

__STRREALLOC:
			pop hl
			call __REALLOC	; Returns in HL a new pointer with BC bytes allocated
			push hl

__STRCONTINUE:	;   Pops hl and de SWAPPED
			pop de	;	DE = &a$
			pop hl	; 	HL = &b$

			ld a, d		; Return if not enough memory for new length
			or e
			ret z		; Return if DE == NULL (0)

__STRCPY:	; Copies string pointed by HL into string pointed by DE
				; Returns DE as HL (new pointer)
			ld a, h
			or l
			jr z, __NOTHING_TO_COPY
			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl
			inc bc
			inc bc
			push de
			ldir
			pop hl
			ret

__NOTHING_TO_COPY:
			ex de, hl
			ld (hl), e
			inc hl
			ld (hl), d
			dec hl
			ret

			ENDP

#line 14 "storestr.asm"

__PISTORE_STR:          ; Indirect assignement at (IX + BC)
	    push ix
	    pop hl
	    add hl, bc

__ISTORE_STR:           ; Indirect assignement, hl point to a pointer to a pointer to the heap!
	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c             ; HL = (HL)

__STORE_STR:
	    push de             ; Pointer to b$
	    push hl             ; Array pointer to variable memory address

	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c             ; HL = (HL)

	    call __STRASSIGN    ; HL (a$) = DE (b$); HL changed to a new dynamic memory allocation
	    ex de, hl           ; DE = new address of a$
	    pop hl              ; Recover variable memory address pointer

	    ld (hl), e
	    inc hl
	    ld (hl), d          ; Stores a$ ptr into elemem ptr

	    pop hl              ; Returns ptr to b$ in HL (Caller might needed to free it from memory)
	    ret

#line 8 "pstorestr.asm"

__PSTORE_STR:
	    push ix
	    pop hl
	    add hl, bc
	    jp __STORE_STR

#line 13759 "Program.zxbas"
#line 1 "pstorestr2.asm"

; vim:ts=4:et:sw=4
	;
	; Stores an string (pointer to the HEAP by DE) into the address pointed
	; by (IX + BC). No new copy of the string is created into the HEAP, since
	; it's supposed it's already created (temporary string)
	;

#line 1 "storestr2.asm"

	; Similar to __STORE_STR, but this one is called when
	; the value of B$ if already duplicated onto the stack.
	; So we needn't call STRASSING to create a duplication
	; HL = address of string memory variable
	; DE = address of 2n string. It just copies DE into (HL)
	; 	freeing (HL) previously.



__PISTORE_STR2: ; Indirect store temporary string at (IX + BC)
	    push ix
	    pop hl
	    add hl, bc

__ISTORE_STR2:
		ld c, (hl)  ; Dereferences HL
		inc hl
		ld h, (hl)
		ld l, c		; HL = *HL (real string variable address)

__STORE_STR2:
		push hl
		ld c, (hl)
		inc hl
		ld h, (hl)
		ld l, c		; HL = *HL (real string address)

		push de
		call __MEM_FREE
		pop de

		pop hl
		ld (hl), e
		inc hl
		ld (hl), d
		dec hl		; HL points to mem address variable. This might be useful in the future.

		ret

#line 9 "pstorestr2.asm"

__PSTORE_STR2:
	    push ix
	    pop hl
	    add hl, bc
	    jp __STORE_STR2

#line 13760 "Program.zxbas"
#line 1 "random.asm"

	; RANDOM functions

RANDOMIZE:
	    ; Randomize with 32 bit seed in DE HL
	    ; if SEED = 0, calls ROM to take frames as seed
	    PROC

	    LOCAL TAKE_FRAMES
	    LOCAL FRAMES

	    ld a, h
	    or l
	    or d
	    or e
	    jr z, TAKE_FRAMES

	    ld (RANDOM_SEED_LOW), hl
	    ld (RANDOM_SEED_HIGH), de
	    ret

TAKE_FRAMES:
	    ; Takes the seed from frames
	    ld hl, (FRAMES)
	    ld (RANDOM_SEED_LOW), hl
	    ld hl, (FRAMES + 2)
	    ld (RANDOM_SEED_HIGH), hl
	    ret

	FRAMES EQU    23672
	    ENDP

	RANDOM_SEED_HIGH EQU RAND+6    ; RANDOM seed, 16 higher bits
	RANDOM_SEED_LOW     EQU 23670  ; RANDOM seed, 16 lower bits


RAND:
	    PROC
	    LOCAL RAND_LOOP
	    ld b, 4
RAND_LOOP:
	    ld  hl,(RANDOM_SEED_LOW)   ; xz -> yw
	    ld  de,0C0DEh   ; yw -> zt
	    ld  (RANDOM_SEED_LOW),de  ; x = y, z = w
	    ld  a,e         ; w = w ^ ( w << 3 )
	    add a,a
	    add a,a
	    add a,a
	    xor e
	    ld  e,a
	    ld  a,h         ; t = x ^ (x << 1)
	    add a,a
	    xor h
	    ld  d,a
	    rra             ; t = t ^ (t >> 1) ^ w
	    xor d
	    xor e
	    ld  h,l         ; y = z
	    ld  l,a         ; w = t
	    ld  (RANDOM_SEED_HIGH),hl
	    push af
	    djnz RAND_LOOP
	    pop af
	    pop af
	    ld d, a
	    pop af
	    ld e, a
	    pop af
	    ld h, a
	    ret
	    ENDP

RND:
	    ; Returns a FLOATING point integer
	    ; using RAND as a mantissa
	    PROC
	    LOCAL RND_LOOP

	    call RAND
	    ; BC = HL since ZX BASIC uses ED CB A registers for FP
	    ld b, h
	    ld c, l

	    ld a, e
	    or d
	    or c
	    or b
	    ret z   ; Returns 0 if BC=DE=0

	    ; We already have a random 32 bit mantissa in ED CB
	    ; From 0001h to FFFFh

	    ld l, 81h	; Exponent
	    ; At this point we have [0 .. 1) FP number;

	    ; Now we must shift mantissa left until highest bit goes into carry
	    ld a, e ; Use A register for rotating E faster (using RLA instead of RL E)
RND_LOOP:
	    dec l
	    sla b
	    rl c
	    rl d
	    rla
	    jp nc, RND_LOOP

	    ; Now undo last mantissa left-shift once
	    ccf ; Clears carry to insert a 0 bit back into mantissa -> positive FP number
	    rra
	    rr d
	    rr c
	    rr b

	    ld e, a     ; E must have the highest byte
	    ld a, l     ; exponent in A
	    ret

	    ENDP

#line 13761 "Program.zxbas"
#line 1 "str.asm"

	; The STR$( ) BASIC function implementation

	; Given a FP number in C ED LH
	; Returns a pointer (in HL) to the memory heap
	; containing the FP number string representation





__STR:

__STR_FAST:

		PROC
		LOCAL __STR_END
		LOCAL RECLAIM2
		LOCAL STK_END

		ld hl, (STK_END)
		push hl; Stores STK_END
		ld hl, (ATTR_T)	; Saves ATTR_T since it's changed by STR$ due to a ROM BUG
		push hl

	    call __FPSTACK_PUSH ; Push number into stack
		rst 28h		; # Rom Calculator
		defb 2Eh	; # STR$(x)
		defb 38h	; # END CALC
		call __FPSTACK_POP ; Recovers string parameters to A ED CB (Only ED LH are important)

		pop hl
		ld (ATTR_T), hl	; Restores ATTR_T
		pop hl
		ld (STK_END), hl	; Balance STK_END to avoid STR$ bug

		push bc
		push de

		inc bc
		inc bc
		call __MEM_ALLOC ; HL Points to new block

		pop de
		pop bc

		push hl
		ld a, h
		or l
		jr z, __STR_END  ; Return if NO MEMORY (NULL)

		push bc
		push de
		ld (hl), c
		inc hl
		ld (hl), b
		inc hl		; Copies length

		ex de, hl	; HL = start of original string
		ldir		; Copies string content

		pop de		; Original (ROM-CALC) string
		pop bc		; Original Length

__STR_END:
		ex de, hl
		inc bc

		call RECLAIM2 ; Frees TMP Memory
		pop hl		  ; String result

		ret

	RECLAIM2 EQU 19E8h
	STK_END EQU 5C65h

		ENDP

#line 13762 "Program.zxbas"
#line 1 "strcat.asm"


#line 1 "strlen.asm"

	; Returns len if a string
	; If a string is NULL, its len is also 0
	; Result returned in HL

__STRLEN:	; Direct FASTCALL entry
			ld a, h
			or l
			ret z

			ld a, (hl)
			inc hl
			ld h, (hl)  ; LEN(str) in HL
			ld l, a
			ret


#line 3 "strcat.asm"

__ADDSTR:	; Implements c$ = a$ + b$
				; hl = &a$, de = &b$ (pointers)


__STRCAT2:	; This routine creates a new string in dynamic space
				; making room for it. Then copies a$ + b$ into it.
				; HL = a$, DE = b$

			PROC

			LOCAL __STR_CONT
			LOCAL __STRCATEND

			push hl
			call __STRLEN
			ld c, l
			ld b, h		; BC = LEN(a$)
			ex (sp), hl ; (SP) = LEN (a$), HL = a$
			push hl		; Saves pointer to a$

			inc bc
			inc bc		; +2 bytes to store length

			ex de, hl
			push hl
			call __STRLEN
			; HL = len(b$)

			add hl, bc	; Total str length => 2 + len(a$) + len(b$)

			ld c, l
			ld b, h		; BC = Total str length + 2
			call __MEM_ALLOC
			pop de		; HL = c$, DE = b$

			ex de, hl	; HL = b$, DE = c$
			ex (sp), hl ; HL = a$, (SP) = b$

			exx
			pop de		; D'E' = b$
			exx

			pop bc		; LEN(a$)

			ld a, d
			or e
		ret z		; If no memory: RETURN

__STR_CONT:
			push de		; Address of c$

			ld a, h
			or l
			jr nz, __STR_CONT1 ; If len(a$) != 0 do copy

	        ; a$ is NULL => uses HL = DE for transfer
			ld h, d
			ld l, e
			ld (hl), a	; This will copy 00 00 at (DE) location
	        inc de      ;
	        dec bc      ; Ensure BC will be set to 1 in the next step

__STR_CONT1:        ; Copies a$ (HL) into c$ (DE)
			inc bc
			inc bc		; BC = BC + 2
		ldir		; MEMCOPY: c$ = a$
			pop hl		; HL = c$

			exx
			push de		; Recovers b$; A ex hl,hl' would be very handy
			exx

			pop de		; DE = b$

__STRCAT: ; ConCATenate two strings a$ = a$ + b$. HL = ptr to a$, DE = ptr to b$
		  ; NOTE: Both DE, BC and AF are modified and lost
			  ; Returns HL (pointer to a$)
			  ; a$ Must be NOT NULL
			ld a, d
			or e
			ret z		; Returns if de is NULL (nothing to copy)

			push hl		; Saves HL to return it later

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl
			add hl, bc	; HL = end of (a$) string ; bc = len(a$)
			push bc		; Saves LEN(a$) for later

			ex de, hl	; DE = end of string (Begin of copy addr)
			ld c, (hl)
			inc hl
			ld b, (hl)	; BC = len(b$)

			ld a, b
			or c
			jr z, __STRCATEND; Return if len(b$) == 0

			push bc			 ; Save LEN(b$)
			inc hl			 ; Skip 2nd byte of len(b$)
			ldir			 ; Concatenate b$

			pop bc			 ; Recovers length (b$)
			pop hl			 ; Recovers length (a$)
			add hl, bc		 ; HL = LEN(a$) + LEN(b$) = LEN(a$+b$)
			ex de, hl		 ; DE = LEN(a$+b$)
			pop hl

			ld (hl), e		 ; Updates new LEN and return
			inc hl
			ld (hl), d
			dec hl
			ret

__STRCATEND:
			pop hl		; Removes Len(a$)
			pop hl		; Restores original HL, so HL = a$
			ret

			ENDP

#line 13763 "Program.zxbas"
#line 1 "string.asm"

	; String library



__STR_ISNULL:	; Returns A = FF if HL is 0, 0 otherwise
			ld a, h
			or l
			sub 1		; Only CARRY if HL is NULL
			sbc a, a	; Only FF if HL is NULL (0 otherwise)
			ret


__STRCMP:	; Compares strings at HL, DE: Returns 0 if EQual, -1 if HL < DE, +1 if HL > DE
				; A register is preserved and returned in A'
			PROC ; __FASTCALL__

			LOCAL __STRCMPZERO
			LOCAL __STRCMPEXIT
			LOCAL __STRCMPLOOP
			LOCAL __NOPRESERVEBC
			LOCAL __EQULEN
			LOCAL __EQULEN1
			LOCAL __HLZERO

			ex af, af'	; Saves current A register in A' (it's used by STRXX comparison functions)

			ld a, h
			or l
			jr z, __HLZERO

			ld a, d
			or e
			ld a, 1
			ret z		; Returns +1 if HL is not NULL and DE is NULL

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl		; BC = LEN(a$)
			push hl		; HL = &a$, saves it

			ex de, hl
			ld e, (hl)
			inc hl
			ld d, (hl)
			inc hl
			ex de, hl	; HL = LEN(b$), de = &b$

			; At this point Carry is cleared, and A reg. = 1
			sbc hl, bc	; Carry if len(b$) > len(a$)
			jr z, __EQULEN	; Jump if they have the same length so A reg. = 0
			jr c, __EQULEN1 ; Jump if len(b$) > len(a$) so A reg. = 1
__NOPRESERVEBC:
			add hl, bc	; Restore HL (original length)
			ld b, h		; len(b$) <= len(a$)
			ld c, l		; so BC = hl
			dec a		; At this point A register = 0, it must be -1 since len(a$) > len(b$)
__EQULEN:
			dec a		; A = 0 if len(a$) = len(b$), -1 otherwise
__EQULEN1:
			pop hl		; Recovers A$ pointer
			push af		; Saves A for later (Value to return if strings reach the end)
	        ld a, b
	        or c
	        jr z, __STRCMPZERO ; empty string being compared

		; At this point: BC = lesser length, DE and HL points to b$ and a$ chars respectively
__STRCMPLOOP:
			ld a, (de)
			cpi
			jr nz, __STRCMPEXIT ; (HL) != (DE). Examine carry
			jp po, __STRCMPZERO ; END of string (both are equal)
			inc de
			jp __STRCMPLOOP

__STRCMPZERO:
			pop af		; This is -1 if len(a$) < len(b$), +1 if len(b$) > len(a$), 0 otherwise
			ret

__STRCMPEXIT:		; Sets A with the following value
			dec hl		; Get back to the last char
			cp (hl)
			sbc a, a	; A = -1 if carry => (DE) < (HL); 0 otherwise (DE) > (HL)
			cpl			; A = -1 if (HL) < (DE), 0 otherwise
			add a, a    ; A = A * 2 (thus -2 or 0)
			inc a		; A = A + 1 (thus -1 or 1)

			pop bc		; Discard top of the stack
			ret

__HLZERO:
			or d
			or e
			ret z		; Returns 0 (EQ) if HL == DE == NULL
			ld a, -1
			ret			; Returns -1 if HL is NULL and DE is not NULL

			ENDP

			; The following routines perform string comparison operations (<, >, ==, etc...)
			; On return, A will contain 0 for False, other value for True
			; Register A' will determine whether the incoming strings (HL, DE) will be freed
		; from dynamic memory on exit:
			;		Bit 0 => 1 means HL will be freed.
			;		Bit 1 => 1 means DE will be freed.

__STREQ:	; Compares a$ == b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			;inc a		; If A == -1, return 0
			;jp z, __FREE_STR

			;dec a		;
			;dec a		; Return -1 if a = 0 (True), returns 0 if A == 1 (False)
	        sub 1
	        sbc a, a
			jp __FREE_STR


__STRNE:	; Compares a$ != b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			;jp z, __FREE_STR

			;ld a, 0FFh	; Returns 0xFFh (True)
			jp __FREE_STR


__STRLT:	; Compares a$ < b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			jp z, __FREE_STR ; Returns 0 if A == B

			dec a		; Returns 0 if A == 1 => a$ > b$
			;jp z, __FREE_STR

			;inc a		; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRLE:	; Compares a$ <= b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			dec a		; Returns 0 if A == 1 => a$ < b$
			;jp z, __FREE_STR

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRGT:	; Compares a$ > b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			jp z, __FREE_STR		; Returns 0 if A == B

			inc a		; Returns 0 if A == -1 => a$ < b$
			;jp z, __FREE_STR		; Returns 0 if A == B

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRGE:	; Compares a$ >= b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			inc a		; Returns 0 if A == -1 => a$ < b$
			;jr z, __FREE_STR

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return

__FREE_STR: ; This exit point will test A' for bits 0 and 1
				; If bit 0 is 1 => Free memory from HL pointer
				; If bit 1 is 1 => Free memory from DE pointer
				; Finally recovers A, to return the result
			PROC

			LOCAL __FREE_STR2
			LOCAL __FREE_END

			ex af, af'
			bit 0, a
			jr z, __FREE_STR2

			push af
			push de
			call __MEM_FREE
			pop de
			pop af

__FREE_STR2:
			bit 1, a
			jr z, __FREE_END

			ex de, hl
			call __MEM_FREE

__FREE_END:
			ex af, af'
			ret

			ENDP

#line 13764 "Program.zxbas"

#line 1 "strslice.asm"

	; String slicing library
	; HL = Str pointer
	; DE = String start
	; BC = String character end
	; A register => 0 => the HL pointer wont' be freed from the HEAP
	; e.g. a$(5 TO 10) => HL = a$; DE = 5; BC = 10

	; This implements a$(X to Y) being X and Y first and
	; last characters respectively. If X > Y, NULL is returned

	; Otherwise returns a pointer to a$ FROM X to Y (starting from 0)
	; if Y > len(a$), then a$ will be padded with spaces (reallocating
	; it in dynamic memory if needed). Returns pointer (HL) to resulting
	; string. NULL (0) if no memory for padding.
	;





__STRSLICE:			; Callee entry
		pop hl			; Return ADDRESS
		pop bc			; Last char pos
		pop de			; 1st char pos
		ex (sp), hl		; CALLEE. -> String start

__STRSLICE_FAST:	; __FASTCALL__ Entry
		PROC

		LOCAL __CONT
		LOCAL __EMPTY
		LOCAL __FREE_ON_EXIT

		push hl			; Stores original HL pointer to be recovered on exit
		ex af, af'		; Saves A register for later

		push hl
		call __STRLEN
		inc bc			; Last character position + 1 (string starts from 0)
		or a
		sbc hl, bc		; Compares length with last char position
		jr nc, __CONT	; If Carry => We must copy to end of string
		add hl, bc		; Restore back original LEN(a$) in HL
		ld b, h
		ld c, l			; Copy to the end of str
		ccf				; Clears Carry flag for next subtraction

__CONT:
		ld h, b
		ld l, c			; HL = Last char position to copy (1 for char 0, 2 for char 1, etc)
		sbc hl, de		; HL = LEN(a$) - DE => Number of chars to copy
		jr z, __EMPTY	; 0 Chars to copy => Return HL = 0 (NULL STR)
		jr c, __EMPTY	; If Carry => Nothing to return (NULL STR)

		ld b, h
		ld c, l			; BC = Number of chars to copy
		inc bc
		inc bc			; +2 bytes for string length number

		push bc
		push de
		call __MEM_ALLOC
		pop de
		pop bc
		ld a, h
		or l
		jr z, __EMPTY	; Return if NULL (no memory)

		dec bc
		dec bc			; Number of chars to copy (Len of slice)

		ld (hl), c
		inc hl
		ld (hl), b
		inc hl			; Stores new string length

		ex (sp), hl		; Pointer to A$ now in HL; Pointer to new string chars in Stack
		inc hl
		inc hl			; Skip string length
		add hl, de		; Were to start from A$
		pop de			; Start of new string chars
		push de			; Stores it again
		ldir			; Copies BC chars
		pop de
		dec de
		dec de			; Points to String LEN start
		ex de, hl		; Returns it in HL
		jr __FREE_ON_EXIT

__EMPTY:			; Return NULL (empty) string
		pop hl
		ld hl, 0		; Return NULL


__FREE_ON_EXIT:
		ex af, af'		; Recover original A register
		ex (sp), hl		; Original HL pointer

		or a
		call nz, __MEM_FREE

		pop hl			; Recover result
		ret

		ENDP

#line 13766 "Program.zxbas"

#line 1 "swap32.asm"

	; Exchanges current DE HL with the
	; ones in the stack

__SWAP32:
		pop bc ; Return address
	    ex (sp), hl
	    inc sp
	    inc sp
	    ex de, hl
	    ex (sp), hl
	    ex de, hl
	    dec sp
	    dec sp
	    push bc
		ret

#line 13768 "Program.zxbas"


ZXBASIC_USER_DATA:
	_counter EQU 23672
	_hiCounter EQU 23674
_musParamA:
	DEFB 00, 00
_musParamB:
	DEFB 00, 00
_currentOp:
	DEFB 00
_screenScore:
	DEFB 00, 00
_workingScore:
	DEFB 00, 00
_screenLevel:
	DEFB 00
_workingLevel:
	DEFB 00
	_udgAddress EQU 23675
_playedTetrisMusic:
	DEFB 00h
_playedArkaMusic:
	DEFB 00h
_playedRacingMusic:
	DEFB 00h
_playedSnakeMusic:
	DEFB 00h
_playedDestroyerMusic:
	DEFB 00h
_playedGhostMusic:
	DEFB 00h
_level:
	DEFB 00h
_game:
	DEFB 00
	_chars EQU 23606
_deathMusic:
	DEFW __LABEL1273
_deathMusic.__DATA__.__PTR__:
	DEFW _deathMusic.__DATA__
_deathMusic.__DATA__:
	DEFB 33h
	DEFB 00h
	DEFB 0A1h
	DEFB 02h
	DEFB 30h
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 2Dh
	DEFB 00h
	DEFB 0F7h
	DEFB 02h
	DEFB 2Ah
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 30h
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 2Dh
	DEFB 00h
	DEFB 0F7h
	DEFB 02h
	DEFB 2Ah
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 28h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 2Dh
	DEFB 00h
	DEFB 0F7h
	DEFB 02h
	DEFB 2Ah
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 28h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 26h
	DEFB 00h
	DEFB 8Ch
	DEFB 03h
	DEFB 2Ah
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 28h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 26h
	DEFB 00h
	DEFB 8Ch
	DEFB 03h
	DEFB 24h
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 28h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 26h
	DEFB 00h
	DEFB 8Ch
	DEFB 03h
	DEFB 24h
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 21h
	DEFB 00h
	DEFB 0FFh
	DEFB 03h
	DEFB 1Eh
	DEFB 00h
	DEFB 80h
	DEFB 04h
	DEFB 1Ch
	DEFB 00h
	DEFB 0C7h
	DEFB 04h
	DEFB 49h
	DEFB 01h
	DEFB 11h
	DEFB 05h
__LABEL1273:
	DEFW 0000h
	DEFB 02h
_winMusic:
	DEFW __LABEL1274
_winMusic.__DATA__.__PTR__:
	DEFW _winMusic.__DATA__
_winMusic.__DATA__:
	DEFB 57h
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 20h
	DEFB 00h
	DEFB 11h
	DEFB 05h
	DEFB 1Ch
	DEFB 00h
	DEFB 0B4h
	DEFB 05h
	DEFB 20h
	DEFB 00h
	DEFB 11h
	DEFB 05h
	DEFB 57h
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 30h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 36h
	DEFB 00h
	DEFB 0F7h
	DEFB 02h
	DEFB 30h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 57h
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 30h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 29h
	DEFB 00h
	DEFB 0FFh
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 30h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 36h
	DEFB 00h
	DEFB 0F7h
	DEFB 02h
	DEFB 30h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 36h
	DEFB 00h
	DEFB 0F7h
	DEFB 02h
	DEFB 30h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 00h
	DEFB 2Eh
	DEFB 00h
	DEFB 8Ch
	DEFB 03h
	DEFB 30h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 74h
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 3Ah
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 3Ah
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 3Ah
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 26h
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 74h
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 3Ah
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 3Ah
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 3Ah
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 41h
	DEFB 00h
	DEFB 7Ah
	DEFB 02h
	DEFB 49h
	DEFB 00h
	DEFB 31h
	DEFB 02h
	DEFB 41h
	DEFB 00h
	DEFB 7Ah
	DEFB 02h
	DEFB 74h
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 3Ah
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 36h
	DEFB 00h
	DEFB 0F7h
	DEFB 02h
	DEFB 62h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 30h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 29h
	DEFB 00h
	DEFB 0FFh
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 29h
	DEFB 00h
	DEFB 0FFh
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 29h
	DEFB 00h
	DEFB 0FFh
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 00h
	DEFB 24h
	DEFB 00h
	DEFB 80h
	DEFB 04h
	DEFB 29h
	DEFB 00h
	DEFB 0FFh
	DEFB 03h
	DEFB 57h
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 20h
	DEFB 00h
	DEFB 11h
	DEFB 05h
	DEFB 1Ch
	DEFB 00h
	DEFB 0B4h
	DEFB 05h
	DEFB 20h
	DEFB 00h
	DEFB 11h
	DEFB 05h
	DEFB 57h
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 30h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 36h
	DEFB 00h
	DEFB 0F7h
	DEFB 02h
	DEFB 30h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 57h
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 30h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 29h
	DEFB 00h
	DEFB 0FFh
	DEFB 03h
	DEFB 2Bh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 30h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 36h
	DEFB 00h
	DEFB 0F7h
	DEFB 02h
	DEFB 30h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 36h
	DEFB 00h
	DEFB 0F7h
	DEFB 02h
	DEFB 30h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 00h
	DEFB 2Eh
	DEFB 00h
	DEFB 8Ch
	DEFB 03h
	DEFB 30h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 83h
	DEFB 00h
	DEFB 7Ah
	DEFB 02h
	DEFB 41h
	DEFB 00h
	DEFB 7Ah
	DEFB 02h
	DEFB 41h
	DEFB 00h
	DEFB 7Ah
	DEFB 02h
	DEFB 41h
	DEFB 00h
	DEFB 7Ah
	DEFB 02h
	DEFB 3Ah
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 33h
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 3Ah
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 83h
	DEFB 00h
	DEFB 7Ah
	DEFB 02h
	DEFB 41h
	DEFB 00h
	DEFB 7Ah
	DEFB 02h
	DEFB 41h
	DEFB 00h
	DEFB 7Ah
	DEFB 02h
	DEFB 41h
	DEFB 00h
	DEFB 7Ah
	DEFB 02h
	DEFB 3Ah
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 33h
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 3Ah
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 41h
	DEFB 00h
	DEFB 7Ah
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 00h
	DEFB 20h
	DEFB 00h
	DEFB 11h
	DEFB 05h
	DEFB 24h
	DEFB 00h
	DEFB 80h
	DEFB 04h
	DEFB 52h
	DEFB 00h
	DEFB 0FFh
	DEFB 03h
	DEFB 20h
	DEFB 00h
	DEFB 11h
	DEFB 05h
	DEFB 36h
	DEFB 00h
	DEFB 0F7h
	DEFB 02h
	DEFB 93h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 00h
	DEFB 0AFh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
__LABEL1274:
	DEFW 0000h
	DEFB 02h
_tetrisIntroMusic:
	DEFW __LABEL1275
_tetrisIntroMusic.__DATA__.__PTR__:
	DEFW _tetrisIntroMusic.__DATA__
_tetrisIntroMusic.__DATA__:
	DEFB 0CDh
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 0A2h
	DEFB 01h
	DEFB 26h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 48h
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 56h
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 54h
	DEFB 00h
	DEFB 8Ch
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 1Ch
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 19h
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 85h
	DEFB 00h
	DEFB 0C7h
	DEFB 04h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 5Fh
	DEFB 00h
	DEFB 6Ah
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 48h
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 5Fh
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 40h
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 48h
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 85h
	DEFB 00h
	DEFB 0C7h
	DEFB 04h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 63h
	DEFB 00h
	DEFB 6Ah
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 6Bh
	DEFB 00h
	DEFB 0B4h
	DEFB 05h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 35h
	DEFB 00h
	DEFB 0B4h
	DEFB 05h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 36h
	DEFB 00h
	DEFB 11h
	DEFB 05h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 40h
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 39h
	DEFB 00h
	DEFB 0C7h
	DEFB 04h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 3Bh
	DEFB 00h
	DEFB 11h
	DEFB 05h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 30h
	DEFB 00h
	DEFB 0B4h
	DEFB 05h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 63h
	DEFB 00h
	DEFB 6Ah
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 5Fh
	DEFB 00h
	DEFB 6Ah
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 63h
	DEFB 00h
	DEFB 6Ah
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 1Eh
	DEFB 00h
__LABEL1275:
	DEFW 0000h
	DEFB 02h
_tetrisLevelMusic:
	DEFW __LABEL1276
_tetrisLevelMusic.__DATA__.__PTR__:
	DEFW _tetrisLevelMusic.__DATA__
_tetrisLevelMusic.__DATA__:
	DEFB 10h
	DEFB 00h
	DEFB 0CEh
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 0Fh
	DEFB 00h
	DEFB 11h
	DEFB 05h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 0Bh
	DEFB 00h
	DEFB 80h
	DEFB 04h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 8Bh
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 1Ah
	DEFB 00h
	DEFB 11h
	DEFB 05h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 0Eh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 14h
	DEFB 00h
	DEFB 0FFh
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 9Ch
	DEFB 00h
	DEFB 0F7h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 0Eh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 1Bh
	DEFB 00h
	DEFB 0F7h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 18h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 1Eh
	DEFB 00h
	DEFB 0A1h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 1Bh
	DEFB 00h
	DEFB 0F7h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 18h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 00h
	DEFB 0DBh
	DEFB 00h
	DEFB 7Ah
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 19h
	DEFB 00h
__LABEL1276:
	DEFW 0000h
	DEFB 02h
_arkaIntroMusic:
	DEFW __LABEL1277
_arkaIntroMusic.__DATA__.__PTR__:
	DEFW _arkaIntroMusic.__DATA__
_arkaIntroMusic.__DATA__:
	DEFB 08h
	DEFB 00h
	DEFB 6Ah
	DEFB 06h
	DEFB 33h
	DEFB 00h
	DEFB 6Ah
	DEFB 06h
	DEFB 08h
	DEFB 00h
	DEFB 6Ah
	DEFB 06h
	DEFB 11h
	DEFB 00h
	DEFB 6Ah
	DEFB 06h
	DEFB 0Ch
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
	DEFB 4Dh
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 00h
	DEFB 0Fh
	DEFB 00h
	DEFB 52h
	DEFB 11h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 00h
	DEFB 15h
	DEFB 00h
	DEFB 0F2h
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 00h
	DEFB 0Bh
	DEFB 00h
	DEFB 80h
	DEFB 04h
	DEFB 1Eh
	DEFB 00h
	DEFB 80h
	DEFB 04h
	DEFB 0Ch
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
	DEFB 20h
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
	DEFB 0Eh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 1Ch
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 0Ch
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
	DEFB 4Dh
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 00h
	DEFB 0Fh
	DEFB 00h
	DEFB 52h
	DEFB 11h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 00h
	DEFB 15h
	DEFB 00h
	DEFB 0F2h
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 0Fh
	DEFB 00h
	DEFB 52h
	DEFB 11h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 10h
	DEFB 00h
	DEFB 58h
	DEFB 10h
	DEFB 00h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 14h
	DEFB 00h
	DEFB 0B9h
	DEFB 0Dh
	DEFB 08h
	DEFB 00h
	DEFB 6Ah
	DEFB 06h
	DEFB 33h
	DEFB 00h
	DEFB 6Ah
	DEFB 06h
	DEFB 08h
	DEFB 00h
	DEFB 6Ah
	DEFB 06h
	DEFB 11h
	DEFB 00h
	DEFB 6Ah
	DEFB 06h
	DEFB 0Ch
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
	DEFB 4Dh
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 00h
	DEFB 15h
	DEFB 00h
	DEFB 0F2h
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 00h
	DEFB 0Eh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 15h
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 0Ch
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
	DEFB 13h
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
	DEFB 0Bh
	DEFB 00h
	DEFB 80h
	DEFB 04h
	DEFB 11h
	DEFB 00h
	DEFB 80h
	DEFB 04h
	DEFB 0Eh
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 15h
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 0Ch
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
	DEFB 75h
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
__LABEL1277:
	DEFW 0000h
	DEFB 02h
_arkaDeathMusic:
	DEFW __LABEL1278
_arkaDeathMusic.__DATA__.__PTR__:
	DEFW _arkaDeathMusic.__DATA__
_arkaDeathMusic.__DATA__:
	DEFB 3Dh
	DEFB 00h
	DEFB 8Ch
	DEFB 03h
	DEFB 30h
	DEFB 00h
	DEFB 80h
	DEFB 04h
	DEFB 33h
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
	DEFB 26h
	DEFB 00h
	DEFB 0B4h
	DEFB 05h
	DEFB 2Dh
	DEFB 00h
	DEFB 0C7h
	DEFB 04h
	DEFB 24h
	DEFB 00h
	DEFB 0Ch
	DEFB 06h
	DEFB 26h
	DEFB 00h
	DEFB 0B4h
	DEFB 05h
	DEFB 1Eh
	DEFB 00h
	DEFB 37h
	DEFB 07h
	DEFB 19h
	DEFB 00h
	DEFB 9Ah
	DEFB 08h
	DEFB 19h
	DEFB 00h
	DEFB 9Ah
	DEFB 08h
	DEFB 19h
	DEFB 00h
	DEFB 9Ah
	DEFB 08h
	DEFB 19h
	DEFB 00h
	DEFB 9Ah
	DEFB 08h
__LABEL1278:
	DEFW 0000h
	DEFB 02h
_raceIntroMusic:
	DEFW __LABEL1279
_raceIntroMusic.__DATA__.__PTR__:
	DEFW _raceIntroMusic.__DATA__
_raceIntroMusic.__DATA__:
	DEFB 0Dh
	DEFB 00h
	DEFB 9Fh
	DEFB 14h
	DEFB 0Dh
	DEFB 00h
	DEFB 9Fh
	DEFB 14h
	DEFB 1Bh
	DEFB 00h
	DEFB 40h
	DEFB 0Ah
	DEFB 0Dh
	DEFB 00h
	DEFB 9Fh
	DEFB 14h
	DEFB 0Dh
	DEFB 00h
	DEFB 9Fh
	DEFB 14h
	DEFB 18h
	DEFB 00h
	DEFB 85h
	DEFB 0Bh
	DEFB 0Dh
	DEFB 00h
	DEFB 9Fh
	DEFB 14h
	DEFB 1Bh
	DEFB 00h
	DEFB 40h
	DEFB 0Ah
	DEFB 0Dh
	DEFB 00h
	DEFB 9Fh
	DEFB 14h
	DEFB 0Dh
	DEFB 00h
	DEFB 9Fh
	DEFB 14h
	DEFB 18h
	DEFB 00h
	DEFB 85h
	DEFB 0Bh
	DEFB 0Dh
	DEFB 00h
	DEFB 9Fh
	DEFB 14h
	DEFB 16h
	DEFB 00h
	DEFB 37h
	DEFB 0Ch
	DEFB 0Dh
	DEFB 00h
	DEFB 9Fh
	DEFB 14h
	DEFB 12h
	DEFB 00h
	DEFB 6Bh
	DEFB 0Fh
	DEFB 14h
	DEFB 00h
	DEFB 0B9h
	DEFB 0Dh
	DEFB 1Ch
	DEFB 00h
	DEFB 9Fh
	DEFB 14h
	DEFB 00h
	DEFB 00h
	DEFB 12h
	DEFB 00h
	DEFB 1Ch
	DEFB 00h
	DEFB 9Fh
	DEFB 14h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 00h
	DEFB 38h
	DEFB 00h
	DEFB 40h
	DEFB 0Ah
__LABEL1279:
	DEFW 0000h
	DEFB 02h
_raceLevelMusic:
	DEFW __LABEL1280
_raceLevelMusic.__DATA__.__PTR__:
	DEFW _raceLevelMusic.__DATA__
_raceLevelMusic.__DATA__:
	DEFB 4Ch
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 8Ah
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 7Bh
	DEFB 00h
	DEFB 8Ch
	DEFB 03h
	DEFB 74h
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 67h
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
	DEFB 2Dh
	DEFB 00h
	DEFB 0C7h
	DEFB 04h
	DEFB 32h
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
__LABEL1280:
	DEFW 0000h
	DEFB 02h
_snakeIntroMusic:
	DEFW __LABEL1281
_snakeIntroMusic.__DATA__.__PTR__:
	DEFW _snakeIntroMusic.__DATA__
_snakeIntroMusic.__DATA__:
	DEFB 27h
	DEFB 00h
	DEFB 0F2h
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 0Fh
	DEFB 00h
	DEFB 36h
	DEFB 00h
	DEFB 40h
	DEFB 0Ah
	DEFB 00h
	DEFB 00h
	DEFB 0Dh
	DEFB 00h
	DEFB 3Dh
	DEFB 00h
	DEFB 9Ah
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 00h
	DEFB 44h
	DEFB 00h
	DEFB 0CEh
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 09h
	DEFB 00h
	DEFB 3Ch
	DEFB 00h
	DEFB 6Ah
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 03h
	DEFB 00h
	DEFB 3Ah
	DEFB 00h
	DEFB 0F2h
	DEFB 0Ch
	DEFB 00h
	DEFB 00h
	DEFB 08h
	DEFB 00h
	DEFB 4Fh
	DEFB 00h
	DEFB 40h
	DEFB 0Ah
	DEFB 00h
	DEFB 00h
	DEFB 06h
	DEFB 00h
	DEFB 43h
	DEFB 00h
	DEFB 9Ah
	DEFB 08h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 00h
	DEFB 3Bh
	DEFB 00h
	DEFB 0CEh
	DEFB 06h
	DEFB 00h
	DEFB 00h
	DEFB 0Ah
	DEFB 00h
	DEFB 42h
	DEFB 00h
	DEFB 0B4h
	DEFB 05h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 00h
__LABEL1281:
	DEFW 0000h
	DEFB 02h
_snakeLevelMusic:
	DEFW __LABEL1282
_snakeLevelMusic.__DATA__.__PTR__:
	DEFW _snakeLevelMusic.__DATA__
_snakeLevelMusic.__DATA__:
	DEFB 4Ch
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 8Ah
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 7Bh
	DEFB 00h
	DEFB 8Ch
	DEFB 03h
	DEFB 74h
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 67h
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
	DEFB 2Dh
	DEFB 00h
	DEFB 0C7h
	DEFB 04h
	DEFB 32h
	DEFB 00h
	DEFB 3Eh
	DEFB 04h
__LABEL1282:
	DEFW 0000h
	DEFB 02h
_destroyerIntroMusic:
	DEFW __LABEL1283
_destroyerIntroMusic.__DATA__.__PTR__:
	DEFW _destroyerIntroMusic.__DATA__
_destroyerIntroMusic.__DATA__:
	DEFB 8Bh
	DEFB 01h
	DEFB 54h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 00h
	DEFB 4Ah
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 63h
	DEFB 00h
	DEFB 54h
	DEFB 02h
	DEFB 7Dh
	DEFB 00h
	DEFB 0D3h
	DEFB 01h
	DEFB 95h
	DEFB 00h
	DEFB 84h
	DEFB 01h
	DEFB 7Dh
	DEFB 00h
	DEFB 0D3h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 00h
	DEFB 63h
	DEFB 00h
	DEFB 54h
	DEFB 02h
	DEFB 6Fh
	DEFB 00h
	DEFB 10h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 00h
	DEFB 6Fh
	DEFB 00h
	DEFB 10h
	DEFB 02h
	DEFB 6Fh
	DEFB 00h
	DEFB 10h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 00h
	DEFB 0FBh
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 6Fh
	DEFB 00h
	DEFB 10h
	DEFB 02h
	DEFB 63h
	DEFB 00h
	DEFB 54h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 00h
	DEFB 5Dh
	DEFB 00h
	DEFB 7Ah
	DEFB 02h
	DEFB 8Bh
	DEFB 01h
	DEFB 54h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 00h
	DEFB 4Ah
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 63h
	DEFB 00h
	DEFB 54h
	DEFB 02h
	DEFB 7Dh
	DEFB 00h
	DEFB 0D3h
	DEFB 01h
	DEFB 95h
	DEFB 00h
	DEFB 84h
	DEFB 01h
	DEFB 7Dh
	DEFB 00h
	DEFB 0D3h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 00h
	DEFB 63h
	DEFB 00h
	DEFB 54h
	DEFB 02h
	DEFB 69h
	DEFB 00h
	DEFB 31h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 00h
	DEFB 69h
	DEFB 00h
	DEFB 31h
	DEFB 02h
	DEFB 69h
	DEFB 00h
	DEFB 31h
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 00h
	DEFB 0B9h
	DEFB 02h
	DEFB 54h
	DEFB 02h
__LABEL1283:
	DEFW 0000h
	DEFB 02h
_destroyerLevelMusic:
	DEFW __LABEL1284
_destroyerLevelMusic.__DATA__.__PTR__:
	DEFW _destroyerLevelMusic.__DATA__
_destroyerLevelMusic.__DATA__:
	DEFB 90h
	DEFB 01h
	DEFB 11h
	DEFB 05h
	DEFB 4Ah
	DEFB 00h
	DEFB 0F7h
	DEFB 02h
	DEFB 42h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 3Ah
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 42h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 00h
	DEFB 42h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 0Ah
	DEFB 01h
	DEFB 7Ah
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 00h
	DEFB 84h
	DEFB 00h
	DEFB 9Dh
	DEFB 01h
	DEFB 84h
	DEFB 00h
	DEFB 9Dh
	DEFB 01h
	DEFB 15h
	DEFB 02h
	DEFB 2Eh
	DEFB 01h
	DEFB 90h
	DEFB 01h
	DEFB 11h
	DEFB 05h
	DEFB 4Ah
	DEFB 00h
	DEFB 0F7h
	DEFB 02h
	DEFB 42h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 3Ah
	DEFB 00h
	DEFB 0C4h
	DEFB 03h
	DEFB 42h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 00h
	DEFB 42h
	DEFB 00h
	DEFB 58h
	DEFB 03h
	DEFB 0Ah
	DEFB 01h
	DEFB 7Ah
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 00h
	DEFB 84h
	DEFB 00h
	DEFB 9Dh
	DEFB 01h
	DEFB 84h
	DEFB 00h
	DEFB 9Dh
	DEFB 01h
	DEFB 84h
	DEFB 00h
	DEFB 9Dh
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 07h
	DEFB 00h
	DEFB 0B1h
	DEFB 00h
	DEFB 2Eh
	DEFB 01h
	DEFB 33h
	DEFB 03h
	DEFB 2Eh
	DEFB 01h
__LABEL1284:
	DEFW 0000h
	DEFB 02h
_ghostIntroMusic:
	DEFW __LABEL1285
_ghostIntroMusic.__DATA__.__PTR__:
	DEFW _ghostIntroMusic.__DATA__
_ghostIntroMusic.__DATA__:
	DEFB 37h
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 37h
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 46h
	DEFB 00h
	DEFB 7Ah
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 00h
	DEFB 6Fh
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 7Ah
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 63h
	DEFB 00h
	DEFB 8Ch
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 2Ah
	DEFB 00h
	DEFB 37h
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 37h
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 35h
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 37h
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 63h
	DEFB 00h
	DEFB 8Ch
	DEFB 03h
	DEFB 6Dh
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 20h
	DEFB 00h
	DEFB 37h
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 35h
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 46h
	DEFB 00h
	DEFB 7Ah
	DEFB 02h
	DEFB 00h
	DEFB 00h
	DEFB 05h
	DEFB 00h
	DEFB 6Fh
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 7Ah
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 63h
	DEFB 00h
	DEFB 8Ch
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 2Ah
	DEFB 00h
	DEFB 37h
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 35h
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 37h
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 37h
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 61h
	DEFB 00h
	DEFB 8Ch
	DEFB 03h
	DEFB 7Dh
	DEFB 00h
	DEFB 0CBh
	DEFB 02h
	DEFB 6Dh
	DEFB 00h
	DEFB 26h
	DEFB 03h
__LABEL1285:
	DEFW 0000h
	DEFB 02h
_ghostScarySound:
	DEFW __LABEL1286
_ghostScarySound.__DATA__.__PTR__:
	DEFW _ghostScarySound.__DATA__
_ghostScarySound.__DATA__:
	DEFB 05h
	DEFB 00h
	DEFB 6Ch
	DEFB 01h
	DEFB 05h
	DEFB 00h
	DEFB 56h
	DEFB 01h
	DEFB 05h
	DEFB 00h
	DEFB 41h
	DEFB 01h
	DEFB 06h
	DEFB 00h
	DEFB 2Eh
	DEFB 01h
	DEFB 06h
	DEFB 00h
	DEFB 1Bh
	DEFB 01h
	DEFB 06h
	DEFB 00h
	DEFB 09h
	DEFB 01h
	DEFB 06h
	DEFB 00h
	DEFB 1Bh
	DEFB 01h
	DEFB 06h
	DEFB 00h
	DEFB 2Eh
	DEFB 01h
	DEFB 05h
	DEFB 00h
	DEFB 41h
	DEFB 01h
	DEFB 05h
	DEFB 00h
	DEFB 56h
	DEFB 01h
	DEFB 05h
	DEFB 00h
	DEFB 6Ch
	DEFB 01h
	DEFB 05h
	DEFB 00h
	DEFB 6Ch
	DEFB 01h
	DEFB 05h
	DEFB 00h
	DEFB 56h
	DEFB 01h
	DEFB 05h
	DEFB 00h
	DEFB 41h
	DEFB 01h
	DEFB 06h
	DEFB 00h
	DEFB 2Eh
	DEFB 01h
	DEFB 06h
	DEFB 00h
	DEFB 1Bh
	DEFB 01h
	DEFB 06h
	DEFB 00h
	DEFB 09h
	DEFB 01h
	DEFB 06h
	DEFB 00h
	DEFB 1Bh
	DEFB 01h
	DEFB 06h
	DEFB 00h
	DEFB 2Eh
	DEFB 01h
	DEFB 05h
	DEFB 00h
	DEFB 41h
	DEFB 01h
	DEFB 05h
	DEFB 00h
	DEFB 56h
	DEFB 01h
	DEFB 05h
	DEFB 00h
	DEFB 6Ch
	DEFB 01h
	DEFB 05h
	DEFB 00h
	DEFB 6Ch
	DEFB 01h
	DEFB 05h
	DEFB 00h
	DEFB 56h
	DEFB 01h
	DEFB 05h
	DEFB 00h
	DEFB 41h
	DEFB 01h
	DEFB 06h
	DEFB 00h
	DEFB 2Eh
	DEFB 01h
	DEFB 06h
	DEFB 00h
	DEFB 1Bh
	DEFB 01h
	DEFB 06h
	DEFB 00h
	DEFB 09h
	DEFB 01h
	DEFB 06h
	DEFB 00h
	DEFB 1Bh
	DEFB 01h
	DEFB 06h
	DEFB 00h
	DEFB 2Eh
	DEFB 01h
	DEFB 05h
	DEFB 00h
	DEFB 41h
	DEFB 01h
	DEFB 05h
	DEFB 00h
	DEFB 56h
	DEFB 01h
	DEFB 05h
	DEFB 00h
	DEFB 6Ch
	DEFB 01h
__LABEL1286:
	DEFW 0000h
	DEFB 02h
_ghostLevelMusic:
	DEFW __LABEL1287
_ghostLevelMusic.__DATA__.__PTR__:
	DEFW _ghostLevelMusic.__DATA__
_ghostLevelMusic.__DATA__:
	DEFB 3Fh
	DEFB 00h
	DEFB 0A1h
	DEFB 02h
	DEFB 42h
	DEFB 00h
	DEFB 0A1h
	DEFB 02h
	DEFB 42h
	DEFB 00h
	DEFB 0A1h
	DEFB 02h
	DEFB 42h
	DEFB 00h
	DEFB 0A1h
	DEFB 02h
	DEFB 6Dh
	DEFB 00h
	DEFB 26h
	DEFB 03h
	DEFB 00h
	DEFB 00h
	DEFB 20h
	DEFB 00h
	DEFB 4Bh
	DEFB 01h
	DEFB 10h
	DEFB 02h
	DEFB 0A4h
	DEFB 00h
	DEFB 10h
	DEFB 02h
	DEFB 6Fh
	DEFB 00h
	DEFB 26h
	DEFB 03h
__LABEL1287:
	DEFW 0000h
	DEFB 02h
_screenCells:
	DEFW __LABEL1288
_screenCells.__DATA__.__PTR__:
	DEFW _screenCells.__DATA__
_screenCells.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1288:
	DEFW 0001h
	DEFW 0014h
	DEFB 01h
_workingCells:
	DEFW __LABEL1289
_workingCells.__DATA__.__PTR__:
	DEFW _workingCells.__DATA__
_workingCells.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1289:
	DEFW 0001h
	DEFW 0014h
	DEFB 01h
_ops:
	DEFW __LABEL1290
_ops.__DATA__.__PTR__:
	DEFW _ops.__DATA__
_ops.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1290:
	DEFW 0001h
	DEFW 00C8h
	DEFB 01h
_screenSymbol:
	DEFW __LABEL1291
_screenSymbol.__DATA__.__PTR__:
	DEFW _screenSymbol.__DATA__
_screenSymbol.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1291:
	DEFW 0001h
	DEFW 0002h
	DEFB 01h
_workingSymbol:
	DEFW __LABEL1292
_workingSymbol.__DATA__.__PTR__:
	DEFW _workingSymbol.__DATA__
_workingSymbol.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1292:
	DEFW 0001h
	DEFW 0002h
	DEFB 01h
_sprites:
	DEFW __LABEL1293
_sprites.__DATA__.__PTR__:
	DEFW _sprites.__DATA__
_sprites.__DATA__:
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 00h
	DEFB 7Fh
	DEFB 41h
	DEFB 5Bh
	DEFB 5Bh
	DEFB 43h
	DEFB 5Fh
	DEFB 7Fh
	DEFB 00h
	DEFB 07h
	DEFB 07h
	DEFB 05h
	DEFB 05h
	DEFB 07h
	DEFB 07h
	DEFB 00h
	DEFB 00h
	DEFB 70h
	DEFB 70h
	DEFB 50h
	DEFB 50h
	DEFB 70h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 77h
	DEFB 77h
	DEFB 55h
	DEFB 55h
	DEFB 77h
	DEFB 77h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 77h
	DEFB 44h
	DEFB 24h
	DEFB 14h
	DEFB 77h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 77h
	DEFB 55h
	DEFB 56h
	DEFB 55h
	DEFB 75h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 60h
	DEFB 40h
	DEFB 60h
	DEFB 40h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 36h
	DEFB 45h
	DEFB 26h
	DEFB 14h
	DEFB 64h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 77h
	DEFB 44h
	DEFB 66h
	DEFB 44h
	DEFB 77h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0C0h
	DEFB 0A0h
	DEFB 0A0h
	DEFB 0A0h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 47h
	DEFB 44h
	DEFB 46h
	DEFB 44h
	DEFB 77h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 57h
	DEFB 54h
	DEFB 56h
	DEFB 54h
	DEFB 27h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 97h
	DEFB 0D4h
	DEFB 0B6h
	DEFB 94h
	DEFB 97h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 57h
	DEFB 22h
	DEFB 22h
	DEFB 22h
	DEFB 52h
	DEFB 00h
	DEFB 0FFh
	DEFB 0C7h
	DEFB 0BBh
	DEFB 0BBh
	DEFB 0BBh
	DEFB 0C7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 55h
	DEFB 0AAh
	DEFB 0FFh
	DEFB 0AAh
	DEFB 55h
	DEFB 0FFh
	DEFB 00h
	DEFB 5Dh
	DEFB 6Bh
	DEFB 5Dh
	DEFB 6Bh
	DEFB 5Dh
	DEFB 6Bh
	DEFB 5Dh
	DEFB 6Bh
	DEFB 00h
	DEFB 0FFh
	DEFB 0AAh
	DEFB 55h
	DEFB 0FFh
	DEFB 55h
	DEFB 0AAh
	DEFB 0FFh
	DEFB 0D6h
	DEFB 0BAh
	DEFB 0D6h
	DEFB 0BAh
	DEFB 0D6h
	DEFB 0BAh
	DEFB 0D6h
	DEFB 0BAh
	DEFB 00h
	DEFB 36h
	DEFB 45h
	DEFB 25h
	DEFB 16h
	DEFB 14h
	DEFB 64h
	DEFB 00h
__LABEL1293:
	DEFW 0001h
	DEFW 0008h
	DEFB 01h
	_deadPic.__DATA__ EQU 24616
_deadPic:
	DEFW __LABEL1294
_deadPic.__DATA__.__PTR__:
	DEFW 24616
__LABEL1294:
	DEFW 0000h
	DEFB 02h
	_winPic.__DATA__ EQU 24656
_winPic:
	DEFW __LABEL1295
_winPic.__DATA__.__PTR__:
	DEFW 24656
__LABEL1295:
	DEFW 0000h
	DEFB 02h
	_introScreen.__DATA__ EQU 24576
_introScreen:
	DEFW __LABEL1296
_introScreen.__DATA__.__PTR__:
	DEFW 24576
__LABEL1296:
	DEFW 0000h
	DEFB 02h
_tetrisPieces:
	DEFW __LABEL1297
_tetrisPieces.__DATA__.__PTR__:
	DEFW _tetrisPieces.__DATA__
_tetrisPieces.__DATA__:
	DEFB 0F8h
	DEFB 08h
	DEFB 08h
	DEFB 08h
	DEFB 0F8h
	DEFB 08h
	DEFB 08h
	DEFB 08h
	DEFB 0CCh
	DEFB 0CCh
	DEFB 00h
	DEFB 00h
	DEFB 0CCh
	DEFB 0CCh
	DEFB 00h
	DEFB 00h
	DEFB 8Ch
	DEFB 0E8h
	DEFB 08h
	DEFB 00h
	DEFB 0E4h
	DEFB 24h
	DEFB 0Ch
	DEFB 00h
	DEFB 28h
	DEFB 0E8h
	DEFB 0Ch
	DEFB 00h
	DEFB 0ECh
	DEFB 84h
	DEFB 04h
	DEFB 00h
	DEFB 68h
	DEFB 0CCh
	DEFB 04h
	DEFB 00h
	DEFB 68h
	DEFB 0CCh
	DEFB 04h
	DEFB 00h
	DEFB 0C4h
	DEFB 6Ch
	DEFB 08h
	DEFB 00h
	DEFB 0C4h
	DEFB 6Ch
	DEFB 08h
	DEFB 00h
	DEFB 48h
	DEFB 0ECh
	DEFB 08h
	DEFB 00h
	DEFB 0E4h
	DEFB 4Ch
	DEFB 04h
	DEFB 00h
__LABEL1297:
	DEFW 0002h
	DEFW 0002h
	DEFW 0004h
	DEFB 01h
	_tetrisScreens.__DATA__ EQU 24696
_tetrisScreens:
	DEFW __LABEL1298
_tetrisScreens.__DATA__.__PTR__:
	DEFW 24696
__LABEL1298:
	DEFW 0001h
	DEFW 000Ah
	DEFB 02h
_expandedPiece:
	DEFW __LABEL1299
_expandedPiece.__DATA__.__PTR__:
	DEFW _expandedPiece.__DATA__
_expandedPiece.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1299:
	DEFW 0002h
	DEFW 0004h
	DEFW 0004h
	DEFB 01h
_expandedSize:
	DEFW __LABEL1300
_expandedSize.__DATA__.__PTR__:
	DEFW _expandedSize.__DATA__
_expandedSize.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1300:
	DEFW 0001h
	DEFW 0002h
	DEFB 01h
	_arkaScreens.__DATA__ EQU 24896
_arkaScreens:
	DEFW __LABEL1301
_arkaScreens.__DATA__.__PTR__:
	DEFW 24896
__LABEL1301:
	DEFW 0001h
	DEFW 000Ch
	DEFB 02h
	_snakeScreens.__DATA__ EQU 25136
_snakeScreens:
	DEFW __LABEL1302
_snakeScreens.__DATA__.__PTR__:
	DEFW 25136
__LABEL1302:
	DEFW 0001h
	DEFW 0014h
	DEFB 02h
	_bigGhost.__DATA__ EQU 25536
_bigGhost:
	DEFW __LABEL1303
_bigGhost.__DATA__.__PTR__:
	DEFW 25536
__LABEL1303:
	DEFW 0000h
	DEFB 02h
__LABEL1181:
	DEFB 0FFh
__LABEL1182:
	DEFB 01h
__LABEL1187:
	DEFB 04h
__LABEL1213:
	DEFB 01h
__LABEL1214:
	DEFB 14h
__LABEL1215:
	DEFB 03h
__LABEL1216:
	DEFB 04h
__LABEL1239:
	DEFB 04h
__LABEL1240:
	DEFB 01h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 01h
__LABEL1241:
	DEFB 01h
__LABEL1245:
	DEFB 04h
__LABEL1248:
	DEFB 04h
__LABEL1261:
	DEFB 01h
__LABEL1262:
	DEFB 01h
__LABEL1263:
	DEFB 01h
__LABEL1264:
	DEFB 01h
__LABEL1265:
	DEFB 01h
__LABEL1266:
	DEFB 01h
__LABEL1267:
	DEFB 01h
__LABEL1268:
	DEFB 01h
__LABEL1269:
	DEFB 01h
__LABEL1270:
	DEFB 01h
__LABEL1271:
	DEFB 01h
__LABEL1272:
	DEFB 01h
ZXBASIC_MEM_HEAP:
	; Defines DATA END
ZXBASIC_USER_DATA_END EQU ZXBASIC_MEM_HEAP + ZXBASIC_HEAP_SIZE
	; Defines USER DATA Length in bytes
ZXBASIC_USER_DATA_LEN EQU ZXBASIC_USER_DATA_END - ZXBASIC_USER_DATA
	END
