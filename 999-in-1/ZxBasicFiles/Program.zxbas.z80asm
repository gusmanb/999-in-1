	.zxbasic
	org 32768
	; Defines HEAP SIZE
ZXBASIC_HEAP_SIZE EQU 128
__START_PROGRAM:
	di
	push ix
	push iy
	exx
	push hl
	exx
	ld hl, 0
	add hl, sp
	ld (__CALL_BACK__), hl
	ei
	call __MEM_INIT
	call __PRINT_INIT
__LABEL__start:
#line 1
		.org 24576
introScreenData:
		DEFW 0000h, 018Ch, 0252h, 0252h, 01CEh, 0042h, 039Ch, 0000h, 00C6h, 0129h, 00E7h, 0021h, 01CEh, 0000h, 0292h, 02D6h, 02B2h, 0292h, 0007h, 0000h
deathScreenData:
		DEFW 00000h, 00078h, 00084h, 00084h, 00102h, 0014Ah, 00102h, 00132h, 00084h, 00048h, 0017Ah, 00303h, 00084h, 00048h, 00030h, 00030h, 00048h, 00084h, 00303h, 00102h
winScreenData:
		DEFW 00000h, 00000h, 00000h, 000FCh, 003FFh, 002FDh, 002FDh, 002FDh, 001FEh, 00078h, 00030h, 00030h, 00030h, 00030h, 00030h, 00078h, 000FCh, 00000h, 00000h, 00000h
tetrisScreenData:
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 01FEh, 01FEh, 00CCh, 0124h, 02AAh
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 02AAh, 0349h, 0224h, 01FEh, 019Ah
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 02AAh, 00CCh, 0224h, 02AAh, 0124h
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 0349h, 019Ah, 0224h, 0124h, 0048h
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 0155h, 01B6h, 014Ah, 0224h, 019Ah
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 018Ch, 03B7h, 0349h, 02CDh, 01CEh
		DEFW 0000h, 0000h, 0000h, 0000h, 02AAh, 02AAh, 01DFh, 02AAh, 01DFh, 02AAh
		DEFW 0000h, 0000h, 02B5h, 0333h, 017Ah, 015Ah, 02AAh, 036Dh, 02DBh, 037Bh
		DEFW 0000h, 0084h, 02AAh, 0155h, 037Bh, 00CCh, 01FEh, 02AAh, 00CCh, 037Bh
arkaScreenData:
		DEFW 0000h, 0000h, 03FFh, 03FFh, 03FFh, 03FFh, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h
		DEFW 0000h, 0200h, 0300h, 0380h, 03C0h, 03E0h, 03F0h, 03F8h, 03FCh, 03FEh, 03FFh, 0000h
		DEFW 03FFh, 03FFh, 0000h, 0000h, 03FFh, 03FFh, 0000h, 0000h, 03FFh, 03FFh, 0000h, 0000h
		DEFW 0000h, 03CFh, 03CFh, 03CFh, 03CFh, 03CFh, 03CFh, 03CFh, 03CFh, 03CFh, 03CFh, 0000h
		DEFW 0084h, 0048h, 0048h, 00FCh, 01BAh, 01BAh, 03FFh, 02FDh, 0285h, 0249h, 0048h, 0000h
		DEFW 0000h, 037Bh, 03FFh, 03FFh, 037Bh, 03FFh, 03FFh, 037Bh, 03FFh, 03FFh, 037Bh, 0000h
		DEFW 0030h, 0078h, 00FCh, 01FEh, 03FFh, 03FFh, 01FEh, 00FCh, 0078h, 0030h, 0000h, 0000h
		DEFW 0030h, 0078h, 01FEh, 03FFh, 03FFh, 02B5h, 0030h, 0030h, 0330h, 0360h, 00C0h, 0000h
		DEFW 0333h, 00CCh, 0333h, 00CCh, 03FFh, 03FFh, 00CCh, 0333h, 00CCh, 0333h, 0000h, 0000h
		DEFW 03FFh, 0279h, 0279h, 0279h, 03FFh, 03FFh, 03FFh, 03FFh, 0279h, 0279h, 0279h, 03FFh
snakeScreenData:
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h
		DEFW 0000h, 0000h, 0000h, 0000h, 00C0h, 0040h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0008h, 000Ch, 0000h, 0000h, 0000h, 0000h
		DEFW 0000h, 0000h, 0000h, 0006h, 0000h, 01C0h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 000Eh, 0000h, 0180h, 0000h, 0000h, 0000h
		DEFW 0000h, 000Ch, 0000h, 0060h, 0000h, 0300h, 0000h, 0000h, 0000h, 0000h, 0201h, 0000h, 0000h, 0000h, 0003h, 0000h, 0018h, 0000h, 00C0h, 0000h
		DEFW 0070h, 0000h, 0000h, 0000h, 0000h, 0285h, 0285h, 0201h, 0201h, 0201h, 0201h, 0201h, 0201h, 0285h, 0285h, 0000h, 0000h, 0000h, 0000h, 0070h
		DEFW 0303h, 0303h, 0000h, 0000h, 00C0h, 00CCh, 000Ch, 0000h, 0000h, 0303h, 0303h, 0000h, 0000h, 000Ch, 00CCh, 00C0h, 0000h, 0000h, 0303h, 0303h
		DEFW 0000h, 00FCh, 00FCh, 0030h, 0030h, 00CCh, 00CCh, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 00CCh, 00CCh, 0030h, 0030h, 00FCh, 00FCh, 0000h
		DEFW 0303h, 0000h, 00FCh, 0000h, 0333h, 0000h, 00CCh, 0000h, 0000h, 0084h, 0084h, 0000h, 0000h, 00CCh, 0000h, 0333h, 0000h, 00FCh, 0000h, 0303h
		DEFW 0231h, 0000h, 0048h, 0000h, 0333h, 0000h, 0000h, 0000h, 0000h, 0084h, 0084h, 0000h, 0000h, 0000h, 0000h, 0333h, 0000h, 0048h, 0000h, 0231h
		DEFW 0387h, 0000h, 0084h, 0201h, 0231h, 0000h, 0084h, 0084h, 0285h, 0285h, 0285h, 0285h, 0084h, 0084h, 0000h, 0231h, 0201h, 0084h, 0000h, 0387h
bigGhostData:
		DEFW 0078h, 01FEh, 017Ah, 03B7h, 03FFh, 0333h, 0279h, 0333h, 03FFh, 0333h, 0201h, 0201h, 0201h, 034Bh, 03FFh, 03FFh, 03FFh, 03FFh, 02F7h, 0262h
deathMusicData:
		DEFW 0033h, 02A1h, 0030h, 02CBh, 002Dh, 02F7h, 002Ah, 0326h, 0030h, 02CBh, 002Dh, 02F7h, 002Ah, 0326h, 0028h, 0358h, 002Dh, 02F7h, 002Ah, 0326h, 0028h, 0358h, 0026h, 038Ch, 002Ah, 0326h, 0028h, 0358h, 0026h, 038Ch, 0024h, 03C4h, 0028h, 0358h, 0026h, 038Ch, 0024h, 03C4h, 0021h, 03FFh, 001Eh, 0480h, 001Ch, 04C7h, 0149h, 0511h
winMusicData:
		DEFW 0057h, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 0020h, 0511h, 001Ch, 05B4h, 0020h, 0511h, 0057h, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 0030h, 0358h, 0036h, 02F7h, 0030h, 0358h, 0057h, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 0030h, 0358h, 002Bh, 03C4h, 0029h, 03FFh, 002Bh, 03C4h, 0030h, 0358h, 0036h, 02F7h, 0030h, 0358h, 0036h, 02F7h, 0030h, 0358h, 0000h, 0005h, 002Eh, 038Ch, 0030h, 0358h, 0074h, 02CBh, 003Ah, 02CBh, 003Ah, 02CBh, 003Ah, 02CBh, 002Bh, 03C4h, 0026h, 043Eh, 002Bh, 03C4h, 0074h, 02CBh, 003Ah, 02CBh, 003Ah, 02CBh, 003Ah, 02CBh, 0041h, 027Ah, 0049h, 0231h, 0041h, 027Ah, 0074h, 02CBh, 003Ah, 02CBh, 0036h, 02F7h, 0062h, 0358h, 0030h, 0358h, 002Bh, 03C4h, 0029h, 03FFh, 002Bh, 03C4h, 0029h, 03FFh, 002Bh, 03C4h, 0029h, 03FFh, 0000h, 0005h, 0024h, 0480h, 0029h, 03FFh, 0057h, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 0020h, 0511h, 001Ch, 05B4h, 0020h, 0511h, 0057h, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 0030h, 0358h, 0036h, 02F7h, 0030h, 0358h, 0057h, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 0030h, 0358h, 002Bh, 03C4h, 0029h, 03FFh, 002Bh, 03C4h, 0030h, 0358h, 0036h, 02F7h, 0030h, 0358h, 0036h, 02F7h, 0030h, 0358h, 0000h, 0005h, 002Eh, 038Ch, 0030h, 0358h, 0083h, 027Ah, 0041h, 027Ah, 0041h, 027Ah, 0041h, 027Ah, 003Ah, 02CBh, 0033h, 0326h, 003Ah, 02CBh, 0083h, 027Ah, 0041h, 027Ah, 0041h, 027Ah, 0041h, 027Ah, 003Ah, 02CBh, 0033h, 0326h, 003Ah, 02CBh, 0041h, 027Ah, 0000h, 0005h, 0020h, 0511h, 0024h, 0480h, 0052h, 03FFh, 0020h, 0511h, 0036h, 02F7h, 0093h, 0358h, 0000h, 0005h, 00AFh, 03C4h
tetrisIntroMusicData:
		DEFW 00CDh, 02CBh, 0000h, 0002h, 01A2h, 0326h, 0000h, 0002h, 0048h, 03C4h, 0000h, 0002h, 0056h, 0326h, 0000h, 0002h, 0054h, 038Ch, 0000h, 0002h, 001Ch, 03C4h, 0000h, 0002h, 0019h, 043Eh, 0000h, 0002h, 0085h, 04C7h, 0000h, 0002h, 005Fh, 066Ah, 0000h, 0002h, 0048h, 03C4h, 0000h, 0002h, 005Fh, 0326h, 0000h, 0002h, 0040h, 043Eh, 0000h, 0002h, 0048h, 03C4h, 0000h, 0002h, 0085h, 04C7h, 0000h, 0002h, 0063h, 066Ah, 0000h, 0002h, 006Bh, 05B4h, 0000h, 0002h, 0035h, 05B4h, 0000h, 0002h, 0036h, 0511h, 0000h, 0002h, 0040h, 043Eh, 0000h, 0002h, 0039h, 04C7h, 0000h, 0002h, 003Bh, 0511h, 0000h, 0002h, 0030h, 05B4h, 0000h, 0002h, 0063h, 066Ah, 0000h, 0002h, 005Fh, 066Ah, 0000h, 0002h, 0063h, 066Ah, 0000h, 001Eh
tetrisLevelMusicData:
		DEFW 0010h, 06CEh, 0000h, 0002h, 000Fh, 0511h, 0000h, 0003h, 000Bh, 0480h, 0000h, 0003h, 008Bh, 0358h, 0000h, 0002h, 001Ah, 0511h, 0000h, 0002h, 000Eh, 03C4h, 0000h, 0003h, 0014h, 03FFh, 0000h, 0003h, 009Ch, 02F7h, 0000h, 0002h, 000Eh, 03C4h, 0000h, 0003h, 001Bh, 02F7h, 0000h, 0003h, 0018h, 0358h, 0000h, 0003h, 001Eh, 02A1h, 0000h, 0003h, 001Bh, 02F7h, 0000h, 0003h, 0018h, 0358h, 0000h, 0004h, 00DBh, 027Ah, 0000h, 0019h
arkaIntroMusicData:
		DEFW 0008h, 066Ah, 0033h, 066Ah, 0008h, 066Ah, 0011h, 066Ah, 000Ch, 043Eh, 004Dh, 043Eh, 0000h, 000Ah, 000Fh, 1152h, 0000h, 000Ah, 0015h, 0CF2h, 0000h, 000Ah, 000Bh, 0480h, 001Eh, 0480h, 000Ch, 043Eh, 0020h, 043Eh, 000Eh, 03C4h, 001Ch, 03C4h, 000Ch, 043Eh, 004Dh, 043Eh, 0000h, 000Ah, 000Fh, 1152h, 0000h, 000Ah, 0015h, 0CF2h, 0000h, 0002h, 000Fh, 1152h, 0000h, 0002h, 0010h, 1058h, 0000h, 0002h, 0014h, 0DB9h, 0008h, 066Ah, 0033h, 066Ah, 0008h, 066Ah, 0011h, 066Ah, 000Ch, 043Eh, 004Dh, 043Eh, 0000h, 000Ah, 0015h, 0CF2h, 0000h, 000Ah, 000Eh, 03C4h, 0015h, 03C4h, 000Ch, 043Eh, 0013h, 043Eh, 000Bh, 0480h, 0011h, 0480h, 000Eh, 03C4h, 0015h, 03C4h, 000Ch, 043Eh, 0075h, 043Eh
arkaDeathMusicData:
		DEFW 003Dh, 038Ch, 0030h, 0480h, 0033h, 043Eh, 0026h, 05B4h, 002Dh, 04C7h, 0024h, 060Ch, 0026h, 05B4h, 001Eh, 0737h, 0019h, 089Ah, 0019h, 089Ah, 0019h, 089Ah, 0019h, 089Ah
raceIntroMusicData:
		DEFW 000Dh, 149Fh, 000Dh, 149Fh, 001Bh, 0A40h, 000Dh, 149Fh, 000Dh, 149Fh, 0018h, 0B85h, 000Dh, 149Fh, 001Bh, 0A40h, 000Dh, 149Fh, 000Dh, 149Fh, 0018h, 0B85h, 000Dh, 149Fh, 0016h, 0C37h, 000Dh, 149Fh, 0012h, 0F6Bh, 0014h, 0DB9h, 001Ch, 149Fh, 0000h, 0012h, 001Ch, 149Fh, 0000h, 0009h, 0038h, 0A40h
raceLevelMusicData:
		DEFW 004Ch, 02CBh, 008Ah, 0326h, 007Bh, 038Ch, 0074h, 03C4h, 0067h, 043Eh, 002Dh, 04C7h, 0032h, 043Eh
snakeIntriMusicData:
		DEFW 0027h, 0CF2h, 0000h, 000Fh, 0036h, 0A40h, 0000h, 000Dh, 003Dh, 089Ah, 0000h, 0007h, 0044h, 06CEh, 0000h, 0009h, 003Ch, 066Ah, 0000h, 0003h, 003Ah, 0CF2h, 0000h, 0008h, 004Fh, 0A40h, 0000h, 0006h, 0043h, 089Ah, 0000h, 0005h, 003Bh, 06CEh, 0000h, 000Ah, 0042h, 05B4h, 0000h, 0004h
snakeLevelMusicData:
		DEFW 004Ch, 02CBh, 008Ah, 0326h, 007Bh, 038Ch, 0074h, 03C4h, 0067h, 043Eh, 002Dh, 04C7h, 0032h, 043Eh
destroyerIntroMusicData:
		DEFW 018Bh, 0254h, 0000h, 0007h, 004Ah, 0326h, 0063h, 0254h, 007Dh, 01D3h, 0095h, 0184h, 007Dh, 01D3h, 0000h, 0007h, 0063h, 0254h, 006Fh, 0210h, 0000h, 0007h, 006Fh, 0210h, 006Fh, 0210h, 0000h, 0007h, 00FBh, 02CBh, 006Fh, 0210h, 0063h, 0254h, 0000h, 0007h, 005Dh, 027Ah, 018Bh, 0254h, 0000h, 0007h, 004Ah, 0326h, 0063h, 0254h, 007Dh, 01D3h, 0095h, 0184h, 007Dh, 01D3h, 0000h, 0007h, 0063h, 0254h, 0069h, 0231h, 0000h, 0007h, 0069h, 0231h, 0069h, 0231h, 0000h, 0007h, 02B9h, 0254h
destroyerLevelMusicData:
		DEFW 0190h, 0511h, 004Ah, 02F7h, 0042h, 0358h, 003Ah, 03C4h, 0042h, 0358h, 0000h, 0007h, 0042h, 0358h, 010Ah, 027Ah, 0000h, 0007h, 0084h, 019Dh, 0084h, 019Dh, 0215h, 012Eh, 0190h, 0511h, 004Ah, 02F7h, 0042h, 0358h, 003Ah, 03C4h, 0042h, 0358h, 0000h, 0007h, 0042h, 0358h, 010Ah, 027Ah, 0000h, 0007h, 0084h, 019Dh, 0084h, 019Dh, 0084h, 019Dh, 0000h, 0007h, 00B1h, 012Eh, 0333h, 012Eh
ghostIntroMusicData:
		DEFW 0037h, 0326h, 0037h, 0326h, 0046h, 027Ah, 0000h, 0005h, 006Fh, 0326h, 007Ah, 02CBh, 0063h, 038Ch, 0000h, 002Ah, 0037h, 0326h, 0037h, 0326h, 0035h, 0326h, 0037h, 0326h, 0063h, 038Ch, 006Dh, 0326h, 0000h, 0020h, 0037h, 0326h, 0035h, 0326h, 0046h, 027Ah, 0000h, 0005h, 006Fh, 0326h, 007Ah, 02CBh, 0063h, 038Ch, 0000h, 002Ah, 0037h, 0326h, 0035h, 0326h, 0037h, 0326h, 0037h, 0326h, 0061h, 038Ch, 007Dh, 02CBh, 006Dh, 0326h
ghostScarySoundData:
		DEFW 0005h, 016Ch, 0005h, 0156h, 0005h, 0141h, 0006h, 012Eh, 0006h, 011Bh, 0006h, 0109h, 0006h, 011Bh, 0006h, 012Eh, 0005h, 0141h, 0005h, 0156h, 0005h, 016Ch, 0005h, 016Ch, 0005h, 0156h, 0005h, 0141h, 0006h, 012Eh, 0006h, 011Bh, 0006h, 0109h, 0006h, 011Bh, 0006h, 012Eh, 0005h, 0141h, 0005h, 0156h, 0005h, 016Ch, 0005h, 016Ch, 0005h, 0156h, 0005h, 0141h, 0006h, 012Eh, 0006h, 011Bh, 0006h, 0109h, 0006h, 011Bh, 0006h, 012Eh, 0005h, 0141h, 0005h, 0156h, 0005h, 016Ch
ghostLevelMusicData:
		DEFW 003Fh, 02A1h, 0042h, 02A1h, 0042h, 02A1h, 0042h, 02A1h, 006Dh, 0326h, 0000h, 0020h, 014Bh, 0210h, 00A4h, 0210h, 006Fh, 0326h
constructorIntroMusicData:
		DEFW 0009h, 081Dh, 000Ah, 07A7h, 000Bh, 0737h, 000Bh, 06CEh, 000Ch, 066Ah, 000Dh, 060Ch, 000Eh, 05B4h, 000Fh, 0560h, 000Fh, 0511h, 0010h, 04C7h, 0011h, 0480h, 0013h, 043Eh, 0029h, 03FFh, 0000h, 0005h, 0022h, 04C7h, 007Ch, 03FFh, 0022h, 04C7h, 0000h, 0005h, 001Bh, 060Ch, 0068h, 04C7h, 0030h, 0358h, 0000h, 0005h, 0029h, 03FFh, 0093h, 0358h, 000Fh, 0A40h, 000Fh, 0A40h, 0014h, 081Dh, 0049h, 06CEh, 0036h, 02F7h, 0000h, 0005h, 002Eh, 038Ch, 00A5h, 02F7h, 002Eh, 038Ch, 0000h, 0005h, 0024h, 0480h, 008Bh, 038Ch, 003Dh, 02A1h, 0000h, 0005h, 0033h, 0326h, 00BAh, 02A1h, 0019h, 066Ah, 001Bh, 060Ch, 001Eh, 0560h, 007Ch, 03FFh
constructorLevelMusicData:
		DEFW 0093h, 0231h, 008Bh, 0254h, 006Eh, 02F7h, 0000h, 000Ah, 0093h, 0231h, 0045h, 0254h, 006Eh, 02F7h, 0000h, 000Fh, 0093h, 0231h, 008Bh, 0254h, 006Eh, 02F7h, 0000h, 000Ah, 0093h, 0231h, 0045h, 0254h, 006Eh, 02F7h, 0000h, 000Fh, 007Bh, 02A1h, 003Dh, 02A1h, 003Dh, 02A1h, 0000h, 0005h, 007Bh, 02A1h, 001Eh, 02A1h, 0000h, 0003h, 0062h, 0358h, 0030h, 0358h, 0030h, 0358h, 0000h, 0005h, 0062h, 0358h, 0018h, 0358h, 0000h, 0003h, 007Bh, 02A1h, 003Dh, 02A1h, 003Dh, 02A1h, 0000h, 0005h, 007Bh, 02A1h, 001Eh, 02A1h, 0000h, 0003h, 0093h, 0231h, 0049h, 0231h, 0049h, 0231h, 0000h, 0005h, 0093h, 0231h, 0024h, 0231h
matchIntroMusicData:
		DEFW 0062h, 027Ah, 0000h, 0008h, 0062h, 027Ah, 0062h, 027Ah, 0068h, 0254h, 0062h, 027Ah, 0068h, 0254h, 0062h, 027Ah, 0057h, 02CBh, 0000h, 0008h, 0068h, 0254h, 0000h, 0008h, 0041h, 03C4h, 00C5h, 012Eh, 009Ch, 0184h, 0075h, 0210h, 0057h, 02CBh, 0000h, 0008h, 0057h, 02CBh, 0057h, 02CBh, 0062h, 027Ah, 0057h, 02CBh, 0062h, 027Ah, 0057h, 02CBh, 004Dh, 0326h, 0000h, 0008h, 0062h, 027Ah, 0000h, 0008h, 003Ah, 043Eh, 00D1h, 011Bh, 00C5h, 012Eh, 00AFh, 0156h, 0062h, 027Ah, 0000h, 0008h, 0062h, 027Ah, 0062h, 027Ah, 0068h, 0254h, 0062h, 027Ah, 0068h, 0254h, 0062h, 027Ah, 0057h, 02CBh, 0000h, 0008h, 0068h, 0254h, 0000h, 0008h, 0083h, 01D3h, 00D1h, 011Bh, 00C5h, 012Eh, 009Ch, 0184h, 0075h, 0210h, 0083h, 01D3h, 0068h, 0254h, 0075h, 0210h, 0062h, 027Ah, 0068h, 0254h, 0057h, 02CBh, 0062h, 027Ah, 0068h, 0254h, 0041h, 03C4h, 0049h, 0358h, 0057h, 02CBh, 00EAh, 0326h
matchLevelMusicData:
		DEFW 0026h, 043Eh, 0000h, 0005h, 001Ch, 05B4h, 0026h, 043Eh, 0030h, 0358h, 0026h, 043Eh, 0030h, 0358h, 003Ah, 02CBh, 003Dh, 02A1h, 0000h, 0005h, 0029h, 03FFh, 003Dh, 02A1h, 0045h, 0254h, 0000h, 0005h, 002Eh, 038Ch, 0045h, 0254h, 03ACh, 0210h
tetrisPieces:
		DEFB 0F8h, 008h, 008h, 008h
		DEFB 0F8h, 008h, 008h, 008h
		DEFB 0CCh, 0CCh, 000h, 000h
		DEFB 0CCh, 0CCh, 000h, 000h
		DEFB 08Ch, 0E8h, 008h, 000h
		DEFB 0E4h, 024h, 00Ch, 000h
		DEFB 028h, 0E8h, 00Ch, 000h
		DEFB 0ECh, 084h, 004h, 000h
		DEFB 068h, 0CCh, 004h, 000h
		DEFB 068h, 0CCh, 004h, 000h
		DEFB 0C4h, 06Ch, 008h, 000h
		DEFB 0C4h, 06Ch, 008h, 000h
		DEFB 048h, 0ECh, 008h, 000h
		DEFB 0E4h, 04Ch, 004h, 000h
#line 96
#line 6
		.org 32790
		ld hl, ZXBASIC_USER_DATA_END
#line 8
	ld de, 0
	ld hl, 0
	call RANDOMIZE
	call _InitScreen
	call _InitIntro
	ld hl, 50
	call __PAUSE
__LABEL0:
	call _SelectGame
	or a
	jp z, __LABEL2
	call _ShowCurtain
	call _ShowWin
	jp __LABEL3
__LABEL2:
	call _ShowCurtain
	call _ShowDeath
__LABEL3:
	jp __LABEL0
__END_PROGRAM:
	di
	ld hl, (__CALL_BACK__)
	ld sp, hl
	exx
	pop hl
	pop iy
	pop ix
	exx
	ei
	ret
__CALL_BACK__:
	DEFW 0
_MultiKeys:
#line 41
		ld a, h
		in a, (0FEh)
		cpl
		and l
#line 45
_MultiKeys__leave:
	ret
_Frames:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, (_counter)
_Frames__leave:
	ld sp, ix
	pop ix
	ret
_ResetFrameCounter:
	push ix
	ld ix, 0
	add ix, sp
#line 21
		di
#line 22
	ld hl, 0
	ld (_counter), hl
	xor a
	ld (_hiCounter), a
#line 30
		ei
#line 31
_ResetFrameCounter__leave:
	ld sp, ix
	pop ix
	ret
_PlayMusic:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
__LABEL4:
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	ld l, (ix+6)
	ld h, (ix+7)
	ex de, hl
	pop hl
	or a
	sbc hl, de
	jp nc, __LABEL5
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	push ix
	pop hl
	ld de, 4
	add hl, de
	call __ARRAY_PTR
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (_musParamA), hl
	ld l, (ix-2)
	ld h, (ix-1)
	inc hl
	ld (ix-2), l
	ld (ix-1), h
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	push ix
	pop hl
	ld de, 4
	add hl, de
	call __ARRAY_PTR
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (_musParamB), hl
	ld l, (ix-2)
	ld h, (ix-1)
	inc hl
	ld (ix-2), l
	ld (ix-1), h
	ld de, 0
	ld hl, (_musParamA)
	or a
	sbc hl, de
	jp nz, __LABEL6
	ld hl, (_musParamB)
	call __PAUSE
	jp __LABEL7
__LABEL6:
#line 47
		push hl
		ld hl, (_musParamB)
		push hl
		ld hl, (_musParamA)
		call __BEEPER
		pop hl
#line 53
__LABEL7:
	jp __LABEL4
__LABEL5:
_PlayMusic__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_getPaddedText:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld l, (ix+4)
	ld h, (ix+5)
	call __STRLEN
	ld a, l
	ld (ix-1), a
	sub (ix+9)
	ccf
	jp nc, __LABEL9
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	ld hl, 0
	push hl
	ld a, (ix+9)
	ld l, a
	ld h, 0
	dec hl
	push hl
	xor a
	call __STRSLICE
	jp _getPaddedText__leave
__LABEL9:
	ld l, (ix+4)
	ld h, (ix+5)
	ld d, h
	ld e, l
	ld bc, -4
	call __PSTORE_STR
	ld (ix-2), 1
	jp __LABEL10
__LABEL13:
	ld l, (ix+6)
	ld h, (ix+7)
	push hl
	ld l, (ix-4)
	ld h, (ix-3)
	ex de, hl
	pop hl
	call __ADDSTR
	ld d, h
	ld e, l
	ld bc, -4
	call __PSTORE_STR2
	inc (ix-2)
__LABEL10:
	ld h, (ix-2)
	ld a, (ix+9)
	sub (ix-1)
	cp h
	jp nc, __LABEL13
	ld l, (ix-4)
	ld h, (ix-3)
	call __LOADSTR
_getPaddedText__leave:
	ex af, af'
	exx
	ld l, (ix+4)
	ld h, (ix+5)
	call __MEM_FREE
	ld l, (ix+6)
	ld h, (ix+7)
	call __MEM_FREE
	ld l, (ix-4)
	ld h, (ix-3)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_InitScreen:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld hl, _sprites.__DATA__
	ld (_udgAddress), hl
	ld a, 5
	call INK
	call COPY_ATTR
	xor a
	call PAPER
	call COPY_ATTR
	xor a
	call BRIGHT
	call COPY_ATTR
	xor a
	call BORDER
	xor a
	push af
	ld a, 7
	call PRINT_AT
	ld hl, __LABEL15
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld (ix-1), 1
	jp __LABEL16
__LABEL19:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ld a, l
	push af
	ld a, 7
	call PRINT_AT
	ld hl, __LABEL21
	xor a
	call __PRINTSTR
	ld a, 7
	call PAPER_TMP
	ld a, 7
	call INK_TMP
	ld hl, __LABEL22
	xor a
	call __PRINTSTR
	xor a
	call PAPER_TMP
	ld a, 5
	call INK_TMP
	ld hl, __LABEL23
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ld a, l
	push af
	ld a, 18
	call PRINT_AT
	ld a, 7
	call PAPER_TMP
	xor a
	call INK_TMP
	ld hl, __LABEL24
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	inc (ix-1)
__LABEL16:
	ld a, 20
	cp (ix-1)
	jp nc, __LABEL19
	xor a
	ld (_sprites.__DATA__ + 0), a
	xor a
	ld (_sprites.__DATA__ + 1), a
	xor a
	ld (_sprites.__DATA__ + 2), a
	xor a
	ld (_sprites.__DATA__ + 3), a
	xor a
	ld (_sprites.__DATA__ + 4), a
	xor a
	ld (_sprites.__DATA__ + 5), a
	xor a
	ld (_sprites.__DATA__ + 6), a
	xor a
	ld (_sprites.__DATA__ + 7), a
	ld a, 21
	push af
	ld a, 7
	call PRINT_AT
	ld hl, __LABEL25
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 23
	push af
	ld a, 7
	call PRINT_AT
	ld hl, __LABEL21
	xor a
	call __PRINTSTR
	ld a, 1
	call INVERSE_TMP
	ld hl, __LABEL26
	xor a
	call __PRINTSTR
	xor a
	call INVERSE_TMP
	ld hl, __LABEL23
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 22
	push af
	ld a, 7
	call PRINT_AT
	ld hl, __LABEL21
	xor a
	call __PRINTSTR
	ld a, 1
	call INVERSE_TMP
	ld hl, __LABEL27
	xor a
	call __PRINTSTR
	xor a
	call INVERSE_TMP
	ld hl, __LABEL23
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	xor a
	call INK
	call COPY_ATTR
	ld a, 7
	call PAPER
	call COPY_ATTR
	xor a
	call BRIGHT
	call COPY_ATTR
	ld a, 1
	push af
	ld a, 19
	call PRINT_AT
	ld hl, __LABEL28
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 5
	push af
	ld a, 19
	call PRINT_AT
	ld hl, __LABEL29
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 10
	push af
	ld a, 19
	call PRINT_AT
	ld hl, __LABEL30
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, 9999
	ld (_workingScore), hl
	ld a, 99
	ld (_workingLevel), a
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 15
	push af
	ld a, 15
	push af
	call _SetSymbol
	ld hl, 1
	call __PAUSE
	call _UpdateScreen
	ld hl, 0
	ld (_workingScore), hl
	ld a, 1
	ld (_workingLevel), a
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	xor a
	push af
	xor a
	push af
	call _SetSymbol
	ld hl, 50
	call __PAUSE
	ld hl, 856
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 58
	call __BEEPER
	call _UpdateScreen
_InitScreen__leave:
	ld sp, ix
	pop ix
	ret
_InvertRect:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL31
__LABEL34:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL36
__LABEL39:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp nz, __LABEL41
	ld a, 1
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
	jp __LABEL42
__LABEL41:
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
__LABEL42:
	inc (ix-1)
__LABEL36:
	ld a, (ix+7)
	cp (ix-1)
	jp nc, __LABEL39
	inc (ix-2)
__LABEL31:
	ld a, (ix+11)
	cp (ix-2)
	jp nc, __LABEL34
_InvertRect__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_MoveRect:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld a, (ix+13)
	ld h, a
	xor a
	call __LTI8
	or a
	jp z, __LABEL43
	xor a
	push af
	ld a, (ix+11)
	push af
	ld a, (ix+9)
	push af
	ld a, (ix+5)
	push af
	ld a, (ix+13)
	dec a
	ld h, a
	pop af
	add a, h
	push af
	ld a, (ix+5)
	push af
	call _FillRect
	jp __LABEL44
__LABEL43:
	ld a, (ix+13)
	ld h, 0
	call __LTI8
	or a
	jp z, __LABEL45
	xor a
	push af
	ld a, (ix+11)
	push af
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+13)
	inc a
	ld h, a
	pop af
	add a, h
	push af
	call _FillRect
	jp __LABEL46
__LABEL45:
	ld a, (ix+15)
	ld h, a
	xor a
	call __LTI8
	or a
	jp z, __LABEL47
	xor a
	push af
	ld a, (ix+9)
	push af
	ld a, (ix+15)
	dec a
	ld h, a
	pop af
	add a, h
	push af
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	call _FillRect
	jp __LABEL48
__LABEL47:
	ld a, (ix+15)
	ld h, 0
	call __LTI8
	or a
	jp z, __LABEL50
	xor a
	push af
	ld a, (ix+11)
	push af
	ld a, (ix+11)
	push af
	ld a, (ix+15)
	inc a
	ld h, a
	pop af
	add a, h
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	call _FillRect
__LABEL50:
__LABEL48:
__LABEL46:
__LABEL44:
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL51
__LABEL54:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL56
__LABEL59:
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	push af
	ld a, (ix-2)
	add a, (ix+15)
	push af
	ld a, (ix-1)
	add a, (ix+13)
	push af
	call _SetCell
	inc (ix-1)
__LABEL56:
	ld h, (ix-1)
	ld a, (ix+7)
	call __LTI8
	or a
	jp z, __LABEL59
	inc (ix-2)
__LABEL51:
	ld h, (ix-2)
	ld a, (ix+11)
	call __LTI8
	or a
	jp z, __LABEL54
_MoveRect__leave:
	exx
	ld hl, 12
__EXIT_FUNCTION:
	ld sp, ix
	pop ix
	pop de
	add hl, sp
	ld sp, hl
	push de
	exx
	ret
_FillRect:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL61
__LABEL64:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL66
__LABEL69:
	ld a, (ix+13)
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
	inc (ix-1)
__LABEL66:
	ld a, (ix+7)
	cp (ix-1)
	jp nc, __LABEL69
	inc (ix-2)
__LABEL61:
	ld a, (ix+11)
	cp (ix-2)
	jp nc, __LABEL64
_FillRect__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_SetCell:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _workingCells
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	or a
	jp z, __LABEL71
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	sub (hl)
	jp z, __LABEL73
	ld a, (ix+5)
	push af
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _ops
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL74
__LABEL73:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _ops
	call __ARRAY
	ld (hl), 0
__LABEL74:
	jp __LABEL72
__LABEL71:
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	sub (ix+9)
	jp z, __LABEL76
	ld hl, _currentOp
	inc (hl)
	ld a, (ix+5)
	push af
	ld a, (_currentOp)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _ops
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix+7)
	push af
	ld a, (_currentOp)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _ops
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix+9)
	push af
	ld a, (_currentOp)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _ops
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _workingCells
	call __ARRAY
	ld a, (_currentOp)
	ld (hl), a
__LABEL76:
__LABEL72:
_SetCell__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_SetSymbol:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld a, (ix+5)
	and 3
	ld (ix-1), a
	or a
	jp nz, __LABEL77
	xor a
	ld (_workingSymbol.__DATA__ + 2), a
	jp __LABEL78
__LABEL77:
	ld a, (ix-1)
	inc a
	ld (_workingSymbol.__DATA__ + 2), a
__LABEL78:
	ld a, (ix+5)
	srl a
	srl a
	and 3
	ld (ix-1), a
	or a
	jp nz, __LABEL79
	xor a
	ld (_workingSymbol.__DATA__ + 0), a
	jp __LABEL80
__LABEL79:
	ld a, (ix-1)
	inc a
	ld (_workingSymbol.__DATA__ + 0), a
__LABEL80:
	ld a, (ix+7)
	and 3
	ld (ix-1), a
	or a
	jp nz, __LABEL81
	xor a
	ld (_workingSymbol.__DATA__ + 3), a
	jp __LABEL82
__LABEL81:
	ld a, (ix-1)
	inc a
	ld (_workingSymbol.__DATA__ + 3), a
__LABEL82:
	ld a, (ix+7)
	srl a
	srl a
	and 3
	ld (ix-1), a
	or a
	jp nz, __LABEL83
	xor a
	ld (_workingSymbol.__DATA__ + 1), a
	jp __LABEL84
__LABEL83:
	ld a, (ix-1)
	inc a
	ld (_workingSymbol.__DATA__ + 1), a
__LABEL84:
_SetSymbol__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_SetLevel:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+5)
	ld (_workingLevel), a
_SetLevel__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_SetScore:
	push ix
	ld ix, 0
	add ix, sp
	ld l, (ix+4)
	ld h, (ix+5)
	ld (_workingScore), hl
_SetScore__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_SetLifes:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld a, 4
	cp (ix+5)
	jp nc, __LABEL85
	ld (ix-1), 15
	ld a, (ix+5)
	sub 4
	ld (ix+5), a
	ld (ix-3), 1
	jp __LABEL87
__LABEL90:
	ld a, (ix+5)
	sub (ix-3)
	ccf
	jp nc, __LABEL93
	ld a, (ix-2)
	push af
	ld a, (ix-3)
	dec a
	ld h, 1
	or a
	ld b, a
	ld a, h
	jr z, __LABEL1253
__LABEL1252:
	add a, a
	djnz __LABEL1252
__LABEL1253:
	pop de
	or d
	ld (ix-2), a
__LABEL93:
	inc (ix-3)
__LABEL87:
	ld a, 4
	cp (ix-3)
	jp nc, __LABEL90
	jp __LABEL86
__LABEL85:
	ld (ix-3), 1
	jp __LABEL94
__LABEL97:
	ld a, (ix+5)
	sub (ix-3)
	ccf
	jp nc, __LABEL100
	ld a, (ix-1)
	push af
	ld a, (ix-3)
	dec a
	ld h, 1
	or a
	ld b, a
	ld a, h
	jr z, __LABEL1255
__LABEL1254:
	add a, a
	djnz __LABEL1254
__LABEL1255:
	pop de
	or d
	ld (ix-1), a
__LABEL100:
	inc (ix-3)
__LABEL94:
	ld a, 4
	cp (ix-3)
	jp nc, __LABEL97
__LABEL86:
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetSymbol
_SetLifes__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_HideNextTitle:
	push ix
	ld ix, 0
	add ix, sp
	ld a, 5
	push af
	ld a, 19
	call PRINT_AT
	ld hl, __LABEL101
	xor a
	call __PRINTSTR
	call PRINT_EOL
_HideNextTitle__leave:
	ld sp, ix
	pop ix
	ret
_ShowNextTitle:
	push ix
	ld ix, 0
	add ix, sp
	ld a, 5
	push af
	ld a, 19
	call PRINT_AT
	ld hl, __LABEL29
	xor a
	call __PRINTSTR
	call PRINT_EOL
_ShowNextTitle__leave:
	ld sp, ix
	pop ix
	ret
_UpdateScreen:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	xor a
	ld hl, (_currentOp - 1)
	cp h
	jp nc, __LABEL103
	ld (ix-3), 1
	jp __LABEL104
__LABEL107:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _ops
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	or a
	jp z, __LABEL110
	ld a, (ix-3)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _ops
	call __ARRAY
	ld a, (hl)
	ld (ix-2), a
	ld a, (ix-3)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _ops
	call __ARRAY
	ld a, (hl)
	ld (ix-5), a
	push af
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-5)
	or a
	jp z, __LABEL111
	ld a, (ix-1)
	add a, 8
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-2)
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _attribs
	call __ARRAY
	ld (hl), 56
	jp __LABEL112
__LABEL111:
	ld a, (ix-1)
	add a, 8
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-2)
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _attribs
	call __ARRAY
	ld (hl), 63
__LABEL112:
__LABEL110:
	inc (ix-3)
__LABEL104:
	ld a, (_currentOp)
	cp (ix-3)
	jp nc, __LABEL107
__LABEL103:
	ld (ix-2), 1
	jp __LABEL113
__LABEL116:
	ld (ix-1), 1
	jp __LABEL118
__LABEL121:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenSymbol
	call __ARRAY
	ld a, (hl)
	ld (ix-4), a
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _workingSymbol
	call __ARRAY
	ld a, (hl)
	ld (ix-5), a
	ld a, (ix-4)
	sub (ix-5)
	jp z, __LABEL124
	ld a, (ix-5)
	push af
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenSymbol
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-2)
	ld l, a
	ld h, 0
	ld de, 6
	add hl, de
	ld a, l
	push af
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ld de, 18
	add hl, de
	ld a, l
	call PRINT_AT
	ld a, (ix-5)
	add a, 144
	push af
	ld hl, 1
	call CHR
	ld a, 1
	call __PRINTSTR
	call PRINT_EOL
__LABEL124:
	inc (ix-1)
__LABEL118:
	ld a, 4
	cp (ix-1)
	jp nc, __LABEL121
	inc (ix-2)
__LABEL113:
	ld a, 2
	cp (ix-2)
	jp nc, __LABEL116
	ld de, (_screenScore)
	ld hl, (_workingScore)
	or a
	sbc hl, de
	ld a, h
	or l
	jp z, __LABEL126
	ld hl, (_workingScore)
	ld (_screenScore), hl
	ld a, 3
	push af
	ld a, 19
	call PRINT_AT
	ld a, 4
	push af
	ld hl, __LABEL127
	call __LOADSTR
	push hl
	ld hl, (_screenScore)
	ld de, 0
	call __U32TOFREG
	call __STR_FAST
	push hl
	call _getPaddedText
	ld a, 1
	call __PRINTSTR
	call PRINT_EOL
__LABEL126:
	ld hl, (_workingLevel - 1)
	ld a, (_screenLevel)
	sub h
	jp z, __LABEL129
	ld a, (_workingLevel)
	ld (_screenLevel), a
	ld a, 12
	push af
	ld a, 19
	call PRINT_AT
	ld a, 2
	push af
	ld hl, __LABEL127
	call __LOADSTR
	push hl
	ld a, (_screenLevel)
	call __U8TOFREG
	call __STR_FAST
	push hl
	call _getPaddedText
	ld a, 1
	call __PRINTSTR
	call PRINT_EOL
__LABEL129:
	xor a
	ld (_currentOp), a
#line 415
		di
		ld de, _workingCells.__DATA__
		ld a, 0
		ld (de), a
		inc de
		ld hl, _workingCells.__DATA__
		ld bc, 199
		ldir
		ei
#line 424
_UpdateScreen__leave:
	ld sp, ix
	pop ix
	ret
_ShowCurtain:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld (ix-2), 1
	jp __LABEL130
__LABEL133:
	ld (ix-1), 1
	jp __LABEL135
__LABEL138:
	ld a, 1
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
	inc (ix-1)
__LABEL135:
	ld a, 10
	cp (ix-1)
	jp nc, __LABEL138
	call _UpdateScreen
	ld hl, 11888
	push hl
	ld hl, 0
	call __BEEPER
	inc (ix-2)
__LABEL130:
	ld a, 20
	cp (ix-2)
	jp nc, __LABEL133
_ShowCurtain__leave:
	ld sp, ix
	pop ix
	ret
_FillLine:
	push ix
	ld ix, 0
	add ix, sp
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 512
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL141
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 1
	push af
	call _SetCell
__LABEL141:
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 256
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL143
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 2
	push af
	call _SetCell
__LABEL143:
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 128
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL145
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 3
	push af
	call _SetCell
__LABEL145:
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 64
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL147
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL147:
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 32
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL149
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 5
	push af
	call _SetCell
__LABEL149:
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 16
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL151
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 6
	push af
	call _SetCell
__LABEL151:
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 8
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL153
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 7
	push af
	call _SetCell
__LABEL153:
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 4
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL155
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 8
	push af
	call _SetCell
__LABEL155:
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 2
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL157
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL157:
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 1
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL159
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL159:
_FillLine__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_ShowDeath:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL160
__LABEL163:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _deadPic
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	push hl
	ld a, (ix-1)
	push af
	call _FillLine
	inc (ix-1)
__LABEL160:
	ld a, 20
	cp (ix-1)
	jp nc, __LABEL163
	call _UpdateScreen
	ld hl, 46
	push hl
	ld hl, _deathMusic
	push hl
	call _PlayMusic
_ShowDeath__leave:
	ld sp, ix
	pop ix
	ret
_ShowWin:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL165
__LABEL168:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _winPic
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	push hl
	ld a, (ix-1)
	push af
	call _FillLine
	inc (ix-1)
__LABEL165:
	ld a, 20
	cp (ix-1)
	jp nc, __LABEL168
	call _UpdateScreen
	ld hl, 220
	push hl
	ld hl, _winMusic
	push hl
	call _PlayMusic
_ShowWin__leave:
	ld sp, ix
	pop ix
	ret
_min:
	push ix
	ld ix, 0
	add ix, sp
	ld h, (ix+5)
	ld a, (ix+7)
	call __LTI8
	or a
	jp z, __LABEL170
	ld a, (ix+7)
	jp _min__leave
__LABEL170:
	ld a, (ix+5)
_min__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_max:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+5)
	ld h, (ix+7)
	call __LTI8
	or a
	jp z, __LABEL172
	ld a, (ix+7)
	jp _max__leave
__LABEL172:
	ld a, (ix+5)
_max__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_Explode:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	ld a, (ix+5)
	ld (ix-1), a
	ld a, (ix+7)
	ld (ix-3), a
	ld a, (ix+5)
	ld (ix-2), a
	ld a, (ix+7)
	ld (ix-4), a
	ld (ix-5), 1
	jp __LABEL174
__LABEL177:
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	inc a
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-3)
	dec a
	push af
	call _max
	push af
	ld a, 10
	push af
	ld a, (ix-2)
	inc a
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-1)
	dec a
	push af
	call _max
	push af
	call _FillRect
	xor a
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-3)
	push af
	call _max
	push af
	ld a, 10
	push af
	ld a, (ix-2)
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	call _max
	push af
	call _FillRect
	dec (ix-1)
	inc (ix-2)
	dec (ix-3)
	inc (ix-4)
	call _UpdateScreen
	ld hl, 12597
	push hl
	ld hl, 1
	call __BEEPER
	inc (ix-5)
__LABEL174:
	ld h, (ix-5)
	ld a, 3
	call __LTI8
	or a
	jp z, __LABEL177
	ld a, (ix-1)
	ld (ix-5), a
	jp __LABEL179
__LABEL182:
	ld a, (ix-5)
	ld h, 1
	call __LTI8
	push af
	ld h, (ix-5)
	ld a, 10
	call __LTI8
	pop de
	or d
	jp nz, __LABEL183
	ld a, (ix-5)
	and 1
	jp nz, __LABEL186
	ld a, (ix-3)
	ld h, 1
	call __LTI8
	or a
	jp nz, __LABEL183
	xor a
	push af
	ld a, (ix-3)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	jp __LABEL187
__LABEL186:
	ld h, (ix-4)
	ld a, 20
	call __LTI8
	or a
	jp nz, __LABEL183
	xor a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
__LABEL187:
__LABEL183:
	inc (ix-5)
__LABEL179:
	ld h, (ix-5)
	ld a, (ix-2)
	call __LTI8
	or a
	jp z, __LABEL182
	ld a, (ix-3)
	ld (ix-6), a
	jp __LABEL192
__LABEL195:
	ld a, (ix-6)
	ld h, 1
	call __LTI8
	push af
	ld h, (ix-6)
	ld a, 20
	call __LTI8
	pop de
	or d
	jp nz, __LABEL196
	ld a, (ix-6)
	and 1
	jp nz, __LABEL199
	ld a, (ix-1)
	ld h, 1
	call __LTI8
	or a
	jp nz, __LABEL196
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
	jp __LABEL200
__LABEL199:
	ld h, (ix-2)
	ld a, 10
	call __LTI8
	or a
	jp nz, __LABEL196
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-2)
	push af
	call _SetCell
__LABEL200:
__LABEL196:
	inc (ix-6)
__LABEL192:
	ld h, (ix-6)
	ld a, (ix-4)
	call __LTI8
	or a
	jp z, __LABEL195
	call _UpdateScreen
	ld hl, 5
	call __PAUSE
	ld a, (ix+9)
	or a
	jp nz, __LABEL206
	ld (ix-5), 1
	jp __LABEL207
__LABEL210:
	ld a, 20
	push af
	ld a, (ix-4)
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-3)
	push af
	call _max
	push af
	ld a, 10
	push af
	ld a, (ix-2)
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	call _max
	push af
	call _InvertRect
	xor a
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	dec a
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-3)
	inc a
	push af
	call _max
	push af
	ld a, 10
	push af
	ld a, (ix-2)
	dec a
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-1)
	inc a
	push af
	call _max
	push af
	call _FillRect
	call _UpdateScreen
	ld hl, 1
	call __PAUSE
	inc (ix-5)
__LABEL207:
	ld h, (ix-5)
	ld a, 10
	call __LTI8
	or a
	jp z, __LABEL210
__LABEL206:
_Explode__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_InitIntro:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL212
__LABEL215:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _introScreen
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (ix-3), l
	ld (ix-2), h
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 512
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL218
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 1
	push af
	call _SetCell
__LABEL218:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 256
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL220
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 2
	push af
	call _SetCell
__LABEL220:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 128
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL222
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 3
	push af
	call _SetCell
__LABEL222:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 64
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL224
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL224:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 32
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL226
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 5
	push af
	call _SetCell
__LABEL226:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 16
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL228
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 6
	push af
	call _SetCell
__LABEL228:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 8
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL230
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 7
	push af
	call _SetCell
__LABEL230:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 4
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL232
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 8
	push af
	call _SetCell
__LABEL232:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 2
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL234
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL234:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 1
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL236
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL236:
	inc (ix-1)
__LABEL212:
	ld a, 20
	cp (ix-1)
	jp nc, __LABEL215
	call _UpdateScreen
_InitIntro__leave:
	ld sp, ix
	pop ix
	ret
_LoadTetrisScreen:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld (ix-1), 1
	jp __LABEL237
__LABEL240:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tetrisScreens
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (ix-3), l
	ld (ix-2), h
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 512
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL243
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 1
	push af
	call _SetCell
__LABEL243:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 256
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL245
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 2
	push af
	call _SetCell
__LABEL245:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 128
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL247
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 3
	push af
	call _SetCell
__LABEL247:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 64
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL249
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL249:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 32
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL251
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 5
	push af
	call _SetCell
__LABEL251:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 16
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL253
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 6
	push af
	call _SetCell
__LABEL253:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 8
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL255
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 7
	push af
	call _SetCell
__LABEL255:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 4
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL257
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 8
	push af
	call _SetCell
__LABEL257:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 2
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL259
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL259:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 1
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL261
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL261:
	inc (ix-1)
__LABEL237:
	ld a, 10
	cp (ix-1)
	jp nc, __LABEL240
	call _UpdateScreen
_LoadTetrisScreen__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_ExpandPiece:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld (ix-2), 1
	jp __LABEL262
__LABEL265:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tetrisPieces
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	and 128
	push af
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 64
	push af
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 32
	push af
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 16
	push af
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 3
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 8
	push af
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 4
	push af
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 2
	push af
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 1
	push af
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 3
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tetrisPieces
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	and 128
	push af
	ld hl, 2
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 64
	push af
	ld hl, 2
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 32
	push af
	ld hl, 2
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 16
	push af
	ld hl, 2
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 3
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 8
	push af
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 4
	push af
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 2
	push af
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 1
	push af
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 3
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld (hl), 0
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld (hl), 0
	inc (ix-2)
__LABEL262:
	ld a, 4
	cp (ix-2)
	jp nc, __LABEL265
	ld (ix-4), 1
	jp __LABEL267
__LABEL270:
	ld (ix-2), 1
	jp __LABEL272
__LABEL275:
	ld (ix-3), 1
	jp __LABEL277
__LABEL280:
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-3)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL283
	ld hl, 0
	push hl
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld a, (hl)
	ld h, (ix-2)
	call __LTI8
	or a
	jp z, __LABEL285
	ld a, (ix-2)
	push af
	ld hl, 0
	push hl
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	pop af
	ld (hl), a
__LABEL285:
	ld hl, 1
	push hl
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld a, (hl)
	ld h, (ix-3)
	call __LTI8
	or a
	jp z, __LABEL287
	ld a, (ix-3)
	push af
	ld hl, 1
	push hl
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	pop af
	ld (hl), a
__LABEL287:
__LABEL283:
	inc (ix-3)
__LABEL277:
	ld a, 4
	cp (ix-3)
	jp nc, __LABEL280
	inc (ix-2)
__LABEL272:
	ld a, 4
	cp (ix-2)
	jp nc, __LABEL275
	inc (ix-4)
__LABEL267:
	ld a, 4
	cp (ix-4)
	jp nc, __LABEL270
_ExpandPiece__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_WillCollide:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	ld a, (ix+9)
	or a
	jp z, __LABEL289
	ld a, (ix+5)
	add a, (ix+9)
	ld (ix-1), a
	ld h, 1
	call __LTI8
	push af
	ld a, (ix-1)
	push af
	ld hl, 1
	push hl
	ld a, (ix+13)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld a, 11
	sub (hl)
	pop hl
	call __LTI8
	pop de
	or d
	jp z, __LABEL291
	ld a, 1
	jp _WillCollide__leave
__LABEL291:
__LABEL289:
	ld (ix-2), 1
	jp __LABEL292
__LABEL295:
	ld a, (ix-2)
	add a, (ix+7)
	add a, (ix+11)
	dec a
	ld (ix-5), a
	ld h, 1
	call __LTI8
	or a
	jp nz, __LABEL296
	ld a, (ix-2)
	add a, (ix+11)
	ld (ix-4), a
	ld (ix-1), 1
	jp __LABEL299
__LABEL302:
	ld a, (ix-1)
	add a, (ix+5)
	add a, (ix+9)
	dec a
	ld (ix-6), a
	ld a, (ix-1)
	add a, (ix+9)
	ld (ix-3), a
	ld a, (ix+15)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	ld a, (hl)
	push af
	ld a, (ix-3)
	ld h, 1
	call __LTI8
	push af
	ld h, (ix-3)
	ld a, 4
	call __LTI8
	pop de
	or d
	push af
	ld a, (ix-4)
	ld h, 1
	call __LTI8
	pop de
	or d
	push af
	ld h, (ix-4)
	ld a, 4
	call __LTI8
	pop de
	or d
	push af
	ld a, (ix+13)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-4)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-3)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop de
	ld a, (hl)
	sub 1
	sbc a, a
	or d
	ld h, a
	pop af
	or a
	jr z, __LABEL1256
	ld a, h
__LABEL1256:
	or a
	jp z, __LABEL305
	ld a, (ix-6)
	ld h, 1
	call __LTI8
	push af
	ld h, (ix-6)
	ld a, 10
	call __LTI8
	pop de
	or d
	push af
	ld h, (ix-5)
	ld a, 20
	call __LTI8
	pop de
	or d
	push af
	ld a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	or (hl)
	jp z, __LABEL307
	ld a, 1
	jp _WillCollide__leave
__LABEL307:
__LABEL305:
	inc (ix-1)
__LABEL299:
	ld h, (ix-1)
	ld a, 4
	call __LTI8
	or a
	jp z, __LABEL302
__LABEL296:
	inc (ix-2)
__LABEL292:
	ld h, (ix-2)
	ld a, 4
	call __LTI8
	or a
	jp z, __LABEL295
	xor a
_WillCollide__leave:
	exx
	ld hl, 12
	jp __EXIT_FUNCTION
_DrawFigure:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld (ix-2), 1
	jp __LABEL308
__LABEL311:
	ld a, (ix-2)
	add a, (ix+7)
	dec a
	ld (ix-4), a
	ld h, 1
	call __LTI8
	or a
	jp nz, __LABEL312
	ld (ix-1), 1
	jp __LABEL315
__LABEL318:
	ld a, (ix-1)
	add a, (ix+5)
	dec a
	ld (ix-3), a
	ld h, 1
	call __LTI8
	or a
	jp nz, __LABEL319
	ld a, (ix+9)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL323
	ld a, (ix+11)
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-3)
	push af
	call _SetCell
__LABEL323:
__LABEL319:
	inc (ix-1)
__LABEL315:
	ld a, 4
	cp (ix-1)
	jp nc, __LABEL318
__LABEL312:
	inc (ix-2)
__LABEL308:
	ld a, 4
	cp (ix-2)
	jp nc, __LABEL311
_DrawFigure__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_FindTop:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld (ix-1), 20
	jp __LABEL324
__LABEL327:
	ld (ix-3), 1
	ld (ix-2), 1
	jp __LABEL329
__LABEL332:
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL335
	ld (ix-3), 0
	jp __LABEL331
__LABEL335:
	inc (ix-2)
__LABEL329:
	ld h, (ix-2)
	ld a, 10
	call __LTI8
	or a
	jp z, __LABEL332
__LABEL331:
	ld a, (ix-3)
	or a
	jp z, __LABEL337
	ld a, (ix-1)
	sub 20
	jp nz, __LABEL339
	xor a
	jp _FindTop__leave
__LABEL339:
	ld a, (ix-1)
	inc a
	jp _FindTop__leave
__LABEL337:
	dec (ix-1)
__LABEL324:
	ld a, (ix-1)
	ld h, 1
	call __LTI8
	or a
	jp z, __LABEL327
	xor a
_FindTop__leave:
	ld sp, ix
	pop ix
	ret
_EraseLines:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	call _FindTop
	ld (ix-1), a
	ld (ix-4), 3
	jp __LABEL340
__LABEL343:
	ld (ix-2), 1
	ld a, (ix-4)
	add a, (ix+5)
	ld (ix-3), a
	ld h, (ix-1)
	call __LTI8
	push af
	ld h, (ix-3)
	ld a, 20
	call __LTI8
	pop de
	or d
	jp nz, __LABEL344
	ld (ix-5), 1
	jp __LABEL347
__LABEL350:
	ld a, (ix-3)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp nz, __LABEL353
	ld (ix-2), 0
	jp __LABEL349
__LABEL353:
	inc (ix-5)
__LABEL347:
	ld a, 10
	cp (ix-5)
	jp nc, __LABEL350
__LABEL349:
	ld a, (ix-2)
	or a
	jp z, __LABEL355
	inc (ix+5)
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-3)
	dec a
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _MoveRect
	call _UpdateScreen
	ld hl, 233
	push hl
	ld hl, 82
	call __BEEPER
	inc (ix-6)
__LABEL355:
__LABEL344:
	dec (ix-4)
__LABEL340:
	ld a, (ix-4)
	ld h, 0
	call __LTI8
	or a
	jp z, __LABEL343
	ld a, (ix-6)
_EraseLines__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_RunTetris:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -17
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 16
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL1257
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1258
	ld bc, 1
	ldir
	ld a, (_playedTetrisMusic)
	or a
	jp nz, __LABEL357
	ld hl, 100
	push hl
	ld hl, _tetrisIntroMusic
	push hl
	call _PlayMusic
	ld a, 1
	ld (_playedTetrisMusic), a
__LABEL357:
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	inc a
	ld h, a
	ld a, 40
	call __DIVU8_FAST
	ld (ix-1), a
	ld de, __LABEL358
	ld bc, -17
	call __PSTORE_STR
	call RND
	push bc
	push de
	push af
	ld a, 083h
	ld de, 00060h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-10), a
	call RND
	push bc
	push de
	push af
	ld a, 083h
	ld de, 00060h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-10), a
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld bc, 0
	push bc
	ld bc, 10
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-13), a
	ld hl, 908
	push hl
	ld hl, 46
	call __BEEPER
	ld hl, 806
	push hl
	ld hl, 51
	call __BEEPER
	ld hl, 673
	push hl
	ld hl, 61
	call __BEEPER
	ld hl, 596
	push hl
	ld hl, 69
	call __BEEPER
	call RND
	push bc
	push de
	push af
	ld a, 083h
	ld de, 00060h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-10), a
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	inc a
	push af
	call _LoadTetrisScreen
__LABEL359:
	ld a, (ix-2)
	or a
	jp nz, __LABEL360
	ld a, (ix-3)
	sub 255
	jp nz, __LABEL362
	ld (ix-4), 1
	ld a, (ix-10)
	ld (ix-3), a
	call RND
	push bc
	push de
	push af
	ld a, 083h
	ld de, 00060h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-10), a
	ld a, (ix-3)
	push af
	call _ExpandPiece
	ld a, (_expandedSize.__DATA__ + 0)
	neg
	ld (ix-5), a
	ld (ix-6), 4
	ld hl, 1
	push hl
	ld hl, 0
	push hl
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tetrisPieces
	call __ARRAY
	ld a, (hl)
	ld b, 4
__LABEL1259:
	srl a
	djnz __LABEL1259
	push af
	ld hl, 0
	push hl
	ld hl, 0
	push hl
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tetrisPieces
	call __ARRAY
	ld a, (hl)
	ld b, 4
__LABEL1260:
	srl a
	djnz __LABEL1260
	push af
	call _SetSymbol
__LABEL362:
	ld a, (ix-4)
	push af
	ld a, (ix-4)
	push af
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _WillCollide
	or a
	jp z, __LABEL363
	ld a, (ix-5)
	ld h, 1
	call __LTI8
	or a
	jp z, __LABEL365
	ld (ix-2), 1
	jp __LABEL366
__LABEL365:
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	ld a, (ix-5)
	push af
	call _EraseLines
	ld (ix-7), a
	or a
	jp z, __LABEL367
	ld a, (ix-7)
	dec a
	jp nz, __LABEL369
	ld l, (ix-15)
	ld h, (ix-14)
	inc hl
	ld (ix-15), l
	ld (ix-14), h
	jp __LABEL370
__LABEL369:
	ld a, (ix-7)
	sub 2
	jp nz, __LABEL371
	ld l, (ix-15)
	ld h, (ix-14)
	inc hl
	inc hl
	inc hl
	ld (ix-15), l
	ld (ix-14), h
	jp __LABEL372
__LABEL371:
	ld a, (ix-7)
	sub 3
	jp nz, __LABEL373
	ld l, (ix-15)
	ld h, (ix-14)
	ld de, 5
	add hl, de
	ld (ix-15), l
	ld (ix-14), h
	jp __LABEL374
__LABEL373:
	ld a, (ix-7)
	sub 4
	jp nz, __LABEL376
	ld l, (ix-15)
	ld h, (ix-14)
	ld de, 10
	add hl, de
	ld (ix-15), l
	ld (ix-14), h
__LABEL376:
__LABEL374:
__LABEL372:
__LABEL370:
	ld a, (ix-12)
	add a, (ix-7)
	ld (ix-12), a
	sub (ix-13)
	ccf
	jp nc, __LABEL378
	ld a, (ix+5)
	sub 99
	jp nz, __LABEL380
	ld a, 1
	jp _RunTetris__leave
__LABEL380:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	sub 9
	jp nz, __LABEL382
	ld hl, 60
	push hl
	ld hl, _tetrisLevelMusic
	push hl
	call _PlayMusic
__LABEL382:
	call _ShowCurtain
	ld hl, 908
	push hl
	ld hl, 46
	call __BEEPER
	ld hl, 596
	push hl
	ld hl, 69
	call __BEEPER
	inc (ix+5)
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	inc a
	ld h, a
	ld a, 40
	call __DIVU8_FAST
	ld (ix-1), a
	ld (ix-12), 0
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld bc, 0
	push bc
	ld bc, 10
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-13), a
	ld l, (ix-15)
	ld h, (ix-14)
	ld de, 50
	add hl, de
	ld (ix-15), l
	ld (ix-14), h
	ld a, (ix+5)
	push af
	call _SetLevel
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	inc a
	push af
	call _LoadTetrisScreen
__LABEL378:
	ld l, (ix-15)
	ld h, (ix-14)
	push hl
	call _SetScore
	call _UpdateScreen
	jp __LABEL368
__LABEL367:
	ld hl, 2949
	push hl
	ld hl, 6
	call __BEEPER
__LABEL368:
	ld (ix-3), 255
__LABEL366:
	jp __LABEL364
__LABEL363:
	xor a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	inc (ix-5)
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL383:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL384
	call INKEY
	ld d, h
	ld e, l
	ld bc, -17
	call __PSTORE_STR2
	dec (ix-9)
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL358
	xor a
	call __STRNE
	ld h, (ix-8)
	or a
	jr z, __LABEL1261
	ld a, h
__LABEL1261:
	push af
	ld a, 1
	cp (ix-9)
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1262
	ld a, h
__LABEL1262:
	or a
	jp nz, __LABEL383
	ld (ix-8), 0
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL358
	xor a
	call __STRNE
	or a
	jp z, __LABEL388
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL389
	xor a
	call __STREQ
	or a
	jp z, __LABEL390
	ld a, (ix-4)
	push af
	ld a, (ix-4)
	push af
	xor a
	push af
	ld a, 255
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _WillCollide
	or a
	jp nz, __LABEL393
	xor a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	dec (ix-6)
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	call _UpdateScreen
	ld (ix-8), 1
	ld (ix-9), 70
__LABEL393:
	jp __LABEL391
__LABEL390:
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL394
	xor a
	call __STREQ
	or a
	jp z, __LABEL395
	ld a, (ix-4)
	push af
	ld a, (ix-4)
	push af
	xor a
	push af
	ld a, 1
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _WillCollide
	or a
	jp nz, __LABEL398
	xor a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	inc (ix-6)
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	call _UpdateScreen
	ld (ix-8), 1
	ld (ix-9), 70
__LABEL398:
	jp __LABEL396
__LABEL395:
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL399
	xor a
	call __STREQ
	or a
	jp nz, __LABEL384
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL402
	xor a
	call __STREQ
	or a
	jp z, __LABEL403
	ld a, (ix-4)
	inc a
	ld (ix-11), a
	ld h, a
	ld a, 4
	cp h
	jp nc, __LABEL406
	ld (ix-11), 1
__LABEL406:
	ld a, (ix-11)
	push af
	ld a, (ix-4)
	push af
	xor a
	push af
	xor a
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _WillCollide
	or a
	jp nz, __LABEL408
	xor a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	ld a, (ix-11)
	ld (ix-4), a
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	call _UpdateScreen
	ld (ix-8), 1
	ld (ix-9), 200
__LABEL408:
	jp __LABEL404
__LABEL403:
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL409
	xor a
	call __STREQ
	or a
	jp z, __LABEL411
	xor a
	jp _RunTetris__leave
__LABEL411:
__LABEL404:
__LABEL396:
__LABEL391:
__LABEL388:
	jp __LABEL383
__LABEL384:
__LABEL364:
	jp __LABEL359
__LABEL360:
	ld hl, 2949
	push hl
	ld hl, 28
	call __BEEPER
	ld hl, 3314
	push hl
	ld hl, 25
	call __BEEPER
	ld hl, 3947
	push hl
	ld hl, 21
	call __BEEPER
	ld hl, 4434
	push hl
	ld hl, 19
	call __BEEPER
	xor a
_RunTetris__leave:
	ex af, af'
	exx
	ld l, (ix-17)
	ld h, (ix-16)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_LoadArkanoidScreen:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld (ix-1), 1
	jp __LABEL412
__LABEL415:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _arkaScreens
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (ix-4), l
	ld (ix-3), h
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 512
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL418
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 1
	push af
	call _SetCell
	inc (ix-2)
__LABEL418:
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 256
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL420
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 2
	push af
	call _SetCell
	inc (ix-2)
__LABEL420:
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 128
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL422
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 3
	push af
	call _SetCell
	inc (ix-2)
__LABEL422:
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 64
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL424
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 4
	push af
	call _SetCell
	inc (ix-2)
__LABEL424:
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 32
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL426
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 5
	push af
	call _SetCell
	inc (ix-2)
__LABEL426:
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 16
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL428
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 6
	push af
	call _SetCell
	inc (ix-2)
__LABEL428:
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 8
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL430
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 7
	push af
	call _SetCell
	inc (ix-2)
__LABEL430:
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 4
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL432
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 8
	push af
	call _SetCell
	inc (ix-2)
__LABEL432:
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 2
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL434
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 9
	push af
	call _SetCell
	inc (ix-2)
__LABEL434:
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 1
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL436
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	call _SetCell
	inc (ix-2)
__LABEL436:
	inc (ix-1)
__LABEL412:
	ld a, 12
	cp (ix-1)
	jp nc, __LABEL415
	call _UpdateScreen
	ld a, (ix-2)
_LoadArkanoidScreen__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_GetSpeedX:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld a, (ix+5)
	or a
	jp nz, __LABEL437
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld a, l
	ld (ix-1), a
	cp 20
	jp nc, __LABEL439
	ld a, 081h
	ld de, 00080h
	ld bc, 00000h
	jp _GetSpeedX__leave
__LABEL439:
	ld a, 080h
	ld de, 00080h
	ld bc, 00000h
	jp _GetSpeedX__leave
__LABEL437:
	ld a, (ix+5)
	dec a
	jp nz, __LABEL441
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld a, l
	ld (ix-1), a
	cp 10
	jp nc, __LABEL443
	ld a, 080h
	ld de, 00080h
	ld bc, 00000h
	jp _GetSpeedX__leave
__LABEL443:
	ld a, (ix-1)
	cp 20
	jp nc, __LABEL445
	ld a, 000h
	ld de, 00000h
	ld bc, 00000h
	jp _GetSpeedX__leave
__LABEL445:
	ld a, 080h
	ld de, 00000h
	ld bc, 00000h
	jp _GetSpeedX__leave
__LABEL441:
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld a, l
	ld (ix-1), a
	cp 20
	jp nc, __LABEL447
	ld a, 081h
	ld de, 00000h
	ld bc, 00000h
	jp _GetSpeedX__leave
__LABEL447:
	ld a, 080h
	ld de, 00000h
	ld bc, 00000h
_GetSpeedX__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_GetSpeedY:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld a, l
	ld (ix-1), a
	cp 20
	jp nc, __LABEL449
	ld a, 081h
	ld de, 00080h
	ld bc, 00000h
	jp _GetSpeedY__leave
__LABEL449:
	ld a, 080h
	ld de, 00080h
	ld bc, 00000h
_GetSpeedY__leave:
	ld sp, ix
	pop ix
	ret
_RunArkanoid:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -41
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 40
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL1263
	ld bc, 1
	ldir
	ld a, (_playedArkaMusic)
	or a
	jp nz, __LABEL452
	ld a, 1
	ld (_playedArkaMusic), a
	ld hl, 96
	push hl
	ld hl, _arkaIntroMusic
	push hl
	call _PlayMusic
__LABEL452:
	ld de, __LABEL358
	ld bc, -21
	call __PSTORE_STR
	call _HideNextTitle
	ld a, (ix-3)
	push af
	call _SetLifes
__LABEL453:
	ld a, (ix-1)
	or a
	jp nz, __LABEL454
	ld a, (ix-4)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL456
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL456:
	ld a, (ix-5)
	ld h, a
	xor a
	call __LTI8
	or a
	jp z, __LABEL458
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
__LABEL458:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	inc a
	push af
	call _LoadArkanoidScreen
	ld (ix-7), a
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld h, a
	ld a, 11
	sub h
	ld (ix-2), a
	ld a, (ix+5)
	push af
	call _SetLevel
__LABEL459:
	ld a, (ix-7)
	ld h, a
	xor a
	cp h
	sbc a, a
	push af
	ld a, (ix-3)
	ld h, a
	xor a
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1264
	ld a, h
__LABEL1264:
	or a
	jp z, __LABEL460
	ld (ix-4), 4
	ld a, 083h
	ld de, 00040h
	ld bc, 00000h
	ld hl, -26
	call __PSTOREF
	ld (ix-5), 6
	ld a, 085h
	ld de, 00018h
	ld bc, 00000h
	ld hl, -31
	call __PSTOREF
	ld (ix-6), 19
	ld a, 081h
	ld de, 00000h
	ld bc, 00000h
	ld hl, -36
	call __PSTOREF
	ld a, 081h
	ld de, 00080h
	ld bc, 00000h
	ld hl, -41
	call __PSTOREF
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	call _UpdateScreen
	call INKEY
	ld d, h
	ld e, l
	ld bc, -21
	call __PSTORE_STR2
__LABEL461:
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL402
	xor a
	call __STRNE
	or a
	jp z, __LABEL462
	call INKEY
	ld d, h
	ld e, l
	ld bc, -21
	call __PSTORE_STR2
	ld l, (ix-19)
	ld h, (ix-18)
	dec hl
	ld (ix-19), l
	ld (ix-18), h
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL358
	xor a
	call __STRNE
	ld h, (ix-13)
	or a
	jr z, __LABEL1265
	ld a, h
__LABEL1265:
	push af
	ld l, (ix-19)
	ld h, (ix-18)
	ex de, hl
	ld hl, 1
	or a
	sbc hl, de
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1266
	ld a, h
__LABEL1266:
	or a
	jp nz, __LABEL461
	ld (ix-13), 0
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL358
	xor a
	call __STRNE
	or a
	jp z, __LABEL466
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL389
	xor a
	call __STREQ
	or a
	jp z, __LABEL467
	ld a, 1
	cp (ix-4)
	jp nc, __LABEL470
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	dec (ix-4)
	dec (ix-5)
	ld a, (ix-5)
	call __I8TOFREG
	ld hl, -26
	call __PSTOREF
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	call _UpdateScreen
	ld (ix-19), 50
	ld (ix-18), 0
	ld (ix-13), 1
__LABEL470:
	jp __LABEL468
__LABEL467:
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL394
	xor a
	call __STREQ
	or a
	jp z, __LABEL471
	ld a, (ix-4)
	cp 8
	jp nc, __LABEL474
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	inc (ix-4)
	inc (ix-5)
	ld a, (ix-5)
	call __I8TOFREG
	ld hl, -26
	call __PSTOREF
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	call _UpdateScreen
	ld (ix-19), 50
	ld (ix-18), 0
	ld (ix-13), 1
__LABEL474:
	jp __LABEL472
__LABEL471:
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL409
	xor a
	call __STREQ
	or a
	jp z, __LABEL476
	xor a
	jp _RunArkanoid__leave
__LABEL476:
__LABEL472:
__LABEL468:
__LABEL466:
	jp __LABEL461
__LABEL462:
__LABEL477:
	ld (ix-14), 1
__LABEL479:
	ld a, (ix-14)
	or a
	jp z, __LABEL480
	ld (ix-14), 0
	push ix
	pop hl
	ld de, -26
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __ADDF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ld e, h
	ld d, h
	call __SUB32
	ld a, l
	ld (ix-8), a
	push ix
	pop hl
	ld de, -31
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __ADDF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ld e, h
	ld d, h
	call __SUB32
	ld a, l
	ld (ix-9), a
	ld a, (ix-6)
	add a, (ix-9)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	add a, (ix-8)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	push af
	ld a, (ix-8)
	ld h, 0
	call __LTI8
	push af
	ld a, (ix-9)
	ld h, 0
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1267
	ld a, h
__LABEL1267:
	push af
	ld h, (ix-5)
	ld a, 1
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1268
	ld a, h
__LABEL1268:
	push af
	ld h, (ix-6)
	ld a, 1
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1269
	ld a, h
__LABEL1269:
	push af
	ld a, (ix-8)
	ld h, a
	xor a
	call __LTI8
	push af
	ld a, (ix-9)
	ld h, 0
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1270
	ld a, h
__LABEL1270:
	push af
	ld a, (ix-5)
	ld h, 10
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1271
	ld a, h
__LABEL1271:
	push af
	ld h, (ix-6)
	ld a, 1
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1272
	ld a, h
__LABEL1272:
	pop de
	or d
	push af
	ld a, (ix-8)
	ld h, 0
	call __LTI8
	push af
	ld a, (ix-9)
	ld h, a
	xor a
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1273
	ld a, h
__LABEL1273:
	push af
	ld h, (ix-5)
	ld a, 1
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1274
	ld a, h
__LABEL1274:
	push af
	ld a, (ix-6)
	ld h, 12
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1275
	ld a, h
__LABEL1275:
	pop de
	or d
	push af
	ld a, (ix-8)
	ld h, a
	xor a
	call __LTI8
	push af
	ld a, (ix-9)
	ld h, a
	xor a
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1276
	ld a, h
__LABEL1276:
	push af
	ld a, (ix-5)
	ld h, 10
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1277
	ld a, h
__LABEL1277:
	push af
	ld a, (ix-6)
	ld h, 12
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1278
	ld a, h
__LABEL1278:
	pop de
	or d
	ld h, a
	pop af
	or a
	jr z, __LABEL1279
	ld a, h
__LABEL1279:
	or a
	jp z, __LABEL481
	ld a, (ix-6)
	add a, (ix-9)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL484
	xor a
	push af
	ld a, (ix-6)
	add a, (ix-9)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -41
	call __PSTOREF
	ld (ix-14), 1
__LABEL484:
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	add a, (ix-8)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL486
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	add a, (ix-8)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
	ld (ix-14), 1
__LABEL486:
	ld a, (ix-14)
	or a
	jp nz, __LABEL488
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld a, l
	ld (ix-15), a
	cp 10
	jp nc, __LABEL489
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -41
	call __PSTOREF
	jp __LABEL490
__LABEL489:
	ld a, (ix-15)
	cp 20
	jp nc, __LABEL491
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
	jp __LABEL492
__LABEL491:
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -41
	call __PSTOREF
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
__LABEL492:
__LABEL490:
	xor a
	push af
	ld a, (ix-6)
	add a, (ix-9)
	push af
	ld a, (ix-5)
	add a, (ix-8)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
	ld (ix-14), 1
__LABEL488:
	jp __LABEL482
__LABEL481:
	ld a, (ix-9)
	ld h, 0
	call __LTI8
	or a
	jp z, __LABEL493
	ld a, (ix-6)
	dec a
	jp nz, __LABEL495
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -41
	call __PSTOREF
	ld (ix-14), 1
	jp __LABEL496
__LABEL495:
	ld a, (ix-6)
	add a, (ix-9)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL498
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -41
	call __PSTOREF
	ld (ix-14), 1
	xor a
	push af
	ld a, (ix-6)
	add a, (ix-9)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
__LABEL498:
__LABEL496:
	jp __LABEL494
__LABEL493:
	ld a, (ix-9)
	ld h, a
	xor a
	call __LTI8
	or a
	jp z, __LABEL500
	ld a, (ix-6)
	sub 19
	jp nz, __LABEL501
	ld h, (ix-5)
	ld a, (ix-4)
	call __LEI8
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-4)
	add a, 3
	ld h, a
	pop af
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1280
	ld a, h
__LABEL1280:
	or a
	jp z, __LABEL503
	ld a, (ix-5)
	sub (ix-4)
	push af
	call _GetSpeedX
	ld hl, -36
	call __PSTOREF
	call _GetSpeedY
	ld hl, -41
	call __PSTOREF
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	res 7, e
	push bc
	push de
	push af
	ld a, 081h
	ld de, 00000h
	ld bc, 00000h
	call __LTF
	push af
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	res 7, e
	push bc
	push de
	push af
	ld a, 081h
	ld de, 00000h
	ld bc, 00000h
	call __LTF
	ld h, a
	pop af
	or a
	jr z, __LABEL1281
	ld a, h
__LABEL1281:
	or a
	jp z, __LABEL506
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	ld a, 082h
	ld de, 00000h
	ld bc, 00000h
	call __MULF
	ld hl, -41
	call __PSTOREF
__LABEL506:
	ld a, (ix-5)
	sub 10
	sub 1
	sbc a, a
	push af
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	ld a, 000h
	ld de, 00000h
	ld bc, 00000h
	call __GTF
	ld h, a
	pop af
	or a
	jr z, __LABEL1282
	ld a, h
__LABEL1282:
	or a
	jp z, __LABEL508
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
__LABEL508:
	ld a, (ix-5)
	dec a
	sub 1
	sbc a, a
	push af
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	ld a, 000h
	ld de, 00000h
	ld bc, 00000h
	call __LTF
	ld h, a
	pop af
	or a
	jr z, __LABEL1283
	ld a, h
__LABEL1283:
	or a
	jp z, __LABEL510
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
__LABEL510:
	ld (ix-11), 1
	jp __LABEL504
__LABEL503:
	ld (ix-12), 1
__LABEL504:
	jp __LABEL502
__LABEL501:
	ld a, (ix-6)
	add a, (ix-9)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL512
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -41
	call __PSTOREF
	ld (ix-14), 1
	xor a
	push af
	ld a, (ix-6)
	add a, (ix-9)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
__LABEL512:
__LABEL502:
__LABEL500:
__LABEL494:
	ld a, (ix-8)
	ld h, 0
	call __LTI8
	or a
	jp z, __LABEL513
	ld a, (ix-5)
	dec a
	jp nz, __LABEL515
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
	ld (ix-14), 1
	jp __LABEL516
__LABEL515:
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	add a, (ix-8)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL518
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
	ld (ix-14), 1
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	add a, (ix-8)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
__LABEL518:
__LABEL516:
	jp __LABEL514
__LABEL513:
	ld a, (ix-8)
	ld h, a
	xor a
	call __LTI8
	or a
	jp z, __LABEL520
	ld a, (ix-5)
	sub 10
	jp nz, __LABEL521
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
	ld (ix-14), 1
	jp __LABEL522
__LABEL521:
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	add a, (ix-8)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL524
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
	ld (ix-14), 1
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	add a, (ix-8)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
__LABEL524:
__LABEL522:
__LABEL520:
__LABEL514:
__LABEL482:
	ld a, (ix-14)
	or a
	jp z, __LABEL526
	call _UpdateScreen
__LABEL526:
	jp __LABEL479
__LABEL480:
	ld a, (ix-7)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL527
	ld a, (ix-12)
	or a
	jp z, __LABEL529
	ld (ix-12), 0
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	call _UpdateScreen
	ld hl, 24
	push hl
	ld hl, _arkaDeathMusic
	push hl
	call _PlayMusic
	dec (ix-3)
	ld a, (ix-3)
	or a
	jp z, __LABEL478
	ld a, (ix-3)
	push af
	call _SetLifes
	xor a
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	call _UpdateScreen
	jp __LABEL478
__LABEL529:
	ld a, (ix-11)
	or a
	jp z, __LABEL533
	ld (ix-11), 0
	ld (ix-10), 0
	ld hl, 3314
	push hl
	ld hl, 0
	call __BEEPER
	jp __LABEL534
__LABEL533:
	ld a, (ix-10)
	or a
	jp z, __LABEL536
	ld (ix-11), 0
	ld (ix-10), 0
	ld hl, 806
	push hl
	ld hl, 4
	call __BEEPER
__LABEL536:
__LABEL534:
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	push ix
	pop hl
	ld de, -26
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __ADDF
	ld hl, -26
	call __PSTOREF
	push ix
	pop hl
	ld de, -31
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __ADDF
	ld hl, -31
	call __PSTOREF
	push ix
	pop hl
	ld de, -26
	add hl, de
	call __PLOADF
	call __FTOU32REG
	ld a, l
	ld (ix-5), a
	push ix
	pop hl
	ld de, -31
	add hl, de
	call __PLOADF
	call __FTOU32REG
	ld a, l
	ld (ix-6), a
	ld a, 1
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	call _UpdateScreen
	call _ResetFrameCounter
	ld (ix-13), 0
__LABEL537:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL538
	call INKEY
	ld d, h
	ld e, l
	ld bc, -21
	call __PSTORE_STR2
	ld l, (ix-19)
	ld h, (ix-18)
	dec hl
	ld (ix-19), l
	ld (ix-18), h
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL358
	xor a
	call __STRNE
	ld h, (ix-13)
	or a
	jr z, __LABEL1284
	ld a, h
__LABEL1284:
	push af
	ld l, (ix-19)
	ld h, (ix-18)
	ex de, hl
	ld hl, 1
	or a
	sbc hl, de
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1285
	ld a, h
__LABEL1285:
	or a
	jp nz, __LABEL537
	ld (ix-13), 0
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL358
	xor a
	call __STRNE
	or a
	jp z, __LABEL542
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL389
	xor a
	call __STREQ
	or a
	jp z, __LABEL543
	ld a, 1
	cp (ix-4)
	jp nc, __LABEL546
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	dec (ix-4)
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	call _UpdateScreen
	ld (ix-19), 50
	ld (ix-18), 0
	ld (ix-13), 1
__LABEL546:
	jp __LABEL544
__LABEL543:
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL394
	xor a
	call __STREQ
	or a
	jp z, __LABEL547
	ld a, (ix-4)
	cp 8
	jp nc, __LABEL550
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	inc (ix-4)
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	call _UpdateScreen
	ld (ix-19), 50
	ld (ix-18), 0
	ld (ix-13), 1
__LABEL550:
	jp __LABEL548
__LABEL547:
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL402
	xor a
	call __STREQ
	or a
	jp nz, __LABEL538
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL409
	xor a
	call __STREQ
	or a
	jp z, __LABEL554
	xor a
	jp _RunArkanoid__leave
__LABEL554:
__LABEL548:
__LABEL544:
__LABEL542:
	jp __LABEL537
__LABEL538:
	jp __LABEL528
__LABEL527:
	jp __LABEL478
__LABEL528:
	jp __LABEL477
__LABEL478:
	jp __LABEL459
__LABEL460:
	ld a, (ix-3)
	or a
	jp nz, __LABEL555
	ld (ix-1), 1
	jp __LABEL556
__LABEL555:
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, 50
	add hl, de
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	inc (ix+5)
	ld a, 99
	cp (ix+5)
	jp nc, __LABEL558
	ld a, 1
	jp _RunArkanoid__leave
__LABEL558:
	call _ShowCurtain
__LABEL556:
	jp __LABEL453
__LABEL454:
	xor a
_RunArkanoid__leave:
	ex af, af'
	exx
	ld l, (ix-21)
	ld h, (ix-20)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_RunRacing:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -19
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 18
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -1
	add hl, bc
	ex de, hl
	ld hl, __LABEL1286
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -9
	add hl, bc
	ex de, hl
	ld hl, __LABEL1287
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -10
	add hl, bc
	ex de, hl
	ld hl, __LABEL1288
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -12
	add hl, bc
	ex de, hl
	ld hl, __LABEL1289
	ld bc, 1
	ldir
	ld a, (_playedRacingMusic)
	or a
	jp nz, __LABEL560
	ld a, 1
	ld (_playedRacingMusic), a
	ld hl, 42
	push hl
	ld hl, _raceIntroMusic
	push hl
	call _PlayMusic
__LABEL560:
	call _HideNextTitle
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	call _SetScore
__LABEL561:
	ld a, (ix-12)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL562
	ld (ix-3), 0
	ld (ix-6), 0
	ld (ix-9), 20
	ld (ix-10), 3
	ld (ix-1), 1
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld a, l
	ld (ix-13), a
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	ld h, a
	ld a, 10
	sub h
	ld (ix-14), a
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld bc, 0
	push bc
	ld bc, 10
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-15), a
	ld a, (ix-12)
	push af
	call _SetLifes
	ld a, (ix+5)
	push af
	call _SetLevel
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 1
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 3
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	push af
	ld a, 18
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 17
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL563:
	ld a, (ix-11)
	or a
	jp nz, __LABEL564
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 1
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 1
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 10
	push af
	call _SetCell
	ld a, (ix-1)
	dec a
	jp nz, __LABEL565
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	call _SetCell
	jp __LABEL566
__LABEL565:
	ld a, 1
	push af
	ld a, (ix-1)
	dec a
	push af
	ld a, 1
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, (ix-1)
	dec a
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL566:
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 9
	push af
	ld a, 1
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 9
	push af
	ld a, 10
	push af
	call _SetCell
	ld a, (ix-1)
	sub 10
	jp nz, __LABEL567
	ld (ix-1), 1
	jp __LABEL568
__LABEL567:
	inc (ix-1)
__LABEL568:
	ld a, (ix-3)
	sub 1
	sbc a, a
	push af
	ld h, (ix-9)
	ld a, 6
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1290
	ld a, h
__LABEL1290:
	push af
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix-13)
	inc a
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	call __LEI32
	ld h, a
	pop af
	or a
	jr z, __LABEL1291
	ld a, h
__LABEL1291:
	or a
	jp z, __LABEL569
	ld (ix-5), 254
	call RND
	push bc
	push de
	push af
	ld a, 082h
	ld de, 00000h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	push hl
	push de
	ld de, 0
	ld hl, 3
	call __MUL32
	ld a, l
	ld (ix-4), a
	ld (ix-9), 254
	ld a, 253
	push af
	ld a, (ix-4)
	push af
	call _PlaceCar
	ld (ix-3), 1
	jp __LABEL570
__LABEL569:
	ld a, (ix-3)
	or a
	jp z, __LABEL572
	ld a, (ix-5)
	push af
	ld a, (ix-4)
	push af
	call _PlaceCar
	inc (ix-5)
	ld a, (ix-5)
	ld (ix-9), a
	ld h, (ix-5)
	ld a, 20
	call __LTI8
	or a
	jp z, __LABEL574
	ld (ix-3), 0
	dec (ix-15)
	ld l, (ix-19)
	ld h, (ix-18)
	inc hl
	ld (ix-19), l
	ld (ix-18), h
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	call _SetScore
	ld a, (ix-15)
	or a
	jp z, __LABEL564
__LABEL574:
	ld a, (ix-3)
	push af
	ld h, (ix-5)
	ld a, 4
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1292
	ld a, h
__LABEL1292:
	push af
	ld a, (ix-5)
	ld h, 12
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1293
	ld a, h
__LABEL1293:
	push af
	call RND
	push bc
	push de
	push af
	ld a, 086h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix-13)
	inc a
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	call __LEI32
	ld h, a
	pop af
	or a
	jr z, __LABEL1294
	ld a, h
__LABEL1294:
	or a
	jp z, __LABEL578
	ld a, (ix-4)
	sub 3
	jp nz, __LABEL579
	ld (ix-2), 3
	jp __LABEL580
__LABEL579:
	ld (ix-2), 253
__LABEL580:
	call _UpdateScreen
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-5)
	add a, 4
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-4)
	add a, 3
	push af
	ld a, (ix-4)
	push af
	call _MoveRect
	ld a, (ix-4)
	add a, (ix-2)
	ld (ix-4), a
__LABEL578:
__LABEL572:
__LABEL570:
	ld a, (ix-6)
	sub 1
	sbc a, a
	push af
	ld h, (ix-9)
	ld a, 6
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1295
	ld a, h
__LABEL1295:
	push af
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix-13)
	inc a
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	call __LEI32
	ld h, a
	pop af
	or a
	jr z, __LABEL1296
	ld a, h
__LABEL1296:
	or a
	jp z, __LABEL581
	call RND
	push bc
	push de
	push af
	ld a, 082h
	ld de, 00000h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	push hl
	push de
	ld de, 0
	ld hl, 3
	call __MUL32
	ld a, l
	ld (ix-7), a
	ld (ix-8), 254
	ld (ix-9), 254
	ld a, 253
	push af
	ld a, (ix-7)
	push af
	call _PlaceCar
	ld (ix-6), 1
	jp __LABEL582
__LABEL581:
	ld a, (ix-6)
	or a
	jp z, __LABEL584
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _PlaceCar
	inc (ix-8)
	ld a, (ix-8)
	ld h, (ix-9)
	call __LTI8
	ld d, a
	ld a, (ix-3)
	sub 1
	sbc a, a
	or d
	jp z, __LABEL586
	ld a, (ix-8)
	ld (ix-9), a
__LABEL586:
	ld h, (ix-8)
	ld a, 20
	call __LTI8
	or a
	jp z, __LABEL588
	ld (ix-6), 0
	dec (ix-15)
	ld l, (ix-19)
	ld h, (ix-18)
	inc hl
	ld (ix-19), l
	ld (ix-18), h
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	call _SetScore
	ld a, (ix-15)
	or a
	jp z, __LABEL564
__LABEL588:
	ld a, (ix-6)
	push af
	ld h, (ix-8)
	ld a, 4
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1297
	ld a, h
__LABEL1297:
	push af
	ld a, (ix-8)
	ld h, 12
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1298
	ld a, h
__LABEL1298:
	push af
	call RND
	push bc
	push de
	push af
	ld a, 086h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix-13)
	inc a
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	call __LEI32
	ld h, a
	pop af
	or a
	jr z, __LABEL1299
	ld a, h
__LABEL1299:
	or a
	jp z, __LABEL592
	ld a, (ix-7)
	sub 3
	jp nz, __LABEL593
	ld (ix-2), 3
	jp __LABEL594
__LABEL593:
	ld (ix-2), 253
__LABEL594:
	call _UpdateScreen
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-8)
	add a, 4
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	add a, 3
	push af
	ld a, (ix-7)
	push af
	call _MoveRect
	ld a, (ix-7)
	add a, (ix-2)
	ld (ix-7), a
__LABEL592:
__LABEL584:
__LABEL582:
	ld a, (ix-3)
	push af
	ld h, (ix-5)
	ld a, 13
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1300
	ld a, h
__LABEL1300:
	push af
	ld a, (ix-4)
	sub (ix-10)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1301
	ld a, h
__LABEL1301:
	push af
	ld a, (ix-6)
	push af
	ld h, (ix-8)
	ld a, 13
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1302
	ld a, h
__LABEL1302:
	push af
	ld a, (ix-7)
	sub (ix-10)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1303
	ld a, h
__LABEL1303:
	pop de
	or d
	jp z, __LABEL596
	ld (ix-11), 1
	jp __LABEL564
__LABEL596:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL597:
	ld a, (ix-14)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL598
	call INKEY
	ld d, h
	ld e, l
	ld bc, -17
	call __PSTORE_STR2
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL389
	xor a
	call __STREQ
	or a
	jp z, __LABEL599
	ld a, (ix-10)
	sub 6
	jp nz, __LABEL602
	xor a
	push af
	ld a, 253
	push af
	ld a, 20
	push af
	ld a, 17
	push af
	ld a, 8
	push af
	ld a, 6
	push af
	call _MoveRect
	call _UpdateScreen
	ld (ix-10), 3
	ld a, (ix-3)
	push af
	ld h, (ix-5)
	ld a, 13
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1304
	ld a, h
__LABEL1304:
	push af
	ld a, (ix-4)
	sub (ix-10)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1305
	ld a, h
__LABEL1305:
	push af
	ld a, (ix-6)
	push af
	ld h, (ix-8)
	ld a, 13
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1306
	ld a, h
__LABEL1306:
	push af
	ld a, (ix-7)
	sub (ix-10)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1307
	ld a, h
__LABEL1307:
	pop de
	or d
	jp z, __LABEL604
	ld (ix-11), 1
	jp __LABEL598
__LABEL604:
__LABEL602:
	jp __LABEL600
__LABEL599:
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL394
	xor a
	call __STREQ
	or a
	jp z, __LABEL605
	ld a, (ix-10)
	sub 3
	jp nz, __LABEL608
	xor a
	push af
	ld a, 3
	push af
	ld a, 20
	push af
	ld a, 17
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _MoveRect
	call _UpdateScreen
	ld (ix-10), 6
	ld a, (ix-3)
	push af
	ld h, (ix-5)
	ld a, 13
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1308
	ld a, h
__LABEL1308:
	push af
	ld a, (ix-4)
	sub (ix-10)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1309
	ld a, h
__LABEL1309:
	push af
	ld a, (ix-6)
	push af
	ld h, (ix-8)
	ld a, 13
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1310
	ld a, h
__LABEL1310:
	push af
	ld a, (ix-7)
	sub (ix-10)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1311
	ld a, h
__LABEL1311:
	pop de
	or d
	jp z, __LABEL610
	ld (ix-11), 1
	jp __LABEL598
__LABEL610:
__LABEL608:
	jp __LABEL606
__LABEL605:
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL611
	xor a
	call __STREQ
	or a
	jp nz, __LABEL598
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL409
	xor a
	call __STREQ
	or a
	jp z, __LABEL615
	xor a
	jp _RunRacing__leave
__LABEL615:
__LABEL606:
__LABEL600:
	jp __LABEL597
__LABEL598:
	jp __LABEL563
__LABEL564:
	ld a, (ix-11)
	or a
	jp z, __LABEL616
	dec (ix-12)
	xor a
	push af
	ld a, 18
	push af
	ld a, (ix-10)
	inc a
	push af
	call _Explode
	call _ShowCurtain
	ld (ix-11), 0
	jp __LABEL617
__LABEL616:
	inc (ix+5)
	ld a, 99
	cp (ix+5)
	jp nc, __LABEL619
	ld a, 1
	jp _RunRacing__leave
__LABEL619:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	or a
	jp nz, __LABEL621
	ld hl, 14
	push hl
	ld hl, _raceLevelMusic
	push hl
	call _PlayMusic
__LABEL621:
	ld l, (ix-19)
	ld h, (ix-18)
	ld de, 10
	add hl, de
	ld (ix-19), l
	ld (ix-18), h
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	call _SetScore
	call _ShowCurtain
__LABEL617:
	jp __LABEL561
__LABEL562:
	xor a
_RunRacing__leave:
	ex af, af'
	exx
	ld l, (ix-17)
	ld h, (ix-16)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_PlaceCar:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+7)
	ld h, 1
	call __LTI8
	or a
	jp z, __LABEL622
	xor a
	push af
	ld a, (ix+7)
	add a, 3
	push af
	ld a, 1
	push af
	ld a, (ix+5)
	add a, 3
	push af
	ld a, (ix+5)
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, (ix+7)
	add a, 4
	push af
	ld a, (ix+5)
	inc a
	push af
	call _SetCell
	ld h, (ix+7)
	ld a, 253
	call __LTI8
	or a
	jp z, __LABEL625
	ld a, 1
	push af
	ld a, (ix+7)
	add a, 3
	push af
	ld a, (ix+5)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, (ix+7)
	add a, 3
	push af
	ld a, (ix+5)
	inc a
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, (ix+7)
	add a, 3
	push af
	ld a, (ix+5)
	add a, 2
	push af
	call _SetCell
__LABEL625:
	ld h, (ix+7)
	ld a, 254
	call __LTI8
	or a
	jp z, __LABEL627
	ld a, 1
	push af
	ld a, (ix+7)
	add a, 2
	push af
	ld a, (ix+5)
	inc a
	push af
	call _SetCell
__LABEL627:
	ld a, (ix+7)
	or a
	jp nz, __LABEL629
	ld a, 1
	push af
	ld a, (ix+7)
	inc a
	push af
	ld a, (ix+5)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, (ix+7)
	inc a
	push af
	ld a, (ix+5)
	add a, 2
	push af
	call _SetCell
__LABEL629:
	jp __LABEL623
__LABEL622:
	ld h, (ix+7)
	ld a, 16
	call __LTI8
	or a
	jp z, __LABEL630
	ld a, (ix+7)
	sub 20
	jp nz, __LABEL632
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix+5)
	add a, 2
	push af
	ld a, (ix+5)
	push af
	call _FillRect
	jp __LABEL633
__LABEL632:
	ld a, 1
	push af
	xor a
	push af
	ld a, 19
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	add a, 2
	push af
	ld a, (ix+5)
	push af
	call _MoveRect
__LABEL633:
	jp __LABEL631
__LABEL630:
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix+7)
	add a, 3
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	add a, 2
	push af
	ld a, (ix+5)
	push af
	call _MoveRect
__LABEL631:
__LABEL623:
_PlaceCar__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_LoadSnakeScreen:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld (ix-1), 1
	jp __LABEL634
__LABEL637:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _snakeScreens
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (ix-3), l
	ld (ix-2), h
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 512
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL640
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 1
	push af
	call _SetCell
__LABEL640:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 256
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL642
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 2
	push af
	call _SetCell
__LABEL642:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 128
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL644
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 3
	push af
	call _SetCell
__LABEL644:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 64
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL646
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL646:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 32
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL648
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 5
	push af
	call _SetCell
__LABEL648:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 16
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL650
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 6
	push af
	call _SetCell
__LABEL650:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 8
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL652
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 7
	push af
	call _SetCell
__LABEL652:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 4
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL654
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 8
	push af
	call _SetCell
__LABEL654:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 2
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL656
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL656:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 1
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL658
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL658:
	inc (ix-1)
__LABEL634:
	ld a, 20
	cp (ix-1)
	jp nc, __LABEL637
_LoadSnakeScreen__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_RunSnake:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -22
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 21
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL1312
	ld bc, 1
	ldir
	ld hl, -22
	ld de, __LABEL1313
	ld bc, 40
	call __ALLOC_LOCAL_ARRAY
	push ix
	pop hl
	ld bc, -9
	add hl, bc
	ex de, hl
	ld hl, __LABEL1314
	ld bc, 1
	ldir
	ld a, (_playedSnakeMusic)
	or a
	jp nz, __LABEL660
	ld a, 1
	ld (_playedSnakeMusic), a
	ld hl, 40
	push hl
	ld hl, _snakeIntroMusic
	push hl
	call _PlayMusic
__LABEL660:
	call _HideNextTitle
	ld l, (ix-18)
	ld h, (ix-17)
	push hl
	call _SetScore
__LABEL661:
	ld a, (ix-3)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL662
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 6
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-13), a
	ld (ix-12), 0
	ld (ix-5), 4
	ld (ix-6), 0
	ld l, (ix-20)
	ld h, (ix-19)
	ld a, 5
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	inc hl
	ld a, 10
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	inc hl
	inc hl
	ld a, 5
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	inc hl
	inc hl
	inc hl
	ld a, 11
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	ld de, 4
	add hl, de
	ld a, 5
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	ld de, 5
	add hl, de
	ld a, 12
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	ld de, 6
	add hl, de
	ld a, 5
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	ld de, 7
	add hl, de
	ld a, 13
	ld (hl), a
	ld a, (ix+5)
	push af
	call _SetLevel
	ld a, (ix-3)
	push af
	call _SetLifes
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	inc a
	push af
	call _LoadSnakeScreen
	call _UpdateScreen
	ld (ix-9), 1
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld bc, 0
	push bc
	ld bc, 12
	push bc
	call __SUB32
	ld a, l
	ld (ix-4), a
	ld (ix-14), 50
__LABEL663:
	ld a, (ix-2)
	or a
	jp nz, __LABEL664
	ld hl, 0
	push hl
	ld a, (ix-5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	ld (ix-7), a
	ld hl, 1
	push hl
	ld a, (ix-5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	ld (ix-8), a
	ld a, (ix-5)
	ld (ix-1), a
	jp __LABEL665
__LABEL668:
	ld a, (ix-1)
	sub (ix-5)
	jp nz, __LABEL670
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	ld (ix-7), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	ld (ix-8), a
	xor a
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	ld hl, 0
	push hl
	ld a, (ix-1)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-9)
	or a
	jp z, __LABEL673
	ld a, 1
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	call _SetCell
__LABEL673:
	jp __LABEL671
__LABEL670:
	ld a, (ix-1)
	dec a
	jp nz, __LABEL674
	ld a, (ix-6)
	or a
	jp nz, __LABEL676
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	dec a
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL677
__LABEL676:
	ld a, (ix-6)
	dec a
	jp nz, __LABEL678
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	inc a
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL679
__LABEL678:
	ld a, (ix-6)
	sub 2
	jp nz, __LABEL680
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	dec a
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL681
__LABEL680:
	ld a, (ix-6)
	sub 3
	jp nz, __LABEL683
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	inc a
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
__LABEL683:
__LABEL681:
__LABEL679:
__LABEL677:
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, 10
	cp (hl)
	sbc a, a
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop de
	ld a, (hl)
	cp 1
	sbc a, a
	or d
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop de
	ld a, 20
	cp (hl)
	sbc a, a
	or d
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop de
	ld a, (hl)
	cp 1
	sbc a, a
	or d
	jp z, __LABEL685
	ld (ix-2), 1
	jp __LABEL664
__LABEL685:
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL687
	ld a, (ix-12)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	sub (ix-10)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1315
	ld a, h
__LABEL1315:
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	sub (ix-11)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1316
	ld a, h
__LABEL1316:
	or a
	jp z, __LABEL688
	ld hl, 388
	push hl
	ld hl, 25
	call __BEEPER
	ld l, (ix-18)
	ld h, (ix-17)
	inc hl
	ld (ix-18), l
	ld (ix-17), h
	dec (ix-13)
	ld a, (ix-13)
	or a
	jp z, __LABEL664
	inc (ix-5)
	ld a, (ix-7)
	push af
	ld hl, 0
	push hl
	ld a, (ix-5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-8)
	push af
	ld hl, 1
	push hl
	ld a, (ix-5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld l, (ix-18)
	ld h, (ix-17)
	push hl
	call _SetScore
	ld a, 1
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	ld (ix-12), 0
	jp __LABEL689
__LABEL688:
	ld (ix-2), 1
	jp __LABEL664
__LABEL689:
__LABEL687:
	ld a, 1
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	call _SetCell
	jp __LABEL675
__LABEL674:
	ld hl, 0
	push hl
	ld a, (ix-1)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-9)
	or a
	jp z, __LABEL693
	ld a, 1
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	call _SetCell
__LABEL693:
__LABEL675:
__LABEL671:
	dec (ix-1)
__LABEL665:
	ld a, (ix-1)
	ld h, 1
	call __LTI8
	or a
	jp z, __LABEL668
	call _UpdateScreen
	ld a, (ix-12)
	or a
	jp nz, __LABEL695
	ld a, (ix-14)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL696
	dec (ix-14)
	jp __LABEL697
__LABEL696:
	call RND
	push bc
	push de
	push af
	ld a, 087h
	ld de, 00048h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	push hl
	ld de, 0
	ld hl, 10
	call __MUL32
	call __LEI32
	or a
	jp nz, __LABEL699
__LABEL700:
	call RND
	push bc
	push de
	push af
	ld a, 084h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-10), a
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-11), a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp nz, __LABEL700
	ld (ix-12), 1
	ld a, 1
	push af
	ld a, (ix-11)
	push af
	ld a, (ix-10)
	push af
	call _SetCell
	call _UpdateScreen
__LABEL699:
__LABEL697:
__LABEL695:
	call _ResetFrameCounter
__LABEL703:
	ld a, (ix-4)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL704
	call INKEY
	ld d, h
	ld e, l
	ld bc, -16
	call __PSTORE_STR2
	ld l, (ix-16)
	ld h, (ix-15)
	ld de, __LABEL389
	xor a
	call __STREQ
	or a
	jp z, __LABEL705
	ld (ix-6), 2
	jp __LABEL706
__LABEL705:
	ld l, (ix-16)
	ld h, (ix-15)
	ld de, __LABEL394
	xor a
	call __STREQ
	or a
	jp z, __LABEL707
	ld (ix-6), 3
	jp __LABEL708
__LABEL707:
	ld l, (ix-16)
	ld h, (ix-15)
	ld de, __LABEL611
	xor a
	call __STREQ
	or a
	jp z, __LABEL709
	ld (ix-6), 0
	jp __LABEL710
__LABEL709:
	ld l, (ix-16)
	ld h, (ix-15)
	ld de, __LABEL399
	xor a
	call __STREQ
	or a
	jp z, __LABEL711
	ld (ix-6), 1
	jp __LABEL712
__LABEL711:
	ld l, (ix-16)
	ld h, (ix-15)
	ld de, __LABEL409
	xor a
	call __STREQ
	or a
	jp z, __LABEL714
	xor a
	jp _RunSnake__leave
__LABEL714:
__LABEL712:
__LABEL710:
__LABEL708:
__LABEL706:
	jp __LABEL703
__LABEL704:
	jp __LABEL663
__LABEL664:
	ld a, (ix-2)
	or a
	jp z, __LABEL715
	dec (ix-3)
	xor a
	push af
	ld l, (ix-20)
	ld h, (ix-19)
	inc hl
	ld a, (hl)
	push af
	ld l, (ix-20)
	ld h, (ix-19)
	ld a, (hl)
	push af
	call _Explode
	call _ShowCurtain
	ld (ix-2), 0
	jp __LABEL716
__LABEL715:
	inc (ix+5)
	ld a, 99
	cp (ix+5)
	jp nc, __LABEL718
	ld a, 1
	jp _RunSnake__leave
__LABEL718:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	or a
	jp nz, __LABEL720
	ld hl, 14
	push hl
	ld hl, _snakeLevelMusic
	push hl
	call _PlayMusic
__LABEL720:
	ld l, (ix-18)
	ld h, (ix-17)
	ld de, 10
	add hl, de
	ld (ix-18), l
	ld (ix-17), h
	ld l, (ix-18)
	ld h, (ix-17)
	push hl
	call _SetScore
	call _ShowCurtain
__LABEL716:
	jp __LABEL661
__LABEL662:
	xor a
_RunSnake__leave:
	ex af, af'
	exx
	ld l, (ix-16)
	ld h, (ix-15)
	call __MEM_FREE
	ld l, (ix-20)
	ld h, (ix-19)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_FindBottom:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL721
__LABEL724:
	ld (ix-2), 1
	jp __LABEL726
__LABEL729:
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL732
	ld a, (ix-1)
	ld (ix-3), a
	jp __LABEL728
__LABEL732:
	inc (ix-2)
__LABEL726:
	ld h, (ix-2)
	ld a, 10
	call __LTI8
	or a
	jp z, __LABEL729
__LABEL728:
	inc (ix-1)
__LABEL721:
	ld h, (ix-1)
	ld a, 17
	call __LTI8
	or a
	jp z, __LABEL724
	ld a, (ix-3)
_FindBottom__leave:
	ld sp, ix
	pop ix
	ret
_RunDestroyer:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -16
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 15
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1317
	ld bc, 1
	ldir
	ld a, (_playedDestroyerMusic)
	or a
	jp nz, __LABEL734
	ld a, 1
	ld (_playedDestroyerMusic), a
	ld hl, 68
	push hl
	ld hl, _destroyerIntroMusic
	push hl
	call _PlayMusic
__LABEL734:
	call _HideNextTitle
	ld l, (ix-14)
	ld h, (ix-13)
	push hl
	call _SetScore
__LABEL735:
	ld a, (ix-4)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL736
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	push hl
	push de
	ld de, 0
	ld hl, 5
	call __MUL32
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 50
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-10), a
	ld (ix-9), 0
	ld (ix-6), 5
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, (ix+5)
	push af
	call _SetLevel
	ld a, (ix-4)
	push af
	call _SetLifes
	call _UpdateScreen
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	push hl
	ld de, 0
	ld hl, 2
	call __MUL32
	ld bc, 0
	push bc
	ld bc, 60
	push bc
	call __SUB32
	ld a, l
	ld (ix-5), a
__LABEL737:
	ld a, (ix-3)
	sub 1
	sbc a, a
	push af
	ld a, (ix-10)
	ld h, a
	xor a
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1318
	ld a, h
__LABEL1318:
	or a
	jp z, __LABEL738
	ld a, (ix-9)
	or a
	jp z, __LABEL740
	xor a
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	call _UpdateScreen
__LABEL740:
	call _FindBottom
	ld (ix-2), a
	ld h, a
	ld a, 16
	call __LTI8
	or a
	jp z, __LABEL741
	ld (ix-3), 1
	jp __LABEL738
__LABEL741:
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _MoveRect
	ld (ix-1), 1
	jp __LABEL743
__LABEL746:
	ld a, 1
	push af
	ld a, 1
	push af
	call RND
	push bc
	push de
	push af
	ld a, 084h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	push af
	call _SetCell
	inc (ix-1)
__LABEL743:
	ld a, (ix-1)
	push af
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld bc, 0
	push bc
	ld bc, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	pop hl
	call __LTI8
	or a
	jp z, __LABEL746
	ld a, (ix-9)
	or a
	jp z, __LABEL749
	ld a, 1
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
__LABEL749:
	ld (ix-16), 0
	ld (ix-15), 0
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL750:
	ld a, (ix-5)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL751
	ld a, (ix-9)
	or a
	jp z, __LABEL753
	ld a, 1
	cp (ix-8)
	sbc a, a
	push af
	ld a, (ix-8)
	dec a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	ld h, (hl)
	or a
	jr z, __LABEL1319
	ld a, h
__LABEL1319:
	or a
	jp z, __LABEL754
	ld hl, 5279
	push hl
	ld hl, 1
	call __BEEPER
	ld (ix-9), 0
	xor a
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-8)
	dec a
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	ld l, (ix-14)
	ld h, (ix-13)
	inc hl
	ld (ix-14), l
	ld (ix-13), h
	ld l, (ix-14)
	ld h, (ix-13)
	push hl
	call _SetScore
	dec (ix-10)
	ld a, (ix-10)
	or a
	jp z, __LABEL751
	jp __LABEL755
__LABEL754:
	ld a, (ix-8)
	dec a
	jp nz, __LABEL758
	ld (ix-9), 0
	xor a
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	jp __LABEL759
__LABEL758:
	xor a
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	dec (ix-8)
	ld a, 1
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
__LABEL759:
__LABEL755:
	call _UpdateScreen
__LABEL753:
	ld l, (ix-16)
	ld h, (ix-15)
	ld de, 0
	call __EQ16
	push af
	ld l, (ix-16)
	ld h, (ix-15)
	push hl
	call _Frames
	ex de, hl
	pop hl
	or a
	sbc hl, de
	pop de
	sbc a, a
	or d
	jp z, __LABEL761
	ld hl, 57090
	call _MultiKeys
	or a
	jp z, __LABEL762
	ld a, (ix-6)
	sub 2
	jp nz, __LABEL764
	xor a
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	dec (ix-6)
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	inc a
	push af
	call _SetCell
	ld (ix-11), 1
	jp __LABEL765
__LABEL764:
	ld a, (ix-6)
	sub 10
	jp nz, __LABEL766
	xor a
	push af
	ld a, 255
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-6)
	dec a
	push af
	call _MoveRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	dec (ix-6)
	ld (ix-11), 1
	jp __LABEL767
__LABEL766:
	ld a, 2
	cp (ix-6)
	jp nc, __LABEL769
	xor a
	push af
	ld a, 255
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _MoveRect
	dec (ix-6)
	ld (ix-11), 1
__LABEL769:
__LABEL767:
__LABEL765:
	jp __LABEL763
__LABEL762:
	ld hl, 57089
	call _MultiKeys
	or a
	jp z, __LABEL770
	ld a, (ix-6)
	sub 9
	jp nz, __LABEL772
	xor a
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	inc (ix-6)
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	dec a
	push af
	call _SetCell
	ld (ix-11), 1
	jp __LABEL773
__LABEL772:
	ld a, (ix-6)
	dec a
	jp nz, __LABEL774
	xor a
	push af
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	push af
	call _MoveRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	inc (ix-6)
	ld (ix-11), 1
	jp __LABEL775
__LABEL774:
	ld a, (ix-6)
	cp 9
	jp nc, __LABEL777
	xor a
	push af
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _MoveRect
	inc (ix-6)
	ld (ix-11), 1
__LABEL777:
__LABEL775:
__LABEL773:
	jp __LABEL771
__LABEL770:
	ld hl, 48912
	call _MultiKeys
	or a
	jp z, __LABEL779
	xor a
	jp _RunDestroyer__leave
__LABEL779:
__LABEL771:
__LABEL763:
	ld hl, 32513
	call _MultiKeys
	or a
	jp z, __LABEL780
	ld a, (ix-9)
	sub 1
	sbc a, a
	push af
	ld a, (ix-12)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1320
	ld a, h
__LABEL1320:
	or a
	jp z, __LABEL783
	ld (ix-9), 1
	ld (ix-12), 1
	ld a, (ix-6)
	ld (ix-7), a
	ld (ix-8), 18
	ld a, 1
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	call _UpdateScreen
__LABEL783:
	jp __LABEL781
__LABEL780:
	ld a, (ix-12)
	or a
	jp z, __LABEL785
	ld (ix-12), 0
__LABEL785:
__LABEL781:
	ld a, (ix-11)
	or a
	jp z, __LABEL787
	ld (ix-11), 0
	call _Frames
	ld de, 4
	add hl, de
	ld (ix-16), l
	ld (ix-15), h
	call _UpdateScreen
__LABEL787:
__LABEL761:
	jp __LABEL750
__LABEL751:
	jp __LABEL737
__LABEL738:
	ld a, (ix-3)
	or a
	jp z, __LABEL788
	dec (ix-4)
	xor a
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _Explode
	call _ShowCurtain
	ld (ix-3), 0
	jp __LABEL789
__LABEL788:
	inc (ix+5)
	ld a, 99
	cp (ix+5)
	jp nc, __LABEL791
	ld a, 1
	jp _RunDestroyer__leave
__LABEL791:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	or a
	jp nz, __LABEL793
	ld hl, 54
	push hl
	ld hl, _destroyerLevelMusic
	push hl
	call _PlayMusic
__LABEL793:
	ld l, (ix-14)
	ld h, (ix-13)
	ld de, 10
	add hl, de
	ld (ix-14), l
	ld (ix-13), h
	ld l, (ix-14)
	ld h, (ix-13)
	push hl
	call _SetScore
	call _ShowCurtain
__LABEL789:
	jp __LABEL735
__LABEL736:
	xor a
_RunDestroyer__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_RunGhostHunter:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -10
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 9
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -2
	add hl, bc
	ex de, hl
	ld hl, __LABEL1321
	ld bc, 1
	ldir
	ld a, (_playedGhostMusic)
	or a
	jp nz, __LABEL795
	ld a, 1
	ld (_playedGhostMusic), a
	ld hl, 60
	push hl
	ld hl, _ghostIntroMusic
	push hl
	call _PlayMusic
__LABEL795:
	call _HideNextTitle
	ld l, (ix-10)
	ld h, (ix-9)
	push hl
	call _SetScore
__LABEL796:
	ld a, (ix-2)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL797
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	push hl
	ld b, d
	ld c, e
	ld de, 0
	ld hl, 5
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-6), a
	ld (ix-4), 0
	ld a, (ix+5)
	push af
	call _SetLevel
	ld a, (ix-2)
	push af
	call _SetLifes
	call _UpdateScreen
__LABEL798:
	ld a, (ix-1)
	sub 1
	sbc a, a
	push af
	ld a, (ix-6)
	ld h, a
	xor a
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1322
	ld a, h
__LABEL1322:
	or a
	jp z, __LABEL799
__LABEL800:
	ld a, (ix-4)
	or a
	jp nz, __LABEL801
	call INKEY
	ld de, __LABEL358
	ld a, 1
	call __STRNE
	or a
	jp z, __LABEL803
	call INKEY
	ld de, __LABEL409
	ld a, 1
	call __STREQ
	or a
	jp z, __LABEL805
	xor a
	jp _RunGhostHunter__leave
__LABEL805:
	ld (ix-1), 1
	jp __LABEL801
__LABEL803:
	call RND
	push bc
	push de
	push af
	ld a, 08Dh
	ld de, 0401Ch
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	push hl
	push de
	ld de, 0
	ld hl, 10
	call __MUL32
	call __LTI32
	or a
	jp z, __LABEL807
	call RND
	push bc
	push de
	push af
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	inc a
	call __U8TOFREG
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 2
	call __SWAP32
	call __DIVI32
	ld a, l
	ld (ix-3), a
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	push hl
	ld de, 0
	ld hl, 3
	call __MUL32
	ld bc, 0
	push bc
	ld bc, 47
	push bc
	call __SUB32
	ld a, l
	ld (ix-5), a
	ld a, (ix-3)
	push af
	call _DrawGhost
	ld (ix-4), 1
__LABEL807:
	jp __LABEL800
__LABEL801:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL808:
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1323
	ld a, h
__LABEL1323:
	push af
	ld a, (ix-1)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1324
	ld a, h
__LABEL1324:
	or a
	jp z, __LABEL809
	call INKEY
	ld d, h
	ld e, l
	ld bc, -8
	call __PSTORE_STR2
	ld l, (ix-8)
	ld h, (ix-7)
	ld de, __LABEL389
	xor a
	call __STREQ
	push af
	ld a, (ix-3)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1325
	ld a, h
__LABEL1325:
	push af
	ld l, (ix-8)
	ld h, (ix-7)
	ld de, __LABEL394
	xor a
	call __STREQ
	push af
	ld a, (ix-3)
	dec a
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1326
	ld a, h
__LABEL1326:
	pop de
	or d
	push af
	ld l, (ix-8)
	ld h, (ix-7)
	ld de, __LABEL611
	xor a
	call __STREQ
	push af
	ld a, (ix-3)
	sub 2
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1327
	ld a, h
__LABEL1327:
	pop de
	or d
	push af
	ld l, (ix-8)
	ld h, (ix-7)
	ld de, __LABEL399
	xor a
	call __STREQ
	push af
	ld a, (ix-3)
	sub 3
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1328
	ld a, h
__LABEL1328:
	pop de
	or d
	push af
	ld l, (ix-8)
	ld h, (ix-7)
	ld de, __LABEL402
	xor a
	call __STREQ
	push af
	ld a, (ix-3)
	sub 4
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1329
	ld a, h
__LABEL1329:
	pop de
	or d
	jp z, __LABEL810
	ld (ix-4), 0
	dec (ix-6)
	ld l, (ix-10)
	ld h, (ix-9)
	inc hl
	ld (ix-10), l
	ld (ix-9), h
	ld a, (ix-3)
	push af
	call _KillGhost
	ld l, (ix-10)
	ld h, (ix-9)
	push hl
	call _SetScore
	call _UpdateScreen
__LABEL812:
	call INKEY
	ld de, __LABEL358
	ld a, 1
	call __STRNE
	or a
	jp nz, __LABEL812
	jp __LABEL811
__LABEL810:
	ld l, (ix-8)
	ld h, (ix-7)
	ld de, __LABEL409
	xor a
	call __STREQ
	or a
	jp z, __LABEL814
	xor a
	jp _RunGhostHunter__leave
__LABEL814:
	ld l, (ix-8)
	ld h, (ix-7)
	ld de, __LABEL358
	xor a
	call __STRNE
	or a
	jp z, __LABEL817
	ld (ix-1), 1
	ld (ix-4), 0
__LABEL817:
__LABEL811:
	jp __LABEL808
__LABEL809:
	ld a, (ix-4)
	or a
	jp z, __LABEL819
	ld (ix-1), 1
__LABEL819:
	ld (ix-4), 0
	jp __LABEL798
__LABEL799:
	ld a, (ix-1)
	or a
	jp z, __LABEL820
	dec (ix-2)
	call _ShowBigGhost
	call _ShowCurtain
	ld (ix-1), 0
	jp __LABEL821
__LABEL820:
	inc (ix+5)
	ld a, 99
	cp (ix+5)
	jp nc, __LABEL823
	ld a, 1
	jp _RunGhostHunter__leave
__LABEL823:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	or a
	jp nz, __LABEL825
	ld hl, 18
	push hl
	ld hl, _ghostLevelMusic
	push hl
	call _PlayMusic
__LABEL825:
	ld l, (ix-10)
	ld h, (ix-9)
	ld de, 10
	add hl, de
	ld (ix-10), l
	ld (ix-9), h
	ld l, (ix-10)
	ld h, (ix-9)
	push hl
	call _SetScore
	call _ShowCurtain
__LABEL821:
	jp __LABEL796
__LABEL797:
	xor a
_RunGhostHunter__leave:
	ex af, af'
	exx
	ld l, (ix-8)
	ld h, (ix-7)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_ShowBigGhost:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld (ix-1), 1
	jp __LABEL826
__LABEL829:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _bigGhost
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (ix-3), l
	ld (ix-2), h
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 512
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL832
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 1
	push af
	call _SetCell
__LABEL832:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 256
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL834
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 2
	push af
	call _SetCell
__LABEL834:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 128
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL836
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 3
	push af
	call _SetCell
__LABEL836:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 64
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL838
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL838:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 32
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL840
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 5
	push af
	call _SetCell
__LABEL840:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 16
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL842
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 6
	push af
	call _SetCell
__LABEL842:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 8
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL844
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 7
	push af
	call _SetCell
__LABEL844:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 4
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL846
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 8
	push af
	call _SetCell
__LABEL846:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 2
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL848
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL848:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 1
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL850
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL850:
	inc (ix-1)
__LABEL826:
	ld a, 20
	cp (ix-1)
	jp nc, __LABEL829
	call _UpdateScreen
	ld hl, 1
	call __PAUSE
	ld hl, 66
	push hl
	ld hl, _ghostScarySound
	push hl
	call _PlayMusic
	ld hl, 66
	push hl
	ld hl, _ghostScarySound
	push hl
	call _PlayMusic
__LABEL851:
	call INKEY
	ld de, __LABEL358
	ld a, 1
	call __STRNE
	or a
	jp nz, __LABEL851
	ld hl, 80
	call __PAUSE
_ShowBigGhost__leave:
	ld sp, ix
	pop ix
	ret
_DrawGhost:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld a, (ix+5)
	or a
	jp nz, __LABEL853
	ld (ix-1), 1
	ld (ix-2), 7
	jp __LABEL854
__LABEL853:
	ld a, (ix+5)
	dec a
	jp nz, __LABEL855
	ld (ix-1), 6
	ld (ix-2), 7
	jp __LABEL856
__LABEL855:
	ld a, (ix+5)
	sub 2
	jp nz, __LABEL857
	ld (ix-1), 3
	ld (ix-2), 1
	jp __LABEL858
__LABEL857:
	ld a, (ix+5)
	sub 3
	jp nz, __LABEL859
	ld (ix-1), 4
	ld (ix-2), 15
	jp __LABEL860
__LABEL859:
	ld (ix-1), 4
	ld (ix-2), 7
__LABEL860:
__LABEL858:
__LABEL856:
__LABEL854:
	ld a, 1
	push af
	ld a, (ix-2)
	add a, 5
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	add a, 4
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	add a, 4
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-2)
	inc a
	push af
	ld a, (ix-1)
	inc a
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-2)
	inc a
	push af
	ld a, (ix-1)
	add a, 3
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-2)
	add a, 3
	push af
	ld a, (ix-2)
	add a, 3
	push af
	ld a, (ix-1)
	add a, 3
	push af
	ld a, (ix-1)
	inc a
	push af
	call _FillRect
	xor a
	push af
	ld a, (ix-2)
	add a, 5
	push af
	ld a, (ix-1)
	inc a
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-2)
	add a, 5
	push af
	ld a, (ix-1)
	add a, 3
	push af
	call _SetCell
_DrawGhost__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_KillGhost:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld a, (ix+5)
	or a
	jp nz, __LABEL861
	ld (ix-1), 1
	ld (ix-2), 7
	jp __LABEL862
__LABEL861:
	ld a, (ix+5)
	dec a
	jp nz, __LABEL863
	ld (ix-1), 6
	ld (ix-2), 7
	jp __LABEL864
__LABEL863:
	ld a, (ix+5)
	sub 2
	jp nz, __LABEL865
	ld (ix-1), 3
	ld (ix-2), 1
	jp __LABEL866
__LABEL865:
	ld a, (ix+5)
	sub 3
	jp nz, __LABEL867
	ld (ix-1), 4
	ld (ix-2), 15
	jp __LABEL868
__LABEL867:
	ld (ix-1), 4
	ld (ix-2), 7
__LABEL868:
__LABEL866:
__LABEL864:
__LABEL862:
	ld (ix-3), 0
	jp __LABEL869
__LABEL872:
	xor a
	push af
	ld a, (ix-2)
	add a, (ix-3)
	push af
	ld a, (ix-2)
	add a, (ix-3)
	push af
	ld a, (ix-1)
	add a, 4
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	call _UpdateScreen
	ld hl, 233
	push hl
	ld hl, 7
	call __BEEPER
	inc (ix-3)
__LABEL869:
	ld a, 5
	cp (ix-3)
	jp nc, __LABEL872
_KillGhost__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_FindConstructorBottom:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL874
__LABEL877:
	ld (ix-2), 1
	jp __LABEL879
__LABEL882:
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL885
	ld a, (ix-1)
	ld (ix-3), a
	jp __LABEL881
__LABEL885:
	inc (ix-2)
__LABEL879:
	ld h, (ix-2)
	ld a, 10
	call __LTI8
	or a
	jp z, __LABEL882
__LABEL881:
	inc (ix-1)
__LABEL874:
	ld h, (ix-1)
	ld a, 18
	call __LTI8
	or a
	jp z, __LABEL877
	ld a, (ix-3)
_FindConstructorBottom__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_CheckLine:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL886
__LABEL889:
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp nz, __LABEL892
	xor a
	jp _CheckLine__leave
__LABEL892:
	inc (ix-1)
__LABEL886:
	ld a, 10
	cp (ix-1)
	jp nc, __LABEL889
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, (ix+5)
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, (ix+5)
	inc a
	push af
	call _FindConstructorBottom
	ld (ix-1), a
	ld h, a
	xor a
	cp h
	jp nc, __LABEL894
	ld a, 255
	push af
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, (ix+5)
	inc a
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _MoveRect
	ld hl, 5279
	push hl
	ld hl, 3
	call __BEEPER
	ld hl, 497
	push hl
	ld hl, 41
	call __BEEPER
__LABEL894:
	ld a, 1
_CheckLine__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_RunConstructor:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -16
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 15
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1330
	ld bc, 1
	ldir
	ld a, (_playedConstructorMusic)
	or a
	jp nz, __LABEL896
	ld a, 1
	ld (_playedConstructorMusic), a
	ld hl, 88
	push hl
	ld hl, _constructorIntroMusic
	push hl
	call _PlayMusic
__LABEL896:
	call _HideNextTitle
	ld l, (ix-14)
	ld h, (ix-13)
	push hl
	call _SetScore
__LABEL897:
	ld a, (ix-4)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL898
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 5
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-11), a
	ld (ix-9), 0
	ld (ix-6), 5
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, (ix+5)
	push af
	call _SetLevel
	ld a, (ix-4)
	push af
	call _SetLifes
	call _UpdateScreen
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	push hl
	ld de, 0
	ld hl, 10
	call __MUL32
	ld bc, 0
	push bc
	ld bc, 150
	push bc
	call __SUB32
	ld a, l
	ld (ix-5), a
__LABEL899:
	ld a, (ix-3)
	sub 1
	sbc a, a
	push af
	ld a, (ix-11)
	ld h, a
	xor a
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1331
	ld a, h
__LABEL1331:
	or a
	jp z, __LABEL900
	ld a, (ix-9)
	or a
	jp z, __LABEL902
	xor a
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	call _UpdateScreen
__LABEL902:
	ld a, 1
	push af
	call _FindConstructorBottom
	ld (ix-2), a
	ld h, a
	ld a, 16
	call __LTI8
	or a
	jp z, __LABEL903
	ld (ix-3), 1
	jp __LABEL900
__LABEL903:
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _MoveRect
	ld (ix-1), 1
	jp __LABEL905
__LABEL908:
	ld a, 1
	push af
	ld a, 1
	push af
	call RND
	push bc
	push de
	push af
	ld a, 084h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	push af
	call _SetCell
	inc (ix-1)
__LABEL905:
	ld a, (ix-1)
	push af
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld bc, 0
	push bc
	ld bc, 10
	push bc
	call __SUB32
	ld a, l
	pop hl
	call __LTI8
	or a
	jp z, __LABEL908
	ld a, (ix-9)
	or a
	jp z, __LABEL911
	ld a, 1
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
__LABEL911:
	ld (ix-16), 0
	ld (ix-15), 0
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL912:
	ld a, (ix-5)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL913
	ld a, (ix-9)
	or a
	jp z, __LABEL915
	ld a, (ix-8)
	dec a
	sub 1
	sbc a, a
	push af
	ld a, (ix-8)
	dec a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	or (hl)
	jp z, __LABEL916
	ld (ix-9), 0
	ld a, (ix-8)
	push af
	call _CheckLine
	or a
	jp z, __LABEL919
	ld l, (ix-14)
	ld h, (ix-13)
	inc hl
	ld (ix-14), l
	ld (ix-13), h
	ld l, (ix-14)
	ld h, (ix-13)
	push hl
	call _SetScore
	dec (ix-11)
	ld a, (ix-11)
	or a
	jp z, __LABEL913
__LABEL919:
	jp __LABEL917
__LABEL916:
	xor a
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	dec (ix-8)
	ld a, 1
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
__LABEL917:
	call _UpdateScreen
__LABEL915:
	ld l, (ix-16)
	ld h, (ix-15)
	ld de, 0
	call __EQ16
	push af
	ld l, (ix-16)
	ld h, (ix-15)
	push hl
	call _Frames
	ex de, hl
	pop hl
	or a
	sbc hl, de
	pop de
	sbc a, a
	or d
	jp z, __LABEL923
	ld hl, 57090
	call _MultiKeys
	or a
	jp z, __LABEL924
	ld a, (ix-6)
	sub 2
	jp nz, __LABEL926
	xor a
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	dec (ix-6)
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	inc a
	push af
	call _SetCell
	ld (ix-12), 1
	jp __LABEL927
__LABEL926:
	ld a, (ix-6)
	sub 10
	jp nz, __LABEL928
	xor a
	push af
	ld a, 255
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-6)
	dec a
	push af
	call _MoveRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	dec (ix-6)
	ld (ix-12), 1
	jp __LABEL929
__LABEL928:
	ld a, 2
	cp (ix-6)
	jp nc, __LABEL931
	xor a
	push af
	ld a, 255
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _MoveRect
	dec (ix-6)
	ld (ix-12), 1
__LABEL931:
__LABEL929:
__LABEL927:
	jp __LABEL925
__LABEL924:
	ld hl, 57089
	call _MultiKeys
	or a
	jp z, __LABEL932
	ld a, (ix-6)
	sub 9
	jp nz, __LABEL934
	xor a
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	inc (ix-6)
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	dec a
	push af
	call _SetCell
	ld (ix-12), 1
	jp __LABEL935
__LABEL934:
	ld a, (ix-6)
	dec a
	jp nz, __LABEL936
	xor a
	push af
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	push af
	call _MoveRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	inc (ix-6)
	ld (ix-12), 1
	jp __LABEL937
__LABEL936:
	ld a, (ix-6)
	cp 9
	jp nc, __LABEL939
	xor a
	push af
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _MoveRect
	inc (ix-6)
	ld (ix-12), 1
__LABEL939:
__LABEL937:
__LABEL935:
	jp __LABEL933
__LABEL932:
	ld hl, 48912
	call _MultiKeys
	or a
	jp z, __LABEL941
	xor a
	jp _RunConstructor__leave
__LABEL941:
__LABEL933:
__LABEL925:
	ld hl, 32513
	call _MultiKeys
	or a
	jp z, __LABEL942
	ld a, (ix-9)
	sub 1
	sbc a, a
	push af
	ld a, (ix-10)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1332
	ld a, h
__LABEL1332:
	or a
	jp z, __LABEL945
	ld (ix-9), 1
	ld (ix-10), 1
	ld a, (ix-6)
	ld (ix-7), a
	ld (ix-8), 18
	ld a, 1
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	call _UpdateScreen
__LABEL945:
	jp __LABEL943
__LABEL942:
	ld a, (ix-10)
	or a
	jp z, __LABEL947
	ld (ix-10), 0
__LABEL947:
__LABEL943:
	ld a, (ix-12)
	or a
	jp z, __LABEL949
	ld (ix-12), 0
	call _Frames
	ld de, 4
	add hl, de
	ld (ix-16), l
	ld (ix-15), h
	call _UpdateScreen
__LABEL949:
__LABEL923:
	jp __LABEL912
__LABEL913:
	jp __LABEL899
__LABEL900:
	ld a, (ix-3)
	or a
	jp z, __LABEL950
	dec (ix-4)
	xor a
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _Explode
	call _ShowCurtain
	ld (ix-3), 0
	jp __LABEL951
__LABEL950:
	inc (ix+5)
	ld a, 99
	cp (ix+5)
	jp nc, __LABEL953
	ld a, 1
	jp _RunConstructor__leave
__LABEL953:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	or a
	jp nz, __LABEL955
	ld hl, 86
	push hl
	ld hl, _constructorLevelMusic
	push hl
	call _PlayMusic
__LABEL955:
	ld l, (ix-14)
	ld h, (ix-13)
	ld de, 10
	add hl, de
	ld (ix-14), l
	ld (ix-13), h
	ld l, (ix-14)
	ld h, (ix-13)
	push hl
	call _SetScore
	call _ShowCurtain
__LABEL951:
	jp __LABEL897
__LABEL898:
	xor a
_RunConstructor__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_ShowFigure:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+9)
	and 1
	jp z, __LABEL956
	ld a, 1
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	call _SetCell
	jp __LABEL957
__LABEL956:
	xor a
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	call _SetCell
__LABEL957:
	ld a, (ix+9)
	and 2
	jp z, __LABEL958
	ld a, 1
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	inc a
	push af
	call _SetCell
	jp __LABEL959
__LABEL958:
	xor a
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	inc a
	push af
	call _SetCell
__LABEL959:
	ld a, (ix+9)
	and 4
	jp z, __LABEL960
	ld a, 1
	push af
	ld a, (ix+7)
	inc a
	push af
	ld a, (ix+5)
	push af
	call _SetCell
	jp __LABEL961
__LABEL960:
	xor a
	push af
	ld a, (ix+7)
	inc a
	push af
	ld a, (ix+5)
	push af
	call _SetCell
__LABEL961:
	ld a, (ix+9)
	and 8
	jp z, __LABEL962
	ld a, 1
	push af
	ld a, (ix+7)
	inc a
	push af
	ld a, (ix+5)
	inc a
	push af
	call _SetCell
	jp __LABEL963
__LABEL962:
	xor a
	push af
	ld a, (ix+7)
	inc a
	push af
	ld a, (ix+5)
	inc a
	push af
	call _SetCell
__LABEL963:
_ShowFigure__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_RunMatch:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -19
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 18
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL1333
	ld bc, 1
	ldir
	ld hl, -19
	ld de, __LABEL1334
	ld bc, 3
	call __ALLOC_LOCAL_ARRAY
	push ix
	pop hl
	ld bc, -10
	add hl, bc
	ex de, hl
	ld hl, __LABEL1335
	ld bc, 1
	ldir
	ld a, (_playedMatchMusic)
	or a
	jp nz, __LABEL965
	ld a, 1
	ld (_playedMatchMusic), a
	ld hl, 122
	push hl
	ld hl, _matchIntroMusic
	push hl
	call _PlayMusic
__LABEL965:
	call _HideNextTitle
	ld l, (ix-15)
	ld h, (ix-14)
	push hl
	call _SetScore
__LABEL966:
	ld a, (ix-3)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL967
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 14
	push af
	ld a, 13
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, (ix-3)
	push af
	call _SetLifes
	ld a, (ix+5)
	push af
	call _SetLevel
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld a, l
	ld (ix-1), a
	add a, 10
	ld (ix-11), a
	ld a, (ix-1)
	add a, 6
	ld (ix-9), a
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	push hl
	ld de, 0
	ld hl, 5
	call __MUL32
	ld bc, 0
	push bc
	ld bc, 100
	push bc
	call __SUB32
	ld a, l
	ld (ix-4), a
	ld l, (ix-17)
	ld h, (ix-16)
	ld a, 1
	ld (hl), a
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld a, 1
	ld (hl), a
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	inc hl
	ld a, 1
	ld (hl), a
	call RND
	push bc
	push de
	push af
	ld a, (ix-9)
	call __U8TOFREG
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-5), a
	call RND
	push bc
	push de
	push af
	ld a, (ix-9)
	call __U8TOFREG
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-6), a
	call RND
	push bc
	push de
	push af
	ld a, (ix-9)
	call __U8TOFREG
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-7), a
	ld l, (ix-17)
	ld h, (ix-16)
	ld a, (hl)
	push af
	ld a, 16
	push af
	ld a, 2
	push af
	call _ShowFigure
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld a, (hl)
	push af
	ld a, 16
	push af
	ld a, 5
	push af
	call _ShowFigure
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	inc hl
	ld a, (hl)
	push af
	ld a, 16
	push af
	ld a, 8
	push af
	call _ShowFigure
	ld a, (ix-10)
	dec a
	ld h, 3
	call __MUL8_FAST
	add a, 2
	ld (ix-1), a
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 19
	push af
	ld a, (ix-1)
	inc a
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	ld (ix-8), 0
__LABEL968:
	ld a, (ix-2)
	sub 1
	sbc a, a
	push af
	ld a, (ix-11)
	ld h, a
	xor a
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1336
	ld a, h
__LABEL1336:
	or a
	jp z, __LABEL969
	ld a, (ix-8)
	sub 10
	jp nz, __LABEL970
	ld l, (ix-17)
	ld h, (ix-16)
	ld a, (hl)
	sub (ix-5)
	ld d, a
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld a, (hl)
	sub (ix-6)
	or d
	ld d, a
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	inc hl
	ld a, (hl)
	sub (ix-7)
	or d
	jp z, __LABEL972
	ld (ix-2), 1
	jp __LABEL969
__LABEL972:
	ld hl, 321
	push hl
	ld hl, 5
	call __BEEPER
	ld hl, 302
	push hl
	ld hl, 6
	call __BEEPER
	ld hl, 283
	push hl
	ld hl, 6
	call __BEEPER
	ld hl, 265
	push hl
	ld hl, 6
	call __BEEPER
	ld hl, 249
	push hl
	ld hl, 7
	call __BEEPER
	ld hl, 233
	push hl
	ld hl, 7
	call __BEEPER
	ld l, (ix-15)
	ld h, (ix-14)
	inc hl
	ld (ix-15), l
	ld (ix-14), h
	ld l, (ix-15)
	ld h, (ix-14)
	push hl
	call _SetScore
	dec (ix-11)
	ld a, (ix-11)
	cp 1
	jp c, __LABEL969
	xor a
	push af
	ld a, (ix-8)
	inc a
	push af
	ld a, (ix-8)
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld (ix-8), 0
	call RND
	push bc
	push de
	push af
	ld a, (ix-9)
	call __U8TOFREG
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-5), a
	call RND
	push bc
	push de
	push af
	ld a, (ix-9)
	call __U8TOFREG
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-6), a
	call RND
	push bc
	push de
	push af
	ld a, (ix-9)
	call __U8TOFREG
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-7), a
	jp __LABEL971
__LABEL970:
	ld a, (ix-8)
	or a
	jp z, __LABEL977
	xor a
	push af
	ld a, (ix-8)
	inc a
	push af
	ld a, (ix-8)
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL977:
__LABEL971:
	inc (ix-8)
	ld a, (ix-5)
	push af
	ld a, (ix-8)
	push af
	ld a, 2
	push af
	call _ShowFigure
	ld a, (ix-6)
	push af
	ld a, (ix-8)
	push af
	ld a, 5
	push af
	call _ShowFigure
	ld a, (ix-7)
	push af
	ld a, (ix-8)
	push af
	ld a, 8
	push af
	call _ShowFigure
	ld (ix-13), 0
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL978:
	ld a, (ix-4)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL979
	ld a, (ix-13)
	sub 1
	sbc a, a
	push af
	ld a, (ix-13)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	ex de, hl
	pop hl
	or a
	sbc hl, de
	pop de
	sbc a, a
	or d
	jp z, __LABEL981
	ld hl, 64257
	call _MultiKeys
	or a
	jp z, __LABEL982
	ld a, (ix-10)
	dec a
	ld h, 3
	call __MUL8_FAST
	add a, 2
	ld (ix-1), a
	xor a
	push af
	ld a, 17
	push af
	ld a, 16
	push af
	ld a, (ix-1)
	inc a
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	ld a, (hl)
	inc a
	push af
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	ld a, (ix-9)
	cp (hl)
	jp nc, __LABEL985
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	ld (hl), 1
__LABEL985:
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 16
	push af
	ld a, (ix-1)
	push af
	call _ShowFigure
	ld (ix-12), 1
	jp __LABEL983
__LABEL982:
	ld hl, 64769
	call _MultiKeys
	or a
	jp z, __LABEL986
	ld a, (ix-10)
	dec a
	ld h, 3
	call __MUL8_FAST
	add a, 2
	ld (ix-1), a
	xor a
	push af
	ld a, 17
	push af
	ld a, 16
	push af
	ld a, (ix-1)
	inc a
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	ld a, (hl)
	dec a
	push af
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	ld a, (hl)
	cp 1
	jp nc, __LABEL989
	ld a, (ix-9)
	push af
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
__LABEL989:
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 16
	push af
	ld a, (ix-1)
	push af
	call _ShowFigure
	ld (ix-12), 1
	jp __LABEL987
__LABEL986:
	ld hl, 57090
	call _MultiKeys
	or a
	jp z, __LABEL990
	ld a, (ix-10)
	dec a
	ld h, 3
	call __MUL8_FAST
	add a, 2
	ld (ix-1), a
	xor a
	push af
	ld a, 19
	push af
	ld a, 19
	push af
	ld a, (ix-1)
	inc a
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	dec (ix-10)
	ld a, (ix-10)
	cp 1
	jp nc, __LABEL993
	ld (ix-10), 3
__LABEL993:
	ld a, (ix-10)
	dec a
	ld h, 3
	call __MUL8_FAST
	add a, 2
	ld (ix-1), a
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 19
	push af
	ld a, (ix-1)
	inc a
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	ld (ix-12), 1
	jp __LABEL991
__LABEL990:
	ld hl, 57089
	call _MultiKeys
	or a
	jp z, __LABEL994
	ld a, (ix-10)
	dec a
	ld h, 3
	call __MUL8_FAST
	add a, 2
	ld (ix-1), a
	xor a
	push af
	ld a, 19
	push af
	ld a, 19
	push af
	ld a, (ix-1)
	inc a
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	inc (ix-10)
	ld a, 3
	cp (ix-10)
	jp nc, __LABEL997
	ld (ix-10), 1
__LABEL997:
	ld a, (ix-10)
	dec a
	ld h, 3
	call __MUL8_FAST
	add a, 2
	ld (ix-1), a
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 19
	push af
	ld a, (ix-1)
	inc a
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	ld (ix-12), 1
	jp __LABEL995
__LABEL994:
	ld hl, 48912
	call _MultiKeys
	or a
	jp z, __LABEL999
	xor a
	jp _RunMatch__leave
__LABEL999:
__LABEL995:
__LABEL991:
__LABEL987:
__LABEL983:
	ld a, (ix-12)
	or a
	jp z, __LABEL1001
	ld (ix-12), 0
	call _Frames
	ld de, 10
	add hl, de
	ld a, l
	ld (ix-13), a
	call _UpdateScreen
__LABEL1001:
__LABEL981:
	ld hl, 32513
	call _MultiKeys
	or a
	jp z, __LABEL978
__LABEL979:
	jp __LABEL968
__LABEL969:
	ld a, (ix-2)
	or a
	jp z, __LABEL1004
	dec (ix-3)
	ld a, 1
	push af
	ld a, 16
	push af
	ld a, 2
	push af
	call _Explode
	ld a, 1
	push af
	ld a, 16
	push af
	ld a, 5
	push af
	call _Explode
	ld a, 1
	push af
	ld a, 16
	push af
	ld a, 8
	push af
	call _Explode
	call _ShowCurtain
	ld (ix-2), 0
	jp __LABEL1005
__LABEL1004:
	inc (ix+5)
	ld a, 99
	cp (ix+5)
	jp nc, __LABEL1007
	ld a, 1
	jp _RunMatch__leave
__LABEL1007:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	or a
	jp nz, __LABEL1009
	ld hl, 86
	push hl
	ld hl, _matchLevelMusic
	push hl
	call _PlayMusic
__LABEL1009:
	ld l, (ix-15)
	ld h, (ix-14)
	ld de, 10
	add hl, de
	ld (ix-15), l
	ld (ix-14), h
	ld l, (ix-15)
	ld h, (ix-14)
	push hl
	call _SetScore
	call _ShowCurtain
__LABEL1005:
	jp __LABEL966
__LABEL967:
	xor a
_RunMatch__leave:
	ex af, af'
	exx
	ld l, (ix-17)
	ld h, (ix-16)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_ShowChar:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -8
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 7
	ld d, h
	ld e, l
	inc de
	ldir
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	ld hl, 0
	push hl
	ld hl, 0
	push hl
	xor a
	call __STRSLICE
	ld a, 1
	call __ASC
	ld l, a
	ld h, 0
	ld (ix-8), l
	ld (ix-7), h
	ld l, (ix-8)
	ld h, (ix-7)
	add hl, hl
	add hl, hl
	add hl, hl
	ex de, hl
	ld hl, (_chars)
	add hl, de
	ld (ix-8), l
	ld (ix-7), h
	xor a
	push af
	ld a, 8
	push af
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 2
	push af
	call _FillRect
	ld a, (ix+7)
	cp 5
	jp nc, __LABEL1010
	ld a, (ix+7)
	add a, a
	ld h, a
	ld a, 10
	sub h
	ld (ix-1), a
	ld a, (ix+7)
	ld (ix-2), a
	ld (ix-5), 1
	jp __LABEL1012
__LABEL1015:
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld a, (ix-5)
	dec a
	ld l, a
	ld h, 0
	ex de, hl
	pop hl
	add hl, de
	ld a, (hl)
	ld (ix-6), a
	ld a, (ix-2)
	ld (ix-4), a
	jp __LABEL1017
__LABEL1020:
	ld a, 8
	sub (ix-4)
	ld h, 1
	or a
	ld b, a
	ld a, h
	jr z, __LABEL1338
__LABEL1337:
	add a, a
	djnz __LABEL1337
__LABEL1338:
	ld (ix-3), a
	ld a, (ix-6)
	and (ix-3)
	jp z, __LABEL1023
	ld a, 1
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-4)
	inc a
	push af
	call _SetCell
__LABEL1023:
	inc (ix-4)
__LABEL1017:
	ld h, (ix-4)
	ld a, (ix-2)
	add a, (ix-1)
	dec a
	cp h
	jp nc, __LABEL1020
	inc (ix-5)
__LABEL1012:
	ld a, 8
	cp (ix-5)
	jp nc, __LABEL1015
	jp __LABEL1011
__LABEL1010:
	ld a, 5
	cp (ix+7)
	jp nc, __LABEL1025
	ld a, 10
	sub (ix+7)
	ld (ix+7), a
	add a, a
	ld h, a
	ld a, 10
	sub h
	ld (ix-1), a
	ld a, (ix+7)
	ld (ix-2), a
	ld (ix-5), 1
	jp __LABEL1026
__LABEL1029:
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld a, (ix-5)
	dec a
	ld l, a
	ld h, 0
	ex de, hl
	pop hl
	add hl, de
	ld a, (hl)
	ld (ix-6), a
	ld a, (ix-2)
	add a, (ix-1)
	dec a
	ld (ix-4), a
	jp __LABEL1031
__LABEL1034:
	ld a, (ix-4)
	dec a
	ld h, 1
	or a
	ld b, a
	ld a, h
	jr z, __LABEL1340
__LABEL1339:
	add a, a
	djnz __LABEL1339
__LABEL1340:
	ld (ix-3), a
	ld a, (ix-6)
	and (ix-3)
	jp z, __LABEL1037
	ld a, 1
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-4)
	inc a
	push af
	call _SetCell
__LABEL1037:
	dec (ix-4)
__LABEL1031:
	ld a, (ix-4)
	cp (ix-2)
	jp nc, __LABEL1034
	inc (ix-5)
__LABEL1026:
	ld a, 8
	cp (ix-5)
	jp nc, __LABEL1029
__LABEL1025:
__LABEL1011:
	ld hl, 2
	call __PAUSE
_ShowChar__leave:
	ex af, af'
	exx
	ld l, (ix+4)
	ld h, (ix+5)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_ScanKeyb:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	call INKEY
	ld d, h
	ld e, l
	ld bc, -3
	call __PSTORE_STR2
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, __LABEL358
	xor a
	call __STRNE
	or a
	jp z, __LABEL1039
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, __LABEL611
	xor a
	call __STREQ
	or a
	jp z, __LABEL1040
	ld hl, _level
	inc (hl)
	ld a, 99
	ld hl, (_level - 1)
	call __LTI8
	or a
	jp z, __LABEL1043
	xor a
	ld (_level), a
__LABEL1043:
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
	jp __LABEL1041
__LABEL1040:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, __LABEL399
	xor a
	call __STREQ
	or a
	jp z, __LABEL1044
	ld hl, _level
	dec (hl)
	ld h, 0
	ld a, (_level)
	call __LTI8
	or a
	jp z, __LABEL1047
	ld a, 99
	ld (_level), a
__LABEL1047:
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
	jp __LABEL1045
__LABEL1044:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, __LABEL389
	xor a
	call __STREQ
	or a
	jp z, __LABEL1048
	ld (ix-1), 2
	jp __LABEL1049
__LABEL1048:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, __LABEL394
	xor a
	call __STREQ
	or a
	jp z, __LABEL1050
	ld (ix-1), 1
	jp __LABEL1051
__LABEL1050:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, __LABEL402
	xor a
	call __STREQ
	or a
	jp z, __LABEL1053
	ld (ix-1), 3
__LABEL1053:
__LABEL1051:
__LABEL1049:
__LABEL1045:
__LABEL1041:
__LABEL1039:
	ld a, (ix-1)
_ScanKeyb__leave:
	ex af, af'
	exx
	ld l, (ix-3)
	ld h, (ix-2)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	ret
_ShowTetris:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1341
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -5
	add hl, bc
	ex de, hl
	ld hl, __LABEL1342
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 19
	push af
	ld a, 4
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 19
	push af
	ld a, 10
	push af
	ld a, 6
	push af
	call _FillRect
__LABEL1054:
	ld a, (ix-1)
	or a
	jp nz, __LABEL1055
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 6
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, (ix-5)
	push af
	ld hl, __LABEL1056
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1058
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1058:
	call _UpdateScreen
	ld (ix-2), 9
	jp __LABEL1059
__LABEL1062:
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-2)
	inc a
	push af
	ld a, (ix-2)
	push af
	ld a, 6
	push af
	ld a, 4
	push af
	call _MoveRect
	ld a, (ix-5)
	push af
	ld hl, __LABEL1056
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1065
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1065:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1066:
	call _Frames
	ld de, 30
	or a
	sbc hl, de
	jp nc, __LABEL1067
	ld a, (ix-5)
	push af
	ld hl, __LABEL1056
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1069
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1069:
	call _UpdateScreen
	call _ScanKeyb
	ld (ix-3), a
	or a
	jp z, __LABEL1071
	ld a, (ix-3)
	jp _ShowTetris__leave
__LABEL1071:
	jp __LABEL1066
__LABEL1067:
	inc (ix-2)
__LABEL1059:
	ld a, 16
	cp (ix-2)
	jp nc, __LABEL1062
	xor a
	push af
	ld a, 18
	push af
	ld a, 17
	push af
	ld a, 6
	push af
	ld a, 4
	push af
	call _FillRect
	jp __LABEL1054
__LABEL1055:
_ShowTetris__leave:
	ld sp, ix
	pop ix
	ret
_ShowArkanoid:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -7
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 6
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1343
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -5
	add hl, bc
	ex de, hl
	ld hl, __LABEL1344
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 11
	push af
	ld a, 9
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL1072:
	ld a, (ix-1)
	or a
	jp nz, __LABEL1073
	ld (ix-6), 2
	ld (ix-7), 19
	ld a, 1
	push af
	ld a, (ix-7)
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	ld a, (ix-5)
	push af
	ld hl, __LABEL1074
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1076
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1076:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1077:
	call _Frames
	ld de, 30
	or a
	sbc hl, de
	jp c, __LABEL1077
	ld (ix-2), 9
	jp __LABEL1079
__LABEL1082:
	xor a
	push af
	ld a, (ix-7)
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	inc (ix-6)
	dec (ix-7)
	ld a, 1
	push af
	ld a, (ix-7)
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	ld a, (ix-5)
	push af
	ld hl, __LABEL1074
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1085
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1085:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1086:
	call _Frames
	ld de, 30
	or a
	sbc hl, de
	jp nc, __LABEL1087
	ld a, (ix-5)
	push af
	ld hl, __LABEL1074
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1089
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1089:
	call _UpdateScreen
	call _ScanKeyb
	ld (ix-3), a
	or a
	jp z, __LABEL1091
	ld a, (ix-3)
	jp _ShowArkanoid__leave
__LABEL1091:
	jp __LABEL1086
__LABEL1087:
	inc (ix-2)
__LABEL1079:
	ld a, 15
	cp (ix-2)
	jp nc, __LABEL1082
	xor a
	push af
	ld a, (ix-7)
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	jp __LABEL1072
__LABEL1073:
_ShowArkanoid__leave:
	ld sp, ix
	pop ix
	ret
_ShowRacing:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1345
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -5
	add hl, bc
	ex de, hl
	ld hl, __LABEL1346
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL1092:
	ld a, (ix-1)
	or a
	jp nz, __LABEL1093
	ld (ix-2), 1
	jp __LABEL1094
__LABEL1097:
	ld a, (ix-2)
	dec a
	jp nz, __LABEL1099
	xor a
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 3
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	push af
	ld a, 18
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 17
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 3
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 11
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 12
	push af
	ld a, 12
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 13
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	call _FillRect
	jp __LABEL1100
__LABEL1099:
	ld a, (ix-2)
	cp 4
	sbc a, a
	ld d, a
	ld a, 4
	cp (ix-2)
	sbc a, a
	or d
	jp z, __LABEL1101
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-2)
	add a, 11
	push af
	ld a, (ix-2)
	add a, 8
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _MoveRect
	jp __LABEL1102
__LABEL1101:
	ld a, (ix-2)
	sub 4
	jp nz, __LABEL1104
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-2)
	add a, 11
	push af
	ld a, (ix-2)
	add a, 8
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _MoveRect
	xor a
	push af
	ld a, 3
	push af
	ld a, 20
	push af
	ld a, 17
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _MoveRect
__LABEL1104:
__LABEL1102:
__LABEL1100:
	ld a, (ix-5)
	push af
	ld hl, __LABEL1105
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1107
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1107:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1108:
	call _Frames
	ld de, 30
	or a
	sbc hl, de
	jp nc, __LABEL1109
	ld a, (ix-5)
	push af
	ld hl, __LABEL1105
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1111
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1111:
	call _UpdateScreen
	call _ScanKeyb
	ld (ix-3), a
	or a
	jp z, __LABEL1113
	ld a, (ix-3)
	jp _ShowRacing__leave
__LABEL1113:
	jp __LABEL1108
__LABEL1109:
	inc (ix-2)
__LABEL1094:
	ld a, 8
	cp (ix-2)
	jp nc, __LABEL1097
	xor a
	push af
	ld a, 18
	push af
	ld a, 17
	push af
	ld a, 6
	push af
	ld a, 4
	push af
	call _FillRect
	jp __LABEL1092
__LABEL1093:
_ShowRacing__leave:
	ld sp, ix
	pop ix
	ret
_ShowSnake:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1347
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -5
	add hl, bc
	ex de, hl
	ld hl, __LABEL1348
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL1114:
	ld a, (ix-1)
	or a
	jp nz, __LABEL1115
	ld (ix-2), 0
	jp __LABEL1116
__LABEL1119:
	ld a, (ix-2)
	or a
	jp nz, __LABEL1121
	xor a
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 15
	push af
	ld a, 15
	push af
	ld a, 6
	push af
	ld a, 3
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 15
	push af
	ld a, 9
	push af
	call _SetCell
	jp __LABEL1122
__LABEL1121:
	xor a
	push af
	ld a, 1
	push af
	ld a, 15
	push af
	ld a, 15
	push af
	ld a, (ix-2)
	add a, 6
	dec a
	push af
	ld a, (ix-2)
	add a, 3
	dec a
	push af
	call _MoveRect
__LABEL1122:
	ld a, (ix-5)
	push af
	ld hl, __LABEL1123
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1125
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1125:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1126:
	call _Frames
	ld de, 30
	or a
	sbc hl, de
	jp nc, __LABEL1127
	ld a, (ix-5)
	push af
	ld hl, __LABEL1123
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1129
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1129:
	call _UpdateScreen
	call _ScanKeyb
	ld (ix-3), a
	or a
	jp z, __LABEL1131
	ld a, (ix-3)
	jp _ShowSnake__leave
__LABEL1131:
	jp __LABEL1126
__LABEL1127:
	inc (ix-2)
__LABEL1116:
	ld a, 3
	cp (ix-2)
	jp nc, __LABEL1119
	jp __LABEL1114
__LABEL1115:
_ShowSnake__leave:
	ld sp, ix
	pop ix
	ret
_ShowDestroyer:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1349
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -5
	add hl, bc
	ex de, hl
	ld hl, __LABEL1350
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL1132:
	ld a, (ix-1)
	or a
	jp nz, __LABEL1133
	ld (ix-2), 0
	jp __LABEL1134
__LABEL1137:
	ld a, (ix-2)
	or a
	jp nz, __LABEL1139
	xor a
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 11
	push af
	ld a, 9
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	push af
	ld a, 4
	push af
	call _SetCell
	jp __LABEL1140
__LABEL1139:
	xor a
	push af
	ld a, 18
	sub (ix-2)
	inc a
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	sub (ix-2)
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL1140:
	ld a, (ix-5)
	push af
	ld hl, __LABEL1141
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1143
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1143:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1144:
	call _Frames
	ld de, 20
	or a
	sbc hl, de
	jp nc, __LABEL1145
	ld a, (ix-5)
	push af
	ld hl, __LABEL1141
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1147
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1147:
	call _UpdateScreen
	call _ScanKeyb
	ld (ix-3), a
	or a
	jp z, __LABEL1149
	ld a, (ix-3)
	jp _ShowDestroyer__leave
__LABEL1149:
	jp __LABEL1144
__LABEL1145:
	inc (ix-2)
__LABEL1134:
	ld a, 8
	cp (ix-2)
	jp nc, __LABEL1137
	jp __LABEL1132
__LABEL1133:
_ShowDestroyer__leave:
	ld sp, ix
	pop ix
	ret
_ShowConstructor:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1351
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -5
	add hl, bc
	ex de, hl
	ld hl, __LABEL1352
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL1150:
	ld a, (ix-1)
	or a
	jp nz, __LABEL1151
	ld (ix-2), 0
	jp __LABEL1152
__LABEL1155:
	ld a, (ix-2)
	or a
	jp nz, __LABEL1157
	xor a
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 11
	push af
	ld a, 9
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	xor a
	push af
	ld a, 11
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	push af
	ld a, 4
	push af
	call _SetCell
	jp __LABEL1158
__LABEL1157:
	ld a, (ix-2)
	sub 8
	jp nz, __LABEL1159
	xor a
	push af
	ld a, 11
	push af
	ld a, 11
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	jp __LABEL1160
__LABEL1159:
	xor a
	push af
	ld a, 18
	sub (ix-2)
	inc a
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	sub (ix-2)
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL1160:
__LABEL1158:
	ld a, (ix-5)
	push af
	ld hl, __LABEL1161
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1163
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1163:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1164:
	call _Frames
	ld de, 20
	or a
	sbc hl, de
	jp nc, __LABEL1165
	ld a, (ix-5)
	push af
	ld hl, __LABEL1161
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1167
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1167:
	call _UpdateScreen
	call _ScanKeyb
	ld (ix-3), a
	or a
	jp z, __LABEL1169
	ld a, (ix-3)
	jp _ShowConstructor__leave
__LABEL1169:
	jp __LABEL1164
__LABEL1165:
	inc (ix-2)
__LABEL1152:
	ld a, 8
	cp (ix-2)
	jp nc, __LABEL1155
	jp __LABEL1150
__LABEL1151:
_ShowConstructor__leave:
	ld sp, ix
	pop ix
	ret
_ShowGhost:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1353
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -5
	add hl, bc
	ex de, hl
	ld hl, __LABEL1354
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 9
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL1170:
	ld a, (ix-1)
	or a
	jp nz, __LABEL1171
	ld (ix-2), 1
	jp __LABEL1172
__LABEL1175:
	ld a, (ix-2)
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-2)
	sub 3
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1177
	xor a
	push af
	ld a, 18
	push af
	ld a, 11
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	jp __LABEL1178
__LABEL1177:
	ld a, (ix-2)
	sub 2
	jp nz, __LABEL1179
	ld a, 1
	push af
	ld a, 17
	push af
	ld a, 12
	push af
	ld a, 5
	push af
	ld a, 1
	push af
	call _FillRect
	xor a
	push af
	ld a, 12
	push af
	ld a, 1
	push af
	call _SetCell
	xor a
	push af
	ld a, 12
	push af
	ld a, 5
	push af
	call _SetCell
	xor a
	push af
	ld a, 13
	push af
	ld a, 2
	push af
	call _SetCell
	xor a
	push af
	ld a, 13
	push af
	ld a, 4
	push af
	call _SetCell
	xor a
	push af
	ld a, 15
	push af
	ld a, 15
	push af
	ld a, 4
	push af
	ld a, 2
	push af
	call _FillRect
	xor a
	push af
	ld a, 17
	push af
	ld a, 2
	push af
	call _SetCell
	xor a
	push af
	ld a, 17
	push af
	ld a, 4
	push af
	call _SetCell
	jp __LABEL1180
__LABEL1179:
	ld a, (ix-2)
	sub 4
	jp nz, __LABEL1182
	ld a, 1
	push af
	ld a, 17
	push af
	ld a, 12
	push af
	ld a, 10
	push af
	ld a, 6
	push af
	call _FillRect
	xor a
	push af
	ld a, 12
	push af
	ld a, 6
	push af
	call _SetCell
	xor a
	push af
	ld a, 12
	push af
	ld a, 10
	push af
	call _SetCell
	xor a
	push af
	ld a, 13
	push af
	ld a, 7
	push af
	call _SetCell
	xor a
	push af
	ld a, 13
	push af
	ld a, 9
	push af
	call _SetCell
	xor a
	push af
	ld a, 15
	push af
	ld a, 15
	push af
	ld a, 9
	push af
	ld a, 7
	push af
	call _FillRect
	xor a
	push af
	ld a, 17
	push af
	ld a, 7
	push af
	call _SetCell
	xor a
	push af
	ld a, 17
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL1182:
__LABEL1180:
__LABEL1178:
	ld a, (ix-5)
	push af
	ld hl, __LABEL1183
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1185
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1185:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1186:
	call _Frames
	ld de, 30
	or a
	sbc hl, de
	jp nc, __LABEL1187
	ld a, (ix-5)
	push af
	ld hl, __LABEL1183
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1189
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1189:
	call _UpdateScreen
	call _ScanKeyb
	ld (ix-3), a
	or a
	jp z, __LABEL1191
	ld a, (ix-3)
	jp _ShowGhost__leave
__LABEL1191:
	jp __LABEL1186
__LABEL1187:
	inc (ix-2)
__LABEL1172:
	ld a, 4
	cp (ix-2)
	jp nc, __LABEL1175
	jp __LABEL1170
__LABEL1171:
_ShowGhost__leave:
	ld sp, ix
	pop ix
	ret
_ShowMatch:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -8
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 7
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -7
	add hl, bc
	ex de, hl
	ld hl, __LABEL1355
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -8
	add hl, bc
	ex de, hl
	ld hl, __LABEL1356
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 9
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL1192:
	ld a, (ix-4)
	or a
	jp nz, __LABEL1193
	ld (ix-1), 6
	ld (ix-2), 2
	ld (ix-3), 8
	ld (ix-5), 1
	jp __LABEL1194
__LABEL1197:
	ld a, (ix-1)
	push af
	ld a, 17
	push af
	ld a, 2
	push af
	call _ShowFigure
	ld a, (ix-2)
	push af
	ld a, 17
	push af
	ld a, 5
	push af
	call _ShowFigure
	ld a, (ix-3)
	push af
	ld a, 17
	push af
	ld a, 8
	push af
	call _ShowFigure
	inc (ix-1)
	inc (ix-2)
	inc (ix-3)
	ld a, (ix-8)
	push af
	ld hl, __LABEL1199
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-8)
	add a, (ix-7)
	ld (ix-8), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-8)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1201
	ld a, (ix-7)
	neg
	ld (ix-7), a
__LABEL1201:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1202:
	call _Frames
	ld de, 30
	or a
	sbc hl, de
	jp nc, __LABEL1203
	ld a, (ix-8)
	push af
	ld hl, __LABEL1199
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-8)
	add a, (ix-7)
	ld (ix-8), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-8)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1205
	ld a, (ix-7)
	neg
	ld (ix-7), a
__LABEL1205:
	call _UpdateScreen
	call _ScanKeyb
	ld (ix-6), a
	or a
	jp z, __LABEL1207
	ld a, (ix-6)
	jp _ShowMatch__leave
__LABEL1207:
	jp __LABEL1202
__LABEL1203:
	inc (ix-5)
__LABEL1194:
	ld a, 4
	cp (ix-5)
	jp nc, __LABEL1197
	jp __LABEL1192
__LABEL1193:
_ShowMatch__leave:
	ld sp, ix
	pop ix
	ret
_SelectGame:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	call _ShowNextTitle
	xor a
	push af
	xor a
	push af
	call _SetSymbol
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
__LABEL1208:
	ld a, (ix-1)
	sub 3
	jp z, __LABEL1209
	ld a, (_game)
	or a
	jp nz, __LABEL1210
	call _ShowTetris
	ld (ix-1), a
	jp __LABEL1211
__LABEL1210:
	ld a, (_game)
	dec a
	jp nz, __LABEL1212
	call _ShowArkanoid
	ld (ix-1), a
	jp __LABEL1213
__LABEL1212:
	ld a, (_game)
	sub 2
	jp nz, __LABEL1214
	call _ShowRacing
	ld (ix-1), a
	jp __LABEL1215
__LABEL1214:
	ld a, (_game)
	sub 3
	jp nz, __LABEL1216
	call _ShowSnake
	ld (ix-1), a
	jp __LABEL1217
__LABEL1216:
	ld a, (_game)
	sub 4
	jp nz, __LABEL1218
	call _ShowDestroyer
	ld (ix-1), a
	jp __LABEL1219
__LABEL1218:
	ld a, (_game)
	sub 5
	jp nz, __LABEL1220
	call _ShowGhost
	ld (ix-1), a
	jp __LABEL1221
__LABEL1220:
	ld a, (_game)
	sub 6
	jp nz, __LABEL1222
	call _ShowConstructor
	ld (ix-1), a
	jp __LABEL1223
__LABEL1222:
	ld a, (_game)
	sub 7
	jp nz, __LABEL1225
	call _ShowMatch
	ld (ix-1), a
__LABEL1225:
__LABEL1223:
__LABEL1221:
__LABEL1219:
__LABEL1217:
__LABEL1215:
__LABEL1213:
__LABEL1211:
	ld a, (ix-1)
	dec a
	jp nz, __LABEL1226
	ld hl, _game
	inc (hl)
	ld a, 7
	ld hl, (_game - 1)
	cp h
	jp nc, __LABEL1229
	xor a
	ld (_game), a
__LABEL1229:
	jp __LABEL1227
__LABEL1226:
	ld a, (ix-1)
	sub 2
	jp nz, __LABEL1230
	ld hl, _game
	dec (hl)
	ld a, 7
	ld hl, (_game - 1)
	cp h
	jp nc, __LABEL1233
	ld a, 7
	ld (_game), a
__LABEL1233:
	jp __LABEL1231
__LABEL1230:
	ld a, (ix-1)
	sub 3
	jp nz, __LABEL1235
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	call _UpdateScreen
	ld a, (_game)
	or a
	jp nz, __LABEL1236
	ld a, (_level)
	push af
	call _RunTetris
	jp _SelectGame__leave
__LABEL1236:
	ld a, (_game)
	dec a
	jp nz, __LABEL1238
	ld a, (_level)
	push af
	call _RunArkanoid
	jp _SelectGame__leave
__LABEL1238:
	ld a, (_game)
	sub 2
	jp nz, __LABEL1240
	ld a, (_level)
	push af
	call _RunRacing
	jp _SelectGame__leave
__LABEL1240:
	ld a, (_game)
	sub 3
	jp nz, __LABEL1242
	ld a, (_level)
	push af
	call _RunSnake
	jp _SelectGame__leave
__LABEL1242:
	ld a, (_game)
	sub 4
	jp nz, __LABEL1244
	ld a, (_level)
	push af
	call _RunDestroyer
	jp _SelectGame__leave
__LABEL1244:
	ld a, (_game)
	sub 5
	jp nz, __LABEL1246
	ld a, (_level)
	push af
	call _RunGhostHunter
	jp _SelectGame__leave
__LABEL1246:
	ld a, (_game)
	sub 6
	jp nz, __LABEL1248
	ld a, (_level)
	push af
	call _RunConstructor
	jp _SelectGame__leave
__LABEL1248:
	ld a, (_game)
	sub 7
	jp nz, __LABEL1251
	ld a, (_level)
	push af
	call _RunMatch
	jp _SelectGame__leave
__LABEL1251:
__LABEL1235:
__LABEL1231:
__LABEL1227:
	jp __LABEL1208
__LABEL1209:
_SelectGame__leave:
	ld sp, ix
	pop ix
	ret
__LABEL15:
	DEFW 0011h
	DEFB 98h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 9Ah
__LABEL21:
	DEFW 0001h
	DEFB 0A4h
__LABEL22:
	DEFW 000Fh
	DEFB 91h
	DEFB 91h
	DEFB 91h
	DEFB 91h
	DEFB 91h
	DEFB 91h
	DEFB 91h
	DEFB 91h
	DEFB 91h
	DEFB 91h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
__LABEL23:
	DEFW 0001h
	DEFB 0A2h
__LABEL24:
	DEFW 0001h
	DEFB 90h
__LABEL25:
	DEFW 0011h
	DEFB 99h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A0h
__LABEL26:
	DEFW 000Fh
	DEFB 20h
	DEFB 20h
	DEFB 39h
	DEFB 39h
	DEFB 39h
	DEFB 39h
	DEFB 20h
	DEFB 49h
	DEFB 4Eh
	DEFB 20h
	DEFB 4Fh
	DEFB 4Eh
	DEFB 45h
	DEFB 20h
	DEFB 20h
__LABEL27:
	DEFW 000Fh
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
__LABEL28:
	DEFW 0003h
	DEFB 95h
	DEFB 96h
	DEFB 97h
__LABEL29:
	DEFW 0002h
	DEFB 9Eh
	DEFB 9Fh
__LABEL30:
	DEFW 0003h
	DEFB 9Bh
	DEFB 9Ch
	DEFB 9Dh
__LABEL101:
	DEFW 0002h
	DEFB 20h
	DEFB 20h
__LABEL127:
	DEFW 0001h
	DEFB 30h
__LABEL358:
	DEFW 0000h
__LABEL389:
	DEFW 0001h
	DEFB 6Fh
__LABEL394:
	DEFW 0001h
	DEFB 70h
__LABEL399:
	DEFW 0001h
	DEFB 61h
__LABEL402:
	DEFW 0001h
	DEFB 20h
__LABEL409:
	DEFW 0001h
	DEFB 68h
__LABEL611:
	DEFW 0001h
	DEFB 71h
__LABEL1056:
	DEFW 0001h
	DEFB 41h
__LABEL1074:
	DEFW 0001h
	DEFB 42h
__LABEL1105:
	DEFW 0001h
	DEFB 43h
__LABEL1123:
	DEFW 0001h
	DEFB 44h
__LABEL1141:
	DEFW 0001h
	DEFB 45h
__LABEL1161:
	DEFW 0001h
	DEFB 47h
__LABEL1183:
	DEFW 0001h
	DEFB 46h
__LABEL1199:
	DEFW 0001h
	DEFB 48h
#line 1 "addf.asm"

#line 1 "stackf.asm"

	; -------------------------------------------------------------
	; Functions to manage FP-Stack of the ZX Spectrum ROM CALC
	; -------------------------------------------------------------


	__FPSTACK_PUSH EQU 2AB6h	; Stores an FP number into the ROM FP stack (A, ED CB)
	__FPSTACK_POP  EQU 2BF1h	; Pops an FP number out of the ROM FP stack (A, ED CB)

__FPSTACK_PUSH2: ; Pushes Current A ED CB registers and top of the stack on (SP + 4)
	                 ; Second argument to push into the stack calculator is popped out of the stack
	                 ; Since the caller routine also receives the parameters into the top of the stack
	                 ; four bytes must be removed from SP before pop them out

	    call __FPSTACK_PUSH ; Pushes A ED CB into the FP-STACK
	    exx
	    pop hl       ; Caller-Caller return addr
	    exx
	    pop hl       ; Caller return addr

	    pop af
	    pop de
	    pop bc

	    push hl      ; Caller return addr
	    exx
	    push hl      ; Caller-Caller return addr
	    exx

	    jp __FPSTACK_PUSH


__FPSTACK_I16:	; Pushes 16 bits integer in HL into the FP ROM STACK
					; This format is specified in the ZX 48K Manual
					; You can push a 16 bit signed integer as
					; 0 SS LL HH 0, being SS the sign and LL HH the low
					; and High byte respectively
		ld a, h
		rla			; sign to Carry
		sbc	a, a	; 0 if positive, FF if negative
		ld e, a
		ld d, l
		ld c, h
		xor a
		ld b, a
		jp __FPSTACK_PUSH
#line 2 "addf.asm"

	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)
	; All of them uses A EDCB registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order AF DE BC (F not used).
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__ADDF:	; Addition
		call __FPSTACK_PUSH2

		; ------------- ROM ADD
		rst 28h
		defb 0fh	; ADD
		defb 38h;   ; END CALC

		jp __FPSTACK_POP

#line 14338 "Program.zxbas"
#line 1 "array.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	; -------------------------------------------------------------------
	; Simple array Index routine
	; Number of total indexes dimensions - 1 at beginning of memory
	; HL = Start of array memory (First two bytes contains N-1 dimensions)
	; Dimension values on the stack, (top of the stack, highest dimension)
	; E.g. A(2, 4) -> PUSH <4>; PUSH <2>

	; For any array of N dimension A(aN-1, ..., a1, a0)
	; and dimensions D[bN-1, ..., b1, b0], the offset is calculated as
	; O = [a0 + b0 * (a1 + b1 * (a2 + ... bN-2(aN-1)))]
; What I will do here is to calculate the following sequence:
	; ((aN-1 * bN-2) + aN-2) * bN-3 + ...


#line 1 "mul16.asm"

__MUL16:	; Mutiplies HL with the last value stored into de stack
				; Works for both signed and unsigned

			PROC

			LOCAL __MUL16LOOP
	        LOCAL __MUL16NOADD

			ex de, hl
			pop hl		; Return address
			ex (sp), hl ; CALLEE caller convention

__MUL16_FAST:
	        ld b, 16
	        ld a, h
	        ld c, l
	        ld hl, 0

__MUL16LOOP:
	        add hl, hl  ; hl << 1
	        sla c
	        rla         ; a,c << 1
	        jp nc, __MUL16NOADD
	        add hl, de

__MUL16NOADD:
	        djnz __MUL16LOOP

			ret	; Result in hl (16 lower bits)

			ENDP

#line 20 "array.asm"

#line 24 "C:/zxbasic/library-asm/array.asm"

__ARRAY_PTR:   ;; computes an array offset from a pointer
	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c

__ARRAY:
		PROC

		LOCAL LOOP
		LOCAL ARRAY_END
		LOCAL RET_ADDRESS ; Stores return address
		LOCAL TMP_ARR_PTR ; Stores pointer temporarily

	    ld e, (hl)
	    inc hl
	    ld d, (hl)
	    inc hl
	    ld (TMP_ARR_PTR), hl
	    ex de, hl
		ex (sp), hl	; Return address in HL, array address in the stack
		ld (RET_ADDRESS + 1), hl ; Stores it for later

		exx
		pop hl		; Will use H'L' as the pointer
		ld c, (hl)	; Loads Number of dimensions from (hl)
		inc hl
		ld b, (hl)
		inc hl		; Ready
		exx

		ld hl, 0	; HL = Offset "accumulator"

LOOP:
#line 62 "C:/zxbasic/library-asm/array.asm"
		pop bc		; Get next index (Ai) from the stack

#line 72 "C:/zxbasic/library-asm/array.asm"

		add hl, bc	; Adds current index

		exx			; Checks if B'C' = 0
		ld a, b		; Which means we must exit (last element is not multiplied by anything)
		or c
		jr z, ARRAY_END		; if B'Ci == 0 we are done

		ld e, (hl)			; Loads next dimension into D'E'
		inc hl
		ld d, (hl)
		inc hl
		push de
		dec bc				; Decrements loop counter
		exx
		pop de				; DE = Max bound Number (i-th dimension)

	    call __FNMUL
		jp LOOP

ARRAY_END:
		ld a, (hl)
		exx

#line 101 "C:/zxbasic/library-asm/array.asm"
	    LOCAL ARRAY_SIZE_LOOP

	    ex de, hl
	    ld hl, 0
	    ld b, a
ARRAY_SIZE_LOOP:
	    add hl, de
	    djnz ARRAY_SIZE_LOOP

#line 111 "C:/zxbasic/library-asm/array.asm"

	    ex de, hl
		ld hl, (TMP_ARR_PTR)
		ld a, (hl)
		inc hl
		ld h, (hl)
		ld l, a
		add hl, de  ; Adds element start

RET_ADDRESS:
		jp 0

	    ;; Performs a faster multiply for little 16bit numbs
	    LOCAL __FNMUL, __FNMUL2

__FNMUL:
	    xor a
	    or h
	    jp nz, __MUL16_FAST
	    or l
	    ret z

	    cp 33
	    jp nc, __MUL16_FAST

	    ld b, l
	    ld l, h  ; HL = 0

__FNMUL2:
	    add hl, de
	    djnz __FNMUL2
	    ret

TMP_ARR_PTR:
	    DW 0  ; temporary storage for pointer to tables

		ENDP

#line 14339 "Program.zxbas"
#line 1 "arrayalloc.asm"


#line 1 "calloc.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the MIT license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the MIT license on the internet

#line 1 "alloc.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the MIT license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the MIT license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be freed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.

#line 1 "error.asm"

	; Simple error control routines
; vim:ts=4:et:

	ERR_NR    EQU    23610    ; Error code system variable


	; Error code definitions (as in ZX spectrum manual)

; Set error code with:
	;    ld a, ERROR_CODE
	;    ld (ERR_NR), a


	ERROR_Ok                EQU    -1
	ERROR_SubscriptWrong    EQU     2
	ERROR_OutOfMemory       EQU     3
	ERROR_OutOfScreen       EQU     4
	ERROR_NumberTooBig      EQU     5
	ERROR_InvalidArg        EQU     9
	ERROR_IntOutOfRange     EQU    10
	ERROR_NonsenseInBasic   EQU    11
	ERROR_InvalidFileName   EQU    14
	ERROR_InvalidColour     EQU    19
	ERROR_BreakIntoProgram  EQU    20
	ERROR_TapeLoadingErr    EQU    26


	; Raises error using RST #8
__ERROR:
	    ld (__ERROR_CODE), a
	    rst 8
__ERROR_CODE:
	    nop
	    ret

	; Sets the error system variable, but keeps running.
	; Usually this instruction if followed by the END intermediate instruction.
__STOP:
	    ld (ERR_NR), a
	    ret
#line 69 "alloc.asm"
#line 1 "heapinit.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.




	; ---------------------------------------------------------------------
	;  __MEM_INIT must be called to initalize this library with the
	; standard parameters
	; ---------------------------------------------------------------------
__MEM_INIT: ; Initializes the library using (RAMTOP) as start, and
	        ld hl, ZXBASIC_MEM_HEAP  ; Change this with other address of heap start
	        ld de, ZXBASIC_HEAP_SIZE ; Change this with your size

	; ---------------------------------------------------------------------
	;  __MEM_INIT2 initalizes this library
; Parameters:
;   HL : Memory address of 1st byte of the memory heap
;   DE : Length in bytes of the Memory Heap
	; ---------------------------------------------------------------------
__MEM_INIT2:
	        ; HL as TOP
	        PROC

	        dec de
	        dec de
	        dec de
	        dec de        ; DE = length - 4; HL = start
	        ; This is done, because we require 4 bytes for the empty dummy-header block

	        xor a
	        ld (hl), a
	        inc hl
        ld (hl), a ; First "free" block is a header: size=0, Pointer=&(Block) + 4
	        inc hl

	        ld b, h
	        ld c, l
	        inc bc
	        inc bc      ; BC = starts of next block

	        ld (hl), c
	        inc hl
	        ld (hl), b
	        inc hl      ; Pointer to next block

	        ld (hl), e
	        inc hl
	        ld (hl), d
	        inc hl      ; Block size (should be length - 4 at start); This block contains all the available memory

	        ld (hl), a ; NULL (0000h) ; No more blocks (a list with a single block)
	        inc hl
	        ld (hl), a

	        ld a, 201
	        ld (__MEM_INIT), a; "Pokes" with a RET so ensure this routine is not called again
	        ret

	        ENDP

#line 70 "alloc.asm"


	; ---------------------------------------------------------------------
	; MEM_ALLOC
	;  Allocates a block of memory in the heap.
	;
	; Parameters
	;  BC = Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	; ---------------------------------------------------------------------

MEM_ALLOC:
__MEM_ALLOC: ; Returns the 1st free block found of the given length (in BC)
	        PROC

	        LOCAL __MEM_LOOP
	        LOCAL __MEM_DONE
	        LOCAL __MEM_SUBTRACT
	        LOCAL __MEM_START
	        LOCAL TEMP, TEMP0

	TEMP EQU TEMP0 + 1

	        ld hl, 0
	        ld (TEMP), hl

__MEM_START:
	        ld hl, ZXBASIC_MEM_HEAP  ; This label point to the heap start
	        inc bc
	        inc bc  ; BC = BC + 2 ; block size needs 2 extra bytes for hidden pointer

__MEM_LOOP:  ; Loads lengh at (HL, HL+). If Lenght >= BC, jump to __MEM_DONE
	        ld a, h ;  HL = NULL (No memory available?)
	        or l
#line 111 "C:/zxbasic/library-asm/alloc.asm"
	        ret z ; NULL
#line 113 "C:/zxbasic/library-asm/alloc.asm"
	        ; HL = Pointer to Free block
	        ld e, (hl)
	        inc hl
	        ld d, (hl)
	        inc hl          ; DE = Block Length

	        push hl         ; HL = *pointer to -> next block
	        ex de, hl
	        or a            ; CF = 0
	        sbc hl, bc      ; FREE >= BC (Length)  (HL = BlockLength - Length)
	        jp nc, __MEM_DONE
	        pop hl
	        ld (TEMP), hl

	        ex de, hl
	        ld e, (hl)
	        inc hl
	        ld d, (hl)
	        ex de, hl
	        jp __MEM_LOOP

__MEM_DONE:  ; A free block has been found.
	             ; Check if at least 4 bytes remains free (HL >= 4)
	        push hl
	        exx  ; exx to preserve bc
	        pop hl
	        ld bc, 4
	        or a
	        sbc hl, bc
	        exx
	        jp nc, __MEM_SUBTRACT
	        ; At this point...
	        ; less than 4 bytes remains free. So we return this block entirely
	        ; We must link the previous block with the next to this one
	        ; (DE) => Pointer to next block
	        ; (TEMP) => &(previous->next)
	        pop hl     ; Discard current block pointer
	        push de
	        ex de, hl  ; DE = Previous block pointer; (HL) = Next block pointer
	        ld a, (hl)
	        inc hl
	        ld h, (hl)
	        ld l, a    ; HL = (HL)
	        ex de, hl  ; HL = Previous block pointer; DE = Next block pointer
TEMP0:
	        ld hl, 0   ; Pre-previous block pointer

	        ld (hl), e
	        inc hl
	        ld (hl), d ; LINKED
	        pop hl ; Returning block.

	        ret

__MEM_SUBTRACT:
	        ; At this point we have to store HL value (Length - BC) into (DE - 2)
	        ex de, hl
	        dec hl
	        ld (hl), d
	        dec hl
	        ld (hl), e ; Store new block length

	        add hl, de ; New length + DE => free-block start
	        pop de     ; Remove previous HL off the stack

	        ld (hl), c ; Store length on its 1st word
	        inc hl
	        ld (hl), b
	        inc hl     ; Return hl
	        ret

	        ENDP

#line 13 "calloc.asm"


	; ---------------------------------------------------------------------
	; MEM_CALLOC
	;  Allocates a block of memory in the heap, and clears it filling it
	;  with 0 bytes
	;
	; Parameters
	;  BC = Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	; ---------------------------------------------------------------------
__MEM_CALLOC:
	        push bc
	        call __MEM_ALLOC
	        pop bc
	        ld a, h
	        or l
	        ret z  ; No memory
	        ld (hl), 0
	        dec bc
	        ld a, b
	        or c
	        ret z  ; Already filled (1 byte-length block)
	        ld d, h
	        ld e, l
	        inc de
	        push hl
	        ldir
	        pop hl
	        ret
#line 3 "arrayalloc.asm"


	; ---------------------------------------------------------------------
	; __ALLOC_LOCAL_ARRAY
	;  Allocates an array element area in the heap, and clears it filling it
	;  with 0 bytes
	;
	; Parameters
	;  HL = Offset to be added to IX => HL = IX + HL
	;  BC = Length of the element area = n.elements * size(element)
	;  DE = PTR to the index table
	;
; Returns:
	;  HL = (IX + HL) + 4
	; ---------------------------------------------------------------------

__ALLOC_LOCAL_ARRAY:
	    push de
	    push ix
	    pop de
	    add hl, de  ; hl = ix + hl
	    pop de
	    ld (hl), e
	    inc hl
	    ld (hl), d
	    inc hl
	    push hl
	    call __MEM_CALLOC
	    pop de
	    ex de, hl
	    ld (hl), e
	    inc hl
	    ld (hl), d
	    ret


	; ---------------------------------------------------------------------
	; __ALLOC_INITIALIZED_LOCAL_ARRAY
	;  Allocates an array element area in the heap, and clears it filling it
	;  with 0 bytes
	;
	; Parameters
	;  HL = Offset to be added to IX => HL = IX + HL
	;  BC = Length of the element area = n.elements * size(element)
	;  DE = PTR to the index table
	;  [SP + 2] = PTR to the element area
	;
; Returns:
	;  HL = (IX + HL) + 4
	; ---------------------------------------------------------------------

__ALLOC_INITIALIZED_LOCAL_ARRAY:
	    push bc
	    call __ALLOC_LOCAL_ARRAY
	    pop bc
	    ;; Swaps [SP], [SP + 2]
	    exx
	    pop hl       ; HL <- RET address
	    ex (sp), hl  ; HL <- Data table, [SP] <- RET address
	    push hl      ; [SP] <- Data table
	    exx
	    ex (sp), hl  ; HL = Data table, (SP) = (IX + HL + 4) - start of array address lbound
	    ; HL = data table
	    ; BC = length
	    ; DE = new data area
	    ldir
	    pop hl  ; HL = addr of LBound area if used
	    ret


#line 137 "C:/zxbasic/library-asm/arrayalloc.asm"
#line 14340 "Program.zxbas"
#line 1 "asc.asm"

	; Returns the ascii code for the given str
#line 1 "free.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.



	; ---------------------------------------------------------------------
	; MEM_FREE
	;  Frees a block of memory
	;
; Parameters:
	;  HL = Pointer to the block to be freed. If HL is NULL (0) nothing
	;  is done
	; ---------------------------------------------------------------------

MEM_FREE:
__MEM_FREE: ; Frees the block pointed by HL
	            ; HL DE BC & AF modified
	        PROC

	        LOCAL __MEM_LOOP2
	        LOCAL __MEM_LINK_PREV
	        LOCAL __MEM_JOIN_TEST
	        LOCAL __MEM_BLOCK_JOIN

	        ld a, h
	        or l
	        ret z       ; Return if NULL pointer

	        dec hl
	        dec hl
	        ld b, h
	        ld c, l    ; BC = Block pointer

	        ld hl, ZXBASIC_MEM_HEAP  ; This label point to the heap start

__MEM_LOOP2:
	        inc hl
	        inc hl     ; Next block ptr

	        ld e, (hl)
	        inc hl
	        ld d, (hl) ; Block next ptr
	        ex de, hl  ; DE = &(block->next); HL = block->next

	        ld a, h    ; HL == NULL?
	        or l
	        jp z, __MEM_LINK_PREV; if so, link with previous

	        or a       ; Clear carry flag
	        sbc hl, bc ; Carry if BC > HL => This block if before
	        add hl, bc ; Restores HL, preserving Carry flag
	        jp c, __MEM_LOOP2 ; This block is before. Keep searching PASS the block

	;------ At this point current HL is PAST BC, so we must link (DE) with BC, and HL in BC->next

__MEM_LINK_PREV:    ; Link (DE) with BC, and BC->next with HL
	        ex de, hl
	        push hl
	        dec hl

	        ld (hl), c
	        inc hl
	        ld (hl), b ; (DE) <- BC

	        ld h, b    ; HL <- BC (Free block ptr)
	        ld l, c
	        inc hl     ; Skip block length (2 bytes)
	        inc hl
	        ld (hl), e ; Block->next = DE
	        inc hl
	        ld (hl), d
	        ; --- LINKED ; HL = &(BC->next) + 2

	        call __MEM_JOIN_TEST
	        pop hl

__MEM_JOIN_TEST:   ; Checks for fragmented contiguous blocks and joins them
	                   ; hl = Ptr to current block + 2
	        ld d, (hl)
	        dec hl
	        ld e, (hl)
	        dec hl
	        ld b, (hl) ; Loads block length into BC
	        dec hl
	        ld c, (hl) ;

	        push hl    ; Saves it for later
	        add hl, bc ; Adds its length. If HL == DE now, it must be joined
	        or a
	        sbc hl, de ; If Z, then HL == DE => We must join
	        pop hl
	        ret nz

__MEM_BLOCK_JOIN:  ; Joins current block (pointed by HL) with next one (pointed by DE). HL->length already in BC
	        push hl    ; Saves it for later
	        ex de, hl

	        ld e, (hl) ; DE -> block->next->length
	        inc hl
	        ld d, (hl)
	        inc hl

	        ex de, hl  ; DE = &(block->next)
	        add hl, bc ; HL = Total Length

	        ld b, h
	        ld c, l    ; BC = Total Length

	        ex de, hl
	        ld e, (hl)
	        inc hl
	        ld d, (hl) ; DE = block->next

	        pop hl     ; Recovers Pointer to block
	        ld (hl), c
	        inc hl
	        ld (hl), b ; Length Saved
	        inc hl
	        ld (hl), e
	        inc hl
	        ld (hl), d ; Next saved
	        ret

	        ENDP

#line 3 "asc.asm"

__ASC:
		PROC
		LOCAL __ASC_END

		ex af, af'	; Saves free_mem flag

		ld a, h
		or l
		ret z		; NULL? return

		ld c, (hl)
		inc hl
		ld b, (hl)

		ld a, b
		or c
		jr z, __ASC_END		; No length? return

		inc hl
		ld a, (hl)
	    dec hl

__ASC_END:
		dec hl
		ex af, af'
		or a
		call nz, __MEM_FREE	; Free memory if needed

		ex af, af'	; Recover result

		ret
		ENDP
#line 14341 "Program.zxbas"
#line 1 "band16.asm"

; vim:ts=4:et:
	; FASTCALL bitwise and16 version.
	; result in hl
; __FASTCALL__ version (operands: A, H)
	; Performs 16bit or 16bit and returns the boolean
; Input: HL, DE
; Output: HL <- HL AND DE

__BAND16:
		ld a, h
		and d
	    ld h, a

	    ld a, l
	    and e
	    ld l, a

	    ret

#line 14342 "Program.zxbas"
#line 1 "beeper.asm"

; vim:ts=4:et:sw=4:
	; This is a fast beep routine, but needs parameters
	; codified in a different way.
; See http://www.wearmouth.demon.co.uk/zx82.htm#L03F8

	; Needs pitch on top of the stack
	; HL = duration

__BEEPER:
	    ex de, hl
	    pop hl
	    ex (sp), hl ; CALLEE
	    push ix     ; BEEPER changes IX
	    call 03B5h
	    pop ix
	    ret


#line 14343 "Program.zxbas"
#line 1 "border.asm"

	; __FASTCALL__ Routine to change de border
	; Parameter (color) specified in A register

	BORDER EQU 229Bh

	; Nothing to do! (Directly from the ZX Spectrum ROM)

#line 14344 "Program.zxbas"
#line 1 "bright.asm"

	; Sets bright flag in ATTR_P permanently
; Parameter: Paper color in A register

#line 1 "const.asm"

	; Global constants

	P_FLAG	EQU 23697
	FLAGS2	EQU 23681
	ATTR_P	EQU 23693	; permanet ATTRIBUTES
	ATTR_T	EQU 23695	; temporary ATTRIBUTES
	CHARS	EQU 23606 ; Pointer to ROM/RAM Charset
	UDG	EQU 23675 ; Pointer to UDG Charset
	MEM0	EQU 5C92h ; Temporary memory buffer used by ROM chars

#line 5 "bright.asm"

BRIGHT:
		ld hl, ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

__SET_BRIGHT:
		; Another entry. This will set the bright flag at location pointer by DE
		cp 8
		jr z, IS_TR

		; # Convert to 0/1
		or a
		jr z, IS_ZERO
		ld a, 0x40

IS_ZERO:
		ld b, a	; Saves the color
		ld a, (hl)
		and 0BFh ; Clears previous value
		or b
		ld (hl), a
		inc hl
		res 6, (hl)  ;Reset bit 6 to disable transparency
		ret

IS_TR:  ; transparent
		inc hl ; Points DE to MASK_T or MASK_P
	    set 6, (hl)  ;Set bit 6 to enable transparency
		ret

	; Sets the BRIGHT flag passed in A register in the ATTR_T variable
BRIGHT_TMP:
		ld hl, ATTR_T
		jr __SET_BRIGHT
	    ENDP
#line 14345 "Program.zxbas"
#line 1 "chr.asm"

	; CHR$(x, y, x) returns the string CHR$(x) + CHR$(y) + CHR$(z)
	;



CHR:	; Returns HL = Pointer to STRING (NULL if no memory)
			; Requires alloc.asm for dynamic memory heap.
		; Parameters: HL = Number of bytes to insert (already push onto the stack)
			; STACK => parameters (16 bit, only the High byte is considered)
			; Used registers A, A', BC, DE, HL, H'L'

			PROC

			LOCAL __POPOUT
			LOCAL TMP

	TMP		EQU 23629 ; (DEST System variable)

			ld a, h
			or l
			ret z	; If Number of parameters is ZERO, return NULL STRING

			ld b, h
			ld c, l

			pop hl	; Return address
			ld (TMP), hl

			push bc
			inc bc
			inc bc	; BC = BC + 2 => (2 bytes for the length number)
			call __MEM_ALLOC
			pop bc

			ld d, h
			ld e, l			; Saves HL in DE

			ld a, h
			or l
			jr z, __POPOUT	; No Memory, return

			ld (hl), c
			inc hl
			ld (hl), b
			inc hl

__POPOUT:	; Removes out of the stack every byte and return
				; If Zero Flag is set, don't store bytes in memory
			ex af, af' ; Save Zero Flag

			ld a, b
			or c
			jr z, __CHR_END

			dec bc
			pop af 	   ; Next byte

			ex af, af' ; Recovers Zero flag
			jr z, __POPOUT

			ex af, af' ; Saves Zero flag
			ld (hl), a
			inc hl
	        ex af, af' ; Recovers Zero Flag

			jp __POPOUT

__CHR_END:
			ld hl, (TMP)
			push hl		; Restores return addr
			ex de, hl	; Recovers original HL ptr
			ret

			ENDP

#line 14346 "Program.zxbas"
#line 1 "copy_attr.asm"


#line 1 "print.asm"

; vim:ts=4:sw=4:et:
; vim:ts=4:sw=4:et:
	; PRINT command routine
	; Does not print attribute. Use PRINT_STR or PRINT_NUM for that

#line 1 "sposn.asm"

	; Printing positioning library.
			PROC
			LOCAL ECHO_E

__LOAD_S_POSN:		; Loads into DE current ROW, COL print position from S_POSN mem var.
			ld de, (S_POSN)
			ld hl, (MAXX)
			or a
			sbc hl, de
			ex de, hl
			ret


__SAVE_S_POSN:		; Saves ROW, COL from DE into S_POSN mem var.
			ld hl, (MAXX)
			or a
			sbc hl, de
			ld (S_POSN), hl ; saves it again
			ret


	ECHO_E	EQU 23682
	MAXX	EQU ECHO_E   ; Max X position + 1
	MAXY	EQU MAXX + 1 ; Max Y position + 1

	S_POSN	EQU 23688
	POSX	EQU S_POSN		; Current POS X
	POSY	EQU S_POSN + 1	; Current POS Y

			ENDP

#line 7 "print.asm"
#line 1 "cls.asm"

	; JUMPS directly to spectrum CLS
	; This routine does not clear lower screen

	;CLS	EQU	0DAFh

	; Our faster implementation



CLS:
		PROC

		LOCAL COORDS
		LOCAL __CLS_SCR
		LOCAL ATTR_P
		LOCAL SCREEN

		ld hl, 0
		ld (COORDS), hl
	    ld hl, 1821h
		ld (S_POSN), hl
__CLS_SCR:
		ld hl, SCREEN
		ld (hl), 0
		ld d, h
		ld e, l
		inc de
		ld bc, 6144
		ldir

		; Now clear attributes

		ld a, (ATTR_P)
		ld (hl), a
		ld bc, 767
		ldir
		ret

	COORDS	EQU	23677
	SCREEN	EQU 16384 ; Default start of the screen (can be changed)
	ATTR_P	EQU 23693
	;you can poke (SCREEN_SCRADDR) to change CLS, DRAW & PRINTing address

	SCREEN_ADDR EQU (__CLS_SCR + 1) ; Address used by print and other screen routines
								    ; to get the start of the screen
		ENDP

#line 8 "print.asm"
#line 1 "in_screen.asm"




__IN_SCREEN:
		; Returns NO carry if current coords (D, E)
		; are OUT of the screen limits (MAXX, MAXY)

		PROC
		LOCAL __IN_SCREEN_ERR

		ld hl, MAXX
		ld a, e
		cp (hl)
		jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range

		ld a, d
		inc hl
		cp (hl)
		;; jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range
		;; ret
	    ret c                       ; Return if carry (OK)

__IN_SCREEN_ERR:
__OUT_OF_SCREEN_ERR:
		; Jumps here if out of screen
		ld a, ERROR_OutOfScreen
	    jp __STOP   ; Saves error code and exits

		ENDP
#line 9 "print.asm"
#line 1 "table_jump.asm"


JUMP_HL_PLUS_2A: ; Does JP (HL + A*2) Modifies DE. Modifies A
		add a, a

JUMP_HL_PLUS_A:	 ; Does JP (HL + A) Modifies DE
		ld e, a
		ld d, 0

JUMP_HL_PLUS_DE: ; Does JP (HL + DE)
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		ex de, hl
CALL_HL:
		jp (hl)

#line 10 "print.asm"
#line 1 "ink.asm"

	; Sets ink color in ATTR_P permanently
; Parameter: Paper color in A register



INK:
		PROC
		LOCAL __SET_INK
		LOCAL __SET_INK2

		ld de, ATTR_P

__SET_INK:
		cp 8
		jr nz, __SET_INK2

		inc de ; Points DE to MASK_T or MASK_P
		ld a, (de)
		or 7 ; Set bits 0,1,2 to enable transparency
		ld (de), a
		ret

__SET_INK2:
		; Another entry. This will set the ink color at location pointer by DE
		and 7	; # Gets color mod 8
		ld b, a	; Saves the color
		ld a, (de)
		and 0F8h ; Clears previous value
		or b
		ld (de), a
		inc de ; Points DE to MASK_T or MASK_P
		ld a, (de)
		and 0F8h ; Reset bits 0,1,2 sign to disable transparency
		ld (de), a ; Store new attr
		ret

	; Sets the INK color passed in A register in the ATTR_T variable
INK_TMP:
		ld de, ATTR_T
		jp __SET_INK

		ENDP

#line 11 "print.asm"
#line 1 "paper.asm"

	; Sets paper color in ATTR_P permanently
; Parameter: Paper color in A register



PAPER:
		PROC
		LOCAL __SET_PAPER
		LOCAL __SET_PAPER2

		ld de, ATTR_P

__SET_PAPER:
		cp 8
		jr nz, __SET_PAPER2
		inc de
		ld a, (de)
		or 038h
		ld (de), a
		ret

		; Another entry. This will set the paper color at location pointer by DE
__SET_PAPER2:
		and 7	; # Remove
		rlca
		rlca
		rlca		; a *= 8

		ld b, a	; Saves the color
		ld a, (de)
		and 0C7h ; Clears previous value
		or b
		ld (de), a
		inc de ; Points to MASK_T or MASK_P accordingly
		ld a, (de)
		and 0C7h  ; Resets bits 3,4,5
		ld (de), a
		ret


	; Sets the PAPER color passed in A register in the ATTR_T variable
PAPER_TMP:
		ld de, ATTR_T
		jp __SET_PAPER
		ENDP

#line 12 "print.asm"
#line 1 "flash.asm"

	; Sets flash flag in ATTR_P permanently
; Parameter: Paper color in A register



FLASH:
		ld hl, ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

__SET_FLASH:
		; Another entry. This will set the flash flag at location pointer by DE
		cp 8
		jr z, IS_TR

		; # Convert to 0/1
		or a
		jr z, IS_ZERO
		ld a, 0x80

IS_ZERO:
		ld b, a	; Saves the color
		ld a, (hl)
		and 07Fh ; Clears previous value
		or b
		ld (hl), a
		inc hl
		res 7, (hl)  ;Reset bit 7 to disable transparency
		ret

IS_TR:  ; transparent
		inc hl ; Points DE to MASK_T or MASK_P
		set 7, (hl)  ;Set bit 7 to enable transparency
		ret

	; Sets the FLASH flag passed in A register in the ATTR_T variable
FLASH_TMP:
		ld hl, ATTR_T
		jr __SET_FLASH
	    ENDP

#line 13 "print.asm"

#line 1 "over.asm"

	; Sets OVER flag in P_FLAG permanently
; Parameter: OVER flag in bit 0 of A register



OVER:
		PROC

		ld c, a ; saves it for later
		and 2
		ld hl, FLAGS2
		res 1, (HL)
		or (hl)
		ld (hl), a

		ld a, c	; Recovers previous value
		and 1	; # Convert to 0/1
		add a, a; # Shift left 1 bit for permanent

		ld hl, P_FLAG
		res 1, (hl)
		or (hl)
		ld (hl), a
		ret

	; Sets OVER flag in P_FLAG temporarily
OVER_TMP:
		ld c, a ; saves it for later
		and 2	; gets bit 1; clears carry
		rra
		ld hl, FLAGS2
		res 0, (hl)
		or (hl)
		ld (hl), a

		ld a, c	; Recovers previous value
		and 1
		ld hl, P_FLAG
		res 0, (hl)
	    or (hl)
		ld (hl), a
		jp __SET_ATTR_MODE

		ENDP

#line 15 "print.asm"
#line 1 "inverse.asm"

	; Sets INVERSE flag in P_FLAG permanently
; Parameter: INVERSE flag in bit 0 of A register



INVERSE:
		PROC

		and 1	; # Convert to 0/1
		add a, a; # Shift left 3 bits for permanent
		add a, a
		add a, a
		ld hl, P_FLAG
		res 3, (hl)
		or (hl)
		ld (hl), a
		ret

	; Sets INVERSE flag in P_FLAG temporarily
INVERSE_TMP:
		and 1
		add a, a
		add a, a; # Shift left 2 bits for temporary
		ld hl, P_FLAG
		res 2, (hl)
		or (hl)
		ld (hl), a
		jp __SET_ATTR_MODE

		ENDP

#line 16 "print.asm"
#line 1 "bold.asm"

	; Sets BOLD flag in P_FLAG permanently
; Parameter: BOLD flag in bit 0 of A register


BOLD:
		PROC

		and 1
		rlca
	    rlca
	    rlca
		ld hl, FLAGS2
		res 3, (HL)
		or (hl)
		ld (hl), a
		ret

	; Sets BOLD flag in P_FLAG temporarily
BOLD_TMP:
		and 1
		rlca
		rlca
		ld hl, FLAGS2
		res 2, (hl)
		or (hl)
		ld (hl), a
		ret

		ENDP

#line 17 "print.asm"
#line 1 "italic.asm"

	; Sets ITALIC flag in P_FLAG permanently
; Parameter: ITALIC flag in bit 0 of A register


ITALIC:
		PROC

		and 1
	    rrca
	    rrca
	    rrca
		ld hl, FLAGS2
		res 5, (HL)
		or (hl)
		ld (hl), a
		ret

	; Sets ITALIC flag in P_FLAG temporarily
ITALIC_TMP:
		and 1
		rrca
		rrca
		rrca
		rrca
		ld hl, FLAGS2
		res 4, (hl)
		or (hl)
		ld (hl), a
		ret

		ENDP

#line 18 "print.asm"

#line 1 "attr.asm"

	; Attribute routines
; vim:ts=4:et:sw:







__ATTR_ADDR:
	    ; calc start address in DE (as (32 * d) + e)
    ; Contributed by Santiago Romero at http://www.speccy.org
	    ld h, 0                     ;  7 T-States
	    ld a, d                     ;  4 T-States
	    add a, a     ; a * 2        ;  4 T-States
	    add a, a     ; a * 4        ;  4 T-States
	    ld l, a      ; HL = A * 4   ;  4 T-States

	    add hl, hl   ; HL = A * 8   ; 15 T-States
	    add hl, hl   ; HL = A * 16  ; 15 T-States
	    add hl, hl   ; HL = A * 32  ; 15 T-States

    ld d, 18h ; DE = 6144 + E. Note: 6144 is the screen size (before attr zone)
	    add hl, de

	    ld de, (SCREEN_ADDR)    ; Adds the screen address
	    add hl, de

	    ; Return current screen address in HL
	    ret


	; Sets the attribute at a given screen coordinate (D, E).
	; The attribute is taken from the ATTR_T memory variable
	; Used by PRINT routines
SET_ATTR:

	    ; Checks for valid coords
	    call __IN_SCREEN
	    ret nc

__SET_ATTR:
	    ; Internal __FASTCALL__ Entry used by printing routines
	    PROC

	    call __ATTR_ADDR

__SET_ATTR2:  ; Sets attr from ATTR_T to (HL) which points to the scr address
	    ld de, (ATTR_T)    ; E = ATTR_T, D = MASK_T

	    ld a, d
	    and (hl)
	    ld c, a    ; C = current screen color, masked

	    ld a, d
	    cpl        ; Negate mask
	    and e    ; Mask current attributes
	    or c    ; Mix them
	    ld (hl), a ; Store result in screen

	    ret

	    ENDP


	; Sets the attribute at a given screen pixel address in hl
	; HL contains the address in RAM for a given pixel (not a coordinate)
SET_PIXEL_ADDR_ATTR:
	    ;; gets ATTR position with offset given in SCREEN_ADDR
	    ld a, h
	    rrca
	    rrca
	    rrca
	    and 3
	    or 18h
	    ld h, a
	    ld de, (SCREEN_ADDR)
	    add hl, de  ;; Final screen addr
	    jp __SET_ATTR2
#line 20 "print.asm"

	; Putting a comment starting with @INIT <address>
	; will make the compiler to add a CALL to <address>
	; It is useful for initialization routines.


__PRINT_INIT: ; To be called before program starts (initializes library)
	        PROC

	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl

	        ld hl, 1821h
	        ld (MAXX), hl  ; Sets current maxX and maxY

	        xor a
	        ld (FLAGS2), a

	        ret


__PRINTCHAR: ; Print character store in accumulator (A register)
	             ; Modifies H'L', B'C', A'F', D'E', A

	        LOCAL PO_GR_1

	        LOCAL __PRCHAR
	        LOCAL __PRINT_CONT
	        LOCAL __PRINT_CONT2
	        LOCAL __PRINT_JUMP
	        LOCAL __SRCADDR
	        LOCAL __PRINT_UDG
	        LOCAL __PRGRAPH
	        LOCAL __PRINT_START
	        LOCAL __ROM_SCROLL_SCR
	        LOCAL __TVFLAGS

	        __ROM_SCROLL_SCR EQU 0DFEh
	        __TVFLAGS EQU 5C3Ch

	PRINT_JUMP_STATE EQU __PRINT_JUMP + 1

__PRINT_JUMP:
	        jp __PRINT_START    ; Where to jump. If we print 22 (AT), next two calls jumps to AT1 and AT2 respectively


	        LOCAL __SCROLL
__SCROLL:  ; Scroll?
	        ld hl, __TVFLAGS
	        bit 1, (hl)
	        ret z
	        call __ROM_SCROLL_SCR
	        ld hl, __TVFLAGS
	        res 1, (hl)
	        ret
#line 76 "C:/zxbasic/library-asm/print.asm"

__PRINT_START:
	        cp ' '
	        jp c, __PRINT_SPECIAL    ; Characters below ' ' are special ones

	        exx               ; Switch to alternative registers
	        ex af, af'        ; Saves a value (char to print) for later


	        call __SCROLL
#line 87 "C:/zxbasic/library-asm/print.asm"
	        call __LOAD_S_POSN

	; At this point we have the new coord
	        ld hl, (SCREEN_ADDR)

	        ld a, d
	        ld c, a     ; Saves it for later

	        and 0F8h    ; Masks 3 lower bit ; zy
	        ld d, a

	        ld a, c     ; Recovers it
	        and 07h     ; MOD 7 ; y1
	        rrca
	        rrca
	        rrca

	        or e
	        ld e, a
	        add hl, de    ; HL = Screen address + DE
	        ex de, hl     ; DE = Screen address

	        ex af, af'

	        cp 80h    ; Is it an UDG or a ?
	        jp c, __SRCADDR

	        cp 90h
	        jp nc, __PRINT_UDG

	        ; Print a 8 bit pattern (80h to 8Fh)

	        ld b, a
	        call PO_GR_1 ; This ROM routine will generate the bit pattern at MEM0
	        ld hl, MEM0
	        jp __PRGRAPH

	PO_GR_1 EQU 0B38h

__PRINT_UDG:
	        sub 90h ; Sub ASC code
	        ld bc, (UDG)
	        jp __PRGRAPH0

	__SOURCEADDR EQU (__SRCADDR + 1)    ; Address of the pointer to chars source
__SRCADDR:
	        ld bc, (CHARS)

__PRGRAPH0:
        add a, a   ; A = a * 2 (since a < 80h) ; Thanks to Metalbrain at http://foro.speccy.org
	        ld l, a
	        ld h, 0    ; HL = a * 2 (accumulator)
	        add hl, hl
	        add hl, hl ; HL = a * 8
	        add hl, bc ; HL = CHARS address

__PRGRAPH:
	        ex de, hl  ; HL = Write Address, DE = CHARS address
	        bit 2, (iy + $47)
	        call nz, __BOLD
	        bit 4, (iy + $47)
	        call nz, __ITALIC
	        ld b, 8 ; 8 bytes per char
__PRCHAR:
	        ld a, (de) ; DE *must* be ALWAYS source, and HL destiny

PRINT_MODE:     ; Which operation is used to write on the screen
                ; Set it with:
	                ; LD A, <OPERATION>
	                ; LD (PRINT_MODE), A
	                ;
                ; Available opertions:
                ; NORMAL : 0h  --> NOP         ; OVER 0
                ; XOR    : AEh --> XOR (HL)    ; OVER 1
                ; OR     : B6h --> OR (HL)     ; PUTSPRITE
                ; AND    : A6h --> AND (HL)    ; PUTMASK
	        nop     ;

INVERSE_MODE:   ; 00 -> NOP -> INVERSE 0
	        nop     ; 2F -> CPL -> INVERSE 1

	        ld (hl), a

	        inc de
	        inc h     ; Next line
	        djnz __PRCHAR

	        call __LOAD_S_POSN
	        push de
	        call __SET_ATTR
	        pop de
	        inc e            ; COL = COL + 1
	        ld hl, (MAXX)
	        ld a, e
	        dec l            ; l = MAXX
	        cp l            ; Lower than max?
	        jp c, __PRINT_CONT; Nothing to do
	        call __PRINT_EOL1
	        exx            ; counteracts __PRINT_EOL1 exx
	        jp __PRINT_CONT2

__PRINT_CONT:
	        call __SAVE_S_POSN

__PRINT_CONT2:
	        exx
	        ret

	; ------------- SPECIAL CHARS (< 32) -----------------

__PRINT_SPECIAL:    ; Jumps here if it is a special char
	        exx
	        ld hl, __PRINT_TABLE
	        jp JUMP_HL_PLUS_2A


PRINT_EOL:        ; Called WHENEVER there is no ";" at end of PRINT sentence
	        exx

__PRINT_0Dh:        ; Called WHEN printing CHR$(13)

	        call __SCROLL
#line 210 "C:/zxbasic/library-asm/print.asm"
	        call __LOAD_S_POSN

__PRINT_EOL1:        ; Another entry called from PRINT when next line required
	        ld e, 0

__PRINT_EOL2:
	        ld a, d
	        inc a

__PRINT_AT1_END:
	        ld hl, (MAXY)
	        cp l
	        jr c, __PRINT_EOL_END    ; Carry if (MAXY) < d

	        ld hl, __TVFLAGS
	        set 1, (hl)
	        ld a, d
#line 230 "C:/zxbasic/library-asm/print.asm"

__PRINT_EOL_END:
	        ld d, a

__PRINT_AT2_END:
	        call __SAVE_S_POSN
	        exx
	        ret

__PRINT_COM:
	        exx
	        push hl
	        push de
	        push bc
	        call PRINT_COMMA
	        pop bc
	        pop de
	        pop hl
	        ret

__PRINT_TAB:
	        ld hl, __PRINT_TAB1
	        jp __PRINT_SET_STATE

__PRINT_TAB1:
	        ld (MEM0), a
	        ld hl, __PRINT_TAB2
	        ld (PRINT_JUMP_STATE), hl
	        ret

__PRINT_TAB2:
	        ld a, (MEM0)        ; Load tab code (ignore the current one)
	        push hl
	        push de
	        push bc
	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl
	        call PRINT_TAB
	        pop bc
	        pop de
	        pop hl
	        ret

__PRINT_NOP:
__PRINT_RESTART:
	        ld hl, __PRINT_START
	        jp __PRINT_SET_STATE

__PRINT_AT:
	        ld hl, __PRINT_AT1

__PRINT_SET_STATE:
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        exx
	        ret

__PRINT_AT1:    ; Jumps here if waiting for 1st parameter
	        exx
	        ld hl, __PRINT_AT2
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        call __LOAD_S_POSN
	        jp __PRINT_AT1_END

__PRINT_AT2:
	        exx
	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        call __LOAD_S_POSN
	        ld e, a
	        ld hl, (MAXX)
	        cp (hl)
	        jr c, __PRINT_AT2_END
	        jr __PRINT_EOL1

__PRINT_DEL:
	        call __LOAD_S_POSN        ; Gets current screen position
	        dec e
	        ld a, -1
	        cp e
	        jp nz, __PRINT_AT2_END
	        ld hl, (MAXX)
	        ld e, l
	        dec e
	        dec e
	        dec d
	        cp d
	        jp nz, __PRINT_AT2_END
	        ld d, h
	        dec d
	        jp __PRINT_AT2_END

__PRINT_INK:
	        ld hl, __PRINT_INK2
	        jp __PRINT_SET_STATE

__PRINT_INK2:
	        exx
	        call INK_TMP
	        jp __PRINT_RESTART

__PRINT_PAP:
	        ld hl, __PRINT_PAP2
	        jp __PRINT_SET_STATE

__PRINT_PAP2:
	        exx
	        call PAPER_TMP
	        jp __PRINT_RESTART

__PRINT_FLA:
	        ld hl, __PRINT_FLA2
	        jp __PRINT_SET_STATE

__PRINT_FLA2:
	        exx
	        call FLASH_TMP
	        jp __PRINT_RESTART

__PRINT_BRI:
	        ld hl, __PRINT_BRI2
	        jp __PRINT_SET_STATE

__PRINT_BRI2:
	        exx
	        call BRIGHT_TMP
	        jp __PRINT_RESTART

__PRINT_INV:
	        ld hl, __PRINT_INV2
	        jp __PRINT_SET_STATE

__PRINT_INV2:
	        exx
	        call INVERSE_TMP
	        jp __PRINT_RESTART

__PRINT_OVR:
	        ld hl, __PRINT_OVR2
	        jp __PRINT_SET_STATE

__PRINT_OVR2:
	        exx
	        call OVER_TMP
	        jp __PRINT_RESTART

__PRINT_BOLD:
	        ld hl, __PRINT_BOLD2
	        jp __PRINT_SET_STATE

__PRINT_BOLD2:
	        exx
	        call BOLD_TMP
	        jp __PRINT_RESTART

__PRINT_ITA:
	        ld hl, __PRINT_ITA2
	        jp __PRINT_SET_STATE

__PRINT_ITA2:
	        exx
	        call ITALIC_TMP
	        jp __PRINT_RESTART


__BOLD:
	        push hl
	        ld hl, MEM0
	        ld b, 8
__BOLD_LOOP:
	        ld a, (de)
	        ld c, a
	        rlca
	        or c
	        ld (hl), a
	        inc hl
	        inc de
	        djnz __BOLD_LOOP
	        pop hl
	        ld de, MEM0
	        ret


__ITALIC:
	        push hl
	        ld hl, MEM0
	        ex de, hl
	        ld bc, 8
	        ldir
	        ld hl, MEM0
	        srl (hl)
	        inc hl
	        srl (hl)
	        inc hl
	        srl (hl)
	        inc hl
	        inc hl
	        inc hl
	        sla (hl)
	        inc hl
	        sla (hl)
	        inc hl
	        sla (hl)
	        pop hl
	        ld de, MEM0
	        ret

PRINT_COMMA:
	        call __LOAD_S_POSN
	        ld a, e
	        and 16
	        add a, 16

PRINT_TAB:
	        PROC
	        LOCAL LOOP, CONTINUE

	        inc a
	        call __LOAD_S_POSN ; e = current row
	        ld d, a
	        ld a, e
	        cp 21h
	        jr nz, CONTINUE
	        ld e, -1
CONTINUE:
	        ld a, d
	        inc e
	        sub e  ; A = A - E
	        and 31 ;
	        ret z  ; Already at position E
	        ld b, a
LOOP:
	        ld a, ' '
	        call __PRINTCHAR
	        djnz LOOP
	        ret
	        ENDP

PRINT_AT: ; Changes cursor to ROW, COL
	         ; COL in A register
	         ; ROW in stack

	        pop hl    ; Ret address
	        ex (sp), hl ; callee H = ROW
	        ld l, a
	        ex de, hl

	        call __IN_SCREEN
	        ret nc    ; Return if out of screen

	        ld hl, __TVFLAGS
	        res 1, (hl)
#line 482 "C:/zxbasic/library-asm/print.asm"
	        jp __SAVE_S_POSN

	        LOCAL __PRINT_COM
	        LOCAL __BOLD
	        LOCAL __BOLD_LOOP
	        LOCAL __ITALIC
	        LOCAL __PRINT_EOL1
	        LOCAL __PRINT_EOL2
	        LOCAL __PRINT_AT1
	        LOCAL __PRINT_AT2
	        LOCAL __PRINT_AT2_END
	        LOCAL __PRINT_BOLD
	        LOCAL __PRINT_BOLD2
	        LOCAL __PRINT_ITA
	        LOCAL __PRINT_ITA2
	        LOCAL __PRINT_INK
	        LOCAL __PRINT_PAP
	        LOCAL __PRINT_SET_STATE
	        LOCAL __PRINT_TABLE
	        LOCAL __PRINT_TAB, __PRINT_TAB1, __PRINT_TAB2

__PRINT_TABLE:    ; Jump table for 0 .. 22 codes

	        DW __PRINT_NOP    ;  0
	        DW __PRINT_NOP    ;  1
	        DW __PRINT_NOP    ;  2
	        DW __PRINT_NOP    ;  3
	        DW __PRINT_NOP    ;  4
	        DW __PRINT_NOP    ;  5
	        DW __PRINT_COM    ;  6 COMMA
	        DW __PRINT_NOP    ;  7
	        DW __PRINT_DEL    ;  8 DEL
	        DW __PRINT_NOP    ;  9
	        DW __PRINT_NOP    ; 10
	        DW __PRINT_NOP    ; 11
	        DW __PRINT_NOP    ; 12
	        DW __PRINT_0Dh    ; 13
	        DW __PRINT_BOLD   ; 14
	        DW __PRINT_ITA    ; 15
	        DW __PRINT_INK    ; 16
	        DW __PRINT_PAP    ; 17
	        DW __PRINT_FLA    ; 18
	        DW __PRINT_BRI    ; 19
	        DW __PRINT_INV    ; 20
	        DW __PRINT_OVR    ; 21
	        DW __PRINT_AT     ; 22 AT
	        DW __PRINT_TAB    ; 23 TAB

	        ENDP


#line 3 "copy_attr.asm"
#line 4 "C:/zxbasic/library-asm/copy_attr.asm"



COPY_ATTR:
		; Just copies current permanent attribs to temporal attribs
		; and sets print mode
		PROC

		LOCAL INVERSE1
		LOCAL __REFRESH_TMP

	INVERSE1 EQU 02Fh

		ld hl, (ATTR_P)
		ld (ATTR_T), hl

		ld hl, FLAGS2
		call __REFRESH_TMP

		ld hl, P_FLAG
		call __REFRESH_TMP


__SET_ATTR_MODE:		; Another entry to set print modes. A contains (P_FLAG)


		LOCAL TABLE
		LOCAL CONT2

		rra					; Over bit to carry
		ld a, (FLAGS2)
		rla					; Over bit in bit 1, Over2 bit in bit 2
		and 3				; Only bit 0 and 1 (OVER flag)

		ld c, a
		ld b, 0

		ld hl, TABLE
		add hl, bc
		ld a, (hl)
		ld (PRINT_MODE), a

		ld hl, (P_FLAG)
		xor a			; NOP -> INVERSE0
		bit 2, l
		jr z, CONT2
		ld a, INVERSE1 	; CPL -> INVERSE1

CONT2:
		ld (INVERSE_MODE), a
		ret

TABLE:
		nop				; NORMAL MODE
		xor (hl)		; OVER 1 MODE
		and (hl)		; OVER 2 MODE
		or  (hl)		; OVER 3 MODE

#line 65 "C:/zxbasic/library-asm/copy_attr.asm"

__REFRESH_TMP:
		ld a, (hl)
		and 10101010b
		ld c, a
		rra
		or c
		ld (hl), a
		ret

		ENDP

#line 14347 "Program.zxbas"
#line 1 "div32.asm"

#line 1 "neg32.asm"

__ABS32:
		bit 7, d
		ret z

__NEG32: ; Negates DEHL (Two's complement)
		ld a, l
		cpl
		ld l, a

		ld a, h
		cpl
		ld h, a

		ld a, e
		cpl
		ld e, a

		ld a, d
		cpl
		ld d, a

		inc l
		ret nz

		inc h
		ret nz

		inc de
		ret

#line 2 "div32.asm"

				 ; ---------------------------------------------------------
__DIVU32:    ; 32 bit unsigned division
	             ; DEHL = Dividend, Stack Top = Divisor
	             ; OPERANDS P = Dividend, Q = Divisor => OPERATION => P / Q
				 ;
				 ; Changes A, BC DE HL B'C' D'E' H'L'
				 ; ---------------------------------------------------------
	        exx
	        pop hl   ; return address
	        pop de   ; low part
	        ex (sp), hl ; CALLEE Convention ; H'L'D'E' => Dividend

__DIVU32START: ; Performs D'E'H'L' / HLDE
	        ; Now switch to DIVIDEND = B'C'BC / DIVISOR = D'E'DE (A / B)
	        push de ; push Lowpart(Q)
			ex de, hl	; DE = HL
	        ld hl, 0
	        exx
	        ld b, h
	        ld c, l
	        pop hl
	        push de
	        ex de, hl
	        ld hl, 0        ; H'L'HL = 0
	        exx
	        pop bc          ; Pop HightPart(B) => B = B'C'BC
	        exx

	        ld a, 32 ; Loop count

__DIV32LOOP:
	        sll c  ; B'C'BC << 1 ; Output most left bit to carry
	        rl  b
	        exx
	        rl c
	        rl b
	        exx

	        adc hl, hl
	        exx
	        adc hl, hl
	        exx

	        sbc hl,de
	        exx
	        sbc hl,de
	        exx
	        jp nc, __DIV32NOADD	; use JP inside a loop for being faster

	        add hl, de
	        exx
	        adc hl, de
	        exx
	        dec bc

__DIV32NOADD:
	        dec a
	        jp nz, __DIV32LOOP	; use JP inside a loop for being faster
	        ; At this point, quotient is stored in B'C'BC and the reminder in H'L'HL

	        push hl
	        exx
	        pop de
	        ex de, hl ; D'E'H'L' = 32 bits modulus
	        push bc
	        exx
	        pop de    ; DE = B'C'
	        ld h, b
	        ld l, c   ; DEHL = quotient D'E'H'L' = Modulus

	        ret     ; DEHL = quotient, D'E'H'L' = Modulus



__MODU32:    ; 32 bit modulus for 32bit unsigned division
	             ; DEHL = Dividend, Stack Top = Divisor (DE, HL)

	        exx
	        pop hl   ; return address
	        pop de   ; low part
	        ex (sp), hl ; CALLEE Convention ; H'L'D'E' => Dividend

	        call __DIVU32START	; At return, modulus is at D'E'H'L'

__MODU32START:

			exx
			push de
			push hl

			exx
			pop hl
			pop de

			ret


__DIVI32:    ; 32 bit signed division
	             ; DEHL = Dividend, Stack Top = Divisor
	             ; A = Dividend, B = Divisor => A / B
	        exx
	        pop hl   ; return address
	        pop de   ; low part
	        ex (sp), hl ; CALLEE Convention ; H'L'D'E' => Dividend

__DIVI32START:
			exx
			ld a, d	 ; Save sign
			ex af, af'
			bit 7, d ; Negative?
			call nz, __NEG32 ; Negates DEHL

			exx		; Now works with H'L'D'E'
			ex af, af'
			xor h
			ex af, af'  ; Stores sign of the result for later

			bit 7, h ; Negative?
			ex de, hl ; HLDE = DEHL
			call nz, __NEG32
			ex de, hl

			call __DIVU32START
			ex af, af' ; Recovers sign
			and 128	   ; positive?
			ret z

			jp __NEG32 ; Negates DEHL and returns from there


__MODI32:	; 32bits signed division modulus
			exx
	        pop hl   ; return address
	        pop de   ; low part
	        ex (sp), hl ; CALLEE Convention ; H'L'D'E' => Dividend

			call __DIVI32START
			jp __MODU32START

#line 14348 "Program.zxbas"
#line 1 "div8.asm"

				; --------------------------------
__DIVU8:	; 8 bit unsigned integer division
				; Divides (Top of stack, High Byte) / A
		pop hl	; --------------------------------
		ex (sp), hl	; CALLEE

__DIVU8_FAST:	; Does A / H
		ld l, h
		ld h, a		; At this point do H / L

		ld b, 8
		xor a		; A = 0, Carry Flag = 0

__DIV8LOOP:
		sla	h
		rla
		cp	l
		jr	c, __DIV8NOSUB
		sub	l
		inc	h

__DIV8NOSUB:
		djnz __DIV8LOOP

		ld	l, a		; save remainder
		ld	a, h		;

		ret			; a = Quotient,


					; --------------------------------
__DIVI8:		; 8 bit signed integer division Divides (Top of stack) / A
		pop hl		; --------------------------------
		ex (sp), hl

__DIVI8_FAST:
		ld e, a		; store operands for later
		ld c, h

		or a		; negative?
		jp p, __DIV8A
		neg			; Make it positive

__DIV8A:
		ex af, af'
		ld a, h
		or a
		jp p, __DIV8B
		neg
		ld h, a		; make it positive

__DIV8B:
		ex af, af'

		call __DIVU8_FAST

		ld a, c
		xor l		; bit 7 of A = 1 if result is negative

		ld a, h		; Quotient
		ret p		; return if positive

		neg
		ret


__MODU8:		; 8 bit module. REturns A mod (Top of stack) (unsigned operands)
		pop hl
		ex (sp), hl	; CALLEE

__MODU8_FAST:	; __FASTCALL__ entry
		call __DIVU8_FAST
		ld a, l		; Remainder

		ret		; a = Modulus


__MODI8:		; 8 bit module. REturns A mod (Top of stack) (For singed operands)
		pop hl
		ex (sp), hl	; CALLEE

__MODI8_FAST:	; __FASTCALL__ entry
		call __DIVI8_FAST
		ld a, l		; remainder

		ret		; a = Modulus

#line 14349 "Program.zxbas"
#line 1 "eq16.asm"

__EQ16:	; Test if 16bit values HL == DE
		; Returns result in A: 0 = False, FF = True
			xor a	; Reset carry flag
			sbc hl, de
			ret nz
			inc a
			ret

#line 14350 "Program.zxbas"

#line 1 "ftou32reg.asm"



__FTOU32REG:	; Converts a Float to (un)signed 32 bit integer (NOTE: It's ALWAYS 32 bit signed)
					; Input FP number in A EDCB (A exponent, EDCB mantissa)
				; Output: DEHL 32 bit number (signed)
		PROC

		LOCAL __IS_FLOAT
		LOCAL __NEGATE

		or a
		jr nz, __IS_FLOAT
		; Here if it is a ZX ROM Integer

		ld h, c
		ld l, d
	ld a, e	 ; Takes sign: FF = -, 0 = +
		ld de, 0
		inc a
		jp z, __NEG32	; Negates if negative
		ret

__IS_FLOAT:  ; Jumps here if it is a true floating point number
		ld h, e
		push hl  ; Stores it for later (Contains Sign in H)

		push de
		push bc

		exx
		pop de   ; Loads mantissa into C'B' E'D'
		pop bc	 ;

		set 7, c ; Highest mantissa bit is always 1
		exx

		ld hl, 0 ; DEHL = 0
		ld d, h
		ld e, l

		;ld a, c  ; Get exponent
		sub 128  ; Exponent -= 128
		jr z, __FTOU32REG_END	; If it was <= 128, we are done (Integers must be > 128)
		jr c, __FTOU32REG_END	; It was decimal (0.xxx). We are done (return 0)

		ld b, a  ; Loop counter = exponent - 128

__FTOU32REG_LOOP:
		exx 	 ; Shift C'B' E'D' << 1, output bit stays in Carry
		sla d
		rl e
		rl b
		rl c

	    exx		 ; Shift DEHL << 1, inserting the carry on the right
		rl l
		rl h
		rl e
		rl d

		djnz __FTOU32REG_LOOP

__FTOU32REG_END:
		pop af   ; Take the sign bit
		or a	 ; Sets SGN bit to 1 if negative
		jp m, __NEGATE ; Negates DEHL

		ret

__NEGATE:
	    exx
	    ld a, d
	    or e
	    or b
	    or c
	    exx
	    jr z, __END
	    inc l
	    jr nz, __END
	    inc h
	    jr nz, __END
	    inc de
	LOCAL __END
__END:
	    jp __NEG32
		ENDP


__FTOU8:	; Converts float in C ED LH to Unsigned byte in A
		call __FTOU32REG
		ld a, l
		ret

#line 14352 "Program.zxbas"
#line 1 "gtf.asm"

#line 1 "u32tofreg.asm"


__I8TOFREG:
		ld l, a
		rlca
		sbc a, a	; A = SGN(A)
		ld h, a
		ld e, a
		ld d, a

__I32TOFREG:	; Converts a 32bit signed integer (stored in DEHL)
					; to a Floating Point Number returned in (A ED CB)

		ld a, d
		or a		; Test sign

		jp p, __U32TOFREG	; It was positive, proceed as 32bit unsigned

		call __NEG32		; Convert it to positive
		call __U32TOFREG	; Convert it to Floating point

		set 7, e			; Put the sign bit (negative) in the 31bit of mantissa
		ret

__U8TOFREG:
					; Converts an unsigned 8 bit (A) to Floating point
		ld l, a
		ld h, 0
		ld e, h
		ld d, h

__U32TOFREG:	; Converts an unsigned 32 bit integer (DEHL)
					; to a Floating point number returned in A ED CB

	    PROC

	    LOCAL __U32TOFREG_END

		ld a, d
		or e
		or h
		or l
	    ld b, d
		ld c, e		; Returns 00 0000 0000 if ZERO
		ret z

		push de
		push hl

		exx
		pop de  ; Loads integer into B'C' D'E'
		pop bc
		exx

		ld l, 128	; Exponent
		ld bc, 0	; DEBC = 0
		ld d, b
		ld e, c

__U32TOFREG_LOOP: ; Also an entry point for __F16TOFREG
		exx
		ld a, d 	; B'C'D'E' == 0 ?
		or e
		or b
		or c
		jp z, __U32TOFREG_END	; We are done

		srl b ; Shift B'C' D'E' >> 1, output bit stays in Carry
		rr c
		rr d
		rr e
		exx

		rr e ; Shift EDCB >> 1, inserting the carry on the left
		rr d
		rr c
		rr b

		inc l	; Increment exponent
		jp __U32TOFREG_LOOP


__U32TOFREG_END:
		exx
	    ld a, l     ; Puts the exponent in a
		res 7, e	; Sets the sign bit to 0 (positive)

		ret
	    ENDP

#line 2 "gtf.asm"



	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)

	; All of them uses A EDCB registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order A DE BC.
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__GTF:	; A > B
		call __FPSTACK_PUSH2 ; ENTERS B, A

		; ------------- ROM NOS-GRTR
		ld b, 0Dh	; B < A
		rst 28h
		defb 0Dh	; B < A
		defb 38h;   ; END CALC

		call __FPSTACK_POP
		jp __FTOU8; Convert to 8 bits

#line 14353 "Program.zxbas"

#line 1 "inkey.asm"

	; INKEY Function
	; Returns a string allocated in dynamic memory
	; containing the string.
	; An empty string otherwise.



INKEY:
		PROC
		LOCAL __EMPTY_INKEY
		LOCAL KEY_SCAN
		LOCAL KEY_TEST
		LOCAL KEY_CODE

		ld bc, 3	; 1 char length string
		call __MEM_ALLOC

		ld a, h
		or l
		ret z	; Return if NULL (No memory)

		push hl ; Saves memory pointer

		call KEY_SCAN
		jp nz, __EMPTY_INKEY

		call KEY_TEST
		jp nc, __EMPTY_INKEY

		dec d	; D is expected to be FLAGS so set bit 3 $FF
				; 'L' Mode so no keywords.
		ld e, a	; main key to A
				; C is MODE 0 'KLC' from above still.
		call KEY_CODE ; routine K-DECODE
		pop hl

		ld (hl), 1
		inc hl
		ld (hl), 0
		inc hl
		ld (hl), a
		dec hl
		dec hl	; HL Points to string result
		ret

__EMPTY_INKEY:
		pop hl
		xor a
		ld (hl), a
		inc hl
		ld (hl), a
		dec hl
		ret

	KEY_SCAN	EQU 028Eh
	KEY_TEST	EQU 031Eh
	KEY_CODE	EQU 0333h

		ENDP

#line 14355 "Program.zxbas"

#line 1 "lei32.asm"


#line 1 "sub32.asm"

	; SUB32
	; Perform TOP of the stack - DEHL
	; Pops operand out of the stack (CALLEE)
	; and returns result in DEHL. Carry an Z are set correctly

__SUB32:
		exx
		pop bc		; saves return address in BC'
		exx

		or a        ; clears carry flag
		ld b, h     ; Operands come reversed => BC <- HL,  HL = HL - BC
		ld c, l
		pop hl
		sbc hl, bc
		ex de, hl

		ld b, h	    ; High part (DE) now in HL. Repeat operation
		ld c, l
		pop hl
		sbc hl, bc
		ex de, hl   ; DEHL now has de 32 bit result

		exx
		push bc		; puts return address back
		exx
		ret
#line 3 "lei32.asm"

__LEI32: ; Test 32 bit values Top of the stack <= HL,DE
	    PROC
	    LOCAL checkParity
	    exx
	    pop de ; Preserves return address
	    exx

	    call __SUB32

	    exx
	    push de ; Puts return address back
	    exx

	    ex af, af'
	    ld a, h
	    or l
	    or e
	    or d
	    ld a, 1
	    ret z

	    ex af, af'
	    jp po, checkParity
	    ld a, d
	    xor 0x80
checkParity:
	    ld a, 0     ; False
	    ret p
	    inc a       ; True
	    ret
	    ENDP
#line 14357 "Program.zxbas"
#line 1 "lei8.asm"

__LEI8: ; Signed <= comparison for 8bit int
	        ; A <= H (registers)
	    PROC
	    LOCAL checkParity
	    sub h
	    jr nz, __LTI
	    inc a
	    ret

__LTI8:  ; Test 8 bit values A < H
	    sub h

__LTI:   ; Generic signed comparison
	    jp po, checkParity
	    xor 0x80
checkParity:
	    ld a, 0     ; False
	    ret p
	    inc a       ; True
	    ret
	    ENDP
#line 14358 "Program.zxbas"
#line 1 "loadstr.asm"



	; Loads a string (ptr) from HL
	; and duplicates it on dynamic memory again
	; Finally, it returns result pointer in HL

__ILOADSTR:		; This is the indirect pointer entry HL = (HL)
			ld a, h
			or l
			ret z
			ld a, (hl)
			inc hl
			ld h, (hl)
			ld l, a

__LOADSTR:		; __FASTCALL__ entry
			ld a, h
			or l
			ret z	; Return if NULL

			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl  ; BC = LEN(a$)

			inc bc
			inc bc	; BC = LEN(a$) + 2 (two bytes for length)

			push hl
			push bc
			call __MEM_ALLOC
			pop bc  ; Recover length
			pop de  ; Recover origin

			ld a, h
			or l
			ret z	; Return if NULL (No memory)

			ex de, hl ; ldir takes HL as source, DE as destiny, so SWAP HL,DE
			push de	; Saves destiny start
			ldir	; Copies string (length number included)
			pop hl	; Recovers destiny in hl as result
			ret
#line 14359 "Program.zxbas"
#line 1 "ltf.asm"





	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)

	; All of them uses A EDCB registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order A HL BC.
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__LTF:	; A < B
		call __FPSTACK_PUSH2 ; Enters B, A

		; ------------- ROM NOS-LESS
		ld b, 0Ch	; A > B (Operands stack-reversed)
		rst 28h
		defb 0Ch;	; A > B
		defb 38h;   ; END CALC

		call __FPSTACK_POP
		jp __FTOU8 ; Convert to 8 bits

#line 14360 "Program.zxbas"
#line 1 "lti32.asm"




__LTI32: ; Test 32 bit values in Top of the stack < HLDE
	    PROC
	    LOCAL checkParity
	    exx
	    pop de ; Preserves return address
	    exx

	    call __SUB32

	    exx
	    push de ; Restores return address
	    exx

	    jp po, checkParity
	    ld a, d
	    xor 0x80
checkParity:
	    ld a, 0     ; False
	    ret p
	    inc a       ; True
	    ret
	    ENDP
#line 14361 "Program.zxbas"
#line 1 "lti8.asm"


#line 14362 "Program.zxbas"
#line 1 "mul32.asm"

#line 1 "_mul32.asm"


; Ripped from: http://www.andreadrian.de/oldcpu/z80_number_cruncher.html#moztocid784223
	; Used with permission.
	; Multiplies 32x32 bit integer (DEHL x D'E'H'L')
	; 64bit result is returned in H'L'H L B'C'A C


__MUL32_64START:
			push hl
			exx
			ld b, h
			ld c, l		; BC = Low Part (A)
			pop hl		; HL = Load Part (B)
			ex de, hl	; DE = Low Part (B), HL = HightPart(A) (must be in B'C')
			push hl

			exx
			pop bc		; B'C' = HightPart(A)
			exx			; A = B'C'BC , B = D'E'DE

				; multiply routine 32 * 32bit = 64bit
				; h'l'hlb'c'ac = b'c'bc * d'e'de
				; needs register a, changes flags
				;
				; this routine was with tiny differences in the
				; sinclair zx81 rom for the mantissa multiply

__LMUL:
	        and     a               ; reset carry flag
	        sbc     hl,hl           ; result bits 32..47 = 0
	        exx
	        sbc     hl,hl           ; result bits 48..63 = 0
	        exx
	        ld      a,b             ; mpr is b'c'ac
	        ld      b,33            ; initialize loop counter
	        jp      __LMULSTART

__LMULLOOP:
	        jr      nc,__LMULNOADD  ; JP is 2 cycles faster than JR. Since it's inside a LOOP
	                                ; it can save up to 33 * 2 = 66 cycles
	                                ; But JR if 3 cycles faster if JUMP not taken!
	        add     hl,de           ; result += mpd
	        exx
	        adc     hl,de
	        exx

__LMULNOADD:
	        exx
	        rr      h               ; right shift upper
	        rr      l               ; 32bit of result
	        exx
	        rr      h
	        rr      l

__LMULSTART:
	        exx
	        rr      b               ; right shift mpr/
	        rr      c               ; lower 32bit of result
	        exx
	        rra                     ; equivalent to rr a
	        rr      c
	        djnz    __LMULLOOP

			ret						; result in h'l'hlb'c'ac

#line 2 "mul32.asm"

__MUL32:	; multiplies 32 bit un/signed integer.
				; First operand stored in DEHL, and 2nd onto stack
				; Lowest part of 2nd operand on top of the stack
				; returns the result in DE.HL
			exx
			pop hl	; Return ADDRESS
			pop de	; Low part
			ex (sp), hl ; CALLEE -> HL = High part
			ex de, hl
			call __MUL32_64START

__TO32BIT:  ; Converts H'L'HLB'C'AC to DEHL (Discards H'L'HL)
			exx
			push bc
			exx
			pop de
			ld h, a
			ld l, c
			ret


#line 14363 "Program.zxbas"
#line 1 "mul8.asm"

__MUL8:		; Performs 8bit x 8bit multiplication
		PROC

		;LOCAL __MUL8A
		LOCAL __MUL8LOOP
		LOCAL __MUL8B
				; 1st operand (byte) in A, 2nd operand into the stack (AF)
		pop hl	; return address
		ex (sp), hl ; CALLE convention

;;__MUL8_FAST: ; __FASTCALL__ entry
	;;	ld e, a
	;;	ld d, 0
	;;	ld l, d
	;;
	;;	sla h
	;;	jr nc, __MUL8A
	;;	ld l, e
	;;
;;__MUL8A:
	;;
	;;	ld b, 7
;;__MUL8LOOP:
	;;	add hl, hl
	;;	jr nc, __MUL8B
	;;
	;;	add hl, de
	;;
;;__MUL8B:
	;;	djnz __MUL8LOOP
	;;
	;;	ld a, l ; result = A and HL  (Truncate to lower 8 bits)

__MUL8_FAST: ; __FASTCALL__ entry, a = a * h (8 bit mul) and Carry

	    ld b, 8
	    ld l, a
	    xor a

__MUL8LOOP:
	    add a, a ; a *= 2
	    sla l
	    jp nc, __MUL8B
	    add a, h

__MUL8B:
	    djnz __MUL8LOOP

		ret		; result = HL
		ENDP

#line 14364 "Program.zxbas"
#line 1 "mulf.asm"



	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)
	; All of them uses A EDCB registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order A DE BC.
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__MULF:	; Multiplication
		call __FPSTACK_PUSH2

		; ------------- ROM MUL
		rst 28h
		defb 04h	;
		defb 38h;   ; END CALC

		jp __FPSTACK_POP

#line 14365 "Program.zxbas"
#line 1 "negf.asm"





	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)

	; All of them uses C EDHL registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order BC DE HL (B not used).
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__NEGF:	; A = -A
		call __FPSTACK_PUSH

		; ------------- ROM NEGATE
		rst 28h
		defb 1Bh	; NEGF
		defb 38h;   ; END CALC

		jp __FPSTACK_POP


#line 14366 "Program.zxbas"

#line 1 "pause.asm"

	; The PAUSE statement (Calling the ROM)

__PAUSE:
		ld b, h
	    ld c, l
	    jp 1F3Dh  ; PAUSE_1
#line 14368 "Program.zxbas"
#line 1 "ploadf.asm"

	; Parameter / Local var load
	; A => Offset
	; IX = Stack Frame
; RESULT: HL => IX + DE

#line 1 "iloadf.asm"

	; __FASTCALL__ routine which
	; loads a 40 bits floating point into A ED CB
	; stored at position pointed by POINTER HL
	;A DE, BC <-- ((HL))

__ILOADF:
	    ld a, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, a

	; __FASTCALL__ routine which
	; loads a 40 bits floating point into A ED CB
	; stored at position pointed by POINTER HL
	;A DE, BC <-- (HL)

__LOADF:    ; Loads a 40 bits FP number from address pointed by HL
		ld a, (hl)
		inc hl
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
		ld c, (hl)
		inc hl
		ld b, (hl)
		ret

#line 7 "ploadf.asm"

__PLOADF:
	    push ix
	    pop hl
	    add hl, de
	    jp __LOADF

#line 14369 "Program.zxbas"

#line 1 "print_eol_attr.asm"

	; Calls PRINT_EOL and then COPY_ATTR, so saves
	; 3 bytes




PRINT_EOL_ATTR:
		call PRINT_EOL
		jp COPY_ATTR
#line 14371 "Program.zxbas"
#line 1 "printstr.asm"






	; PRINT command routine
	; Prints string pointed by HL

PRINT_STR:
__PRINTSTR:		; __FASTCALL__ Entry to print_string
			PROC
			LOCAL __PRINT_STR_LOOP
	        LOCAL __PRINT_STR_END

	        ld d, a ; Saves A reg (Flag) for later

			ld a, h
			or l
			ret z	; Return if the pointer is NULL

	        push hl

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl	; BC = LEN(a$); HL = &a$

__PRINT_STR_LOOP:
			ld a, b
			or c
			jr z, __PRINT_STR_END 	; END if BC (counter = 0)

			ld a, (hl)
			call __PRINTCHAR
			inc hl
			dec bc
			jp __PRINT_STR_LOOP

__PRINT_STR_END:
	        pop hl
	        ld a, d ; Recovers A flag
	        or a   ; If not 0 this is a temporary string. Free it
	        ret z
	        jp __MEM_FREE ; Frees str from heap and return from there

__PRINT_STR:
	        ; Fastcall Entry
	        ; It ONLY prints strings
	        ; HL = String start
	        ; BC = String length (Number of chars)
	        push hl ; Push str address for later
	        ld d, a ; Saves a FLAG
	        jp __PRINT_STR_LOOP

			ENDP

#line 14372 "Program.zxbas"
#line 1 "pstoref.asm"

	; Stores FP number in A ED CB at location HL+IX
	; HL = Offset
	; IX = Stack Frame
	; A ED CB = FP Number

#line 1 "storef.asm"

__PISTOREF:	; Indect Stores a float (A, E, D, C, B) at location stored in memory, pointed by (IX + HL)
			push de
			ex de, hl	; DE <- HL
			push ix
			pop hl		; HL <- IX
			add hl, de  ; HL <- IX + HL
			pop de

__ISTOREF:  ; Load address at hl, and stores A,E,D,C,B registers at that address. Modifies A' register
	        ex af, af'
			ld a, (hl)
			inc hl
			ld h, (hl)
			ld l, a     ; HL = (HL)
	        ex af, af'

__STOREF:	; Stores the given FP number in A EDCB at address HL
			ld (hl), a
			inc hl
			ld (hl), e
			inc hl
			ld (hl), d
			inc hl
			ld (hl), c
			inc hl
			ld (hl), b
			ret

#line 7 "pstoref.asm"

	; Stored a float number in A ED CB into the address pointed by IX + HL
__PSTOREF:
		push de
	    ex de, hl  ; DE <- HL
	    push ix
		pop hl	   ; HL <- IX
	    add hl, de ; HL <- IX + DE
		pop de
	    jp __STOREF

#line 14373 "Program.zxbas"
#line 1 "pstorestr.asm"

; vim:ts=4:et:sw=4
	;
	; Stores an string (pointer to the HEAP by DE) into the address pointed
	; by (IX + BC). A new copy of the string is created into the HEAP
	;

#line 1 "storestr.asm"

; vim:ts=4:et:sw=4
	; Stores value of current string pointed by DE register into address pointed by HL
	; Returns DE = Address pointer  (&a$)
	; Returns HL = HL               (b$ => might be needed later to free it from the heap)
	;
	; e.g. => HL = _variableName    (DIM _variableName$)
	;         DE = Address into the HEAP
	;
	; This function will resize (REALLOC) the space pointed by HL
	; before copying the content of b$ into a$


#line 1 "strcpy.asm"

#line 1 "realloc.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.







	; ---------------------------------------------------------------------
	; MEM_REALLOC
	;  Reallocates a block of memory in the heap.
	;
	; Parameters
	;  HL = Pointer to the original block
	;  BC = New Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	;
; Notes:
	;  If BC = 0, the block is freed, otherwise
	;  the content of the original block is copied to the new one, and
	;  the new size is adjusted. If BC < original length, the content
	;  will be truncated. Otherwise, extra block content might contain
	;  memory garbage.
	;
	; ---------------------------------------------------------------------
__REALLOC:    ; Reallocates block pointed by HL, with new length BC
	        PROC

	        LOCAL __REALLOC_END

	        ld a, h
	        or l
	        jp z, __MEM_ALLOC    ; If HL == NULL, just do a malloc

	        ld e, (hl)
	        inc hl
	        ld d, (hl)    ; DE = First 2 bytes of HL block

	        push hl
	        exx
	        pop de
	        inc de        ; DE' <- HL + 2
	        exx            ; DE' <- HL (Saves current pointer into DE')

	        dec hl        ; HL = Block start

	        push de
	        push bc
	        call __MEM_FREE        ; Frees current block
	        pop bc
	        push bc
	        call __MEM_ALLOC    ; Gets a new block of length BC
	        pop bc
	        pop de

	        ld a, h
	        or l
	        ret z        ; Return if HL == NULL (No memory)

	        ld (hl), e
	        inc hl
	        ld (hl), d
	        inc hl        ; Recovers first 2 bytes in HL

	        dec bc
	        dec bc        ; BC = BC - 2 (Two bytes copied)

	        ld a, b
	        or c
	        jp z, __REALLOC_END        ; Ret if nothing to copy (BC == 0)

	        exx
	        push de
	        exx
	        pop de        ; DE <- DE' ; Start of remaining block

	        push hl        ; Saves current Block + 2 start
        ex de, hl    ; Exchanges them: DE is destiny block
	        ldir        ; Copies BC Bytes
	        pop hl        ; Recovers Block + 2 start

__REALLOC_END:

	        dec hl        ; Set HL
	        dec hl        ; To begin of block
	        ret

	        ENDP

#line 2 "strcpy.asm"

	; String library


__STRASSIGN: ; Performs a$ = b$ (HL = address of a$; DE = Address of b$)
			PROC

			LOCAL __STRREALLOC
			LOCAL __STRCONTINUE
			LOCAL __B_IS_NULL
			LOCAL __NOTHING_TO_COPY

			ld b, d
			ld c, e
			ld a, b
			or c
			jr z, __B_IS_NULL

			ex de, hl
			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl		; BC = LEN(b$)
			ex de, hl	; DE = &b$

__B_IS_NULL:		; Jumps here if B$ pointer is NULL
			inc bc
			inc bc		; BC = BC + 2  ; (LEN(b$) + 2 bytes for storing length)

			push de
			push hl

			ld a, h
			or l
			jr z, __STRREALLOC

			dec hl
			ld d, (hl)
			dec hl
			ld e, (hl)	; DE = MEMBLOCKSIZE(a$)
			dec de
			dec de		; DE = DE - 2  ; (Membloksize takes 2 bytes for memblock length)

			ld h, b
			ld l, c		; HL = LEN(b$) + 2  => Minimum block size required
			ex de, hl	; Now HL = BLOCKSIZE(a$), DE = LEN(b$) + 2

			or a		; Prepare to subtract BLOCKSIZE(a$) - LEN(b$)
			sbc hl, de  ; Carry if len(b$) > Blocklen(a$)
			jr c, __STRREALLOC ; No need to realloc
			; Need to reallocate at least to len(b$) + 2
			ex de, hl	; DE = Remaining bytes in a$ mem block.
			ld hl, 4
			sbc hl, de  ; if remaining bytes < 4 we can continue
			jr nc,__STRCONTINUE ; Otherwise, we realloc, to free some bytes

__STRREALLOC:
			pop hl
			call __REALLOC	; Returns in HL a new pointer with BC bytes allocated
			push hl

__STRCONTINUE:	;   Pops hl and de SWAPPED
			pop de	;	DE = &a$
			pop hl	; 	HL = &b$

			ld a, d		; Return if not enough memory for new length
			or e
			ret z		; Return if DE == NULL (0)

__STRCPY:	; Copies string pointed by HL into string pointed by DE
				; Returns DE as HL (new pointer)
			ld a, h
			or l
			jr z, __NOTHING_TO_COPY
			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl
			inc bc
			inc bc
			push de
			ldir
			pop hl
			ret

__NOTHING_TO_COPY:
			ex de, hl
			ld (hl), e
			inc hl
			ld (hl), d
			dec hl
			ret

			ENDP

#line 14 "storestr.asm"

__PISTORE_STR:          ; Indirect assignement at (IX + BC)
	    push ix
	    pop hl
	    add hl, bc

__ISTORE_STR:           ; Indirect assignement, hl point to a pointer to a pointer to the heap!
	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c             ; HL = (HL)

__STORE_STR:
	    push de             ; Pointer to b$
	    push hl             ; Array pointer to variable memory address

	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c             ; HL = (HL)

	    call __STRASSIGN    ; HL (a$) = DE (b$); HL changed to a new dynamic memory allocation
	    ex de, hl           ; DE = new address of a$
	    pop hl              ; Recover variable memory address pointer

	    ld (hl), e
	    inc hl
	    ld (hl), d          ; Stores a$ ptr into elemem ptr

	    pop hl              ; Returns ptr to b$ in HL (Caller might needed to free it from memory)
	    ret

#line 8 "pstorestr.asm"

__PSTORE_STR:
	    push ix
	    pop hl
	    add hl, bc
	    jp __STORE_STR

#line 14374 "Program.zxbas"
#line 1 "pstorestr2.asm"

; vim:ts=4:et:sw=4
	;
	; Stores an string (pointer to the HEAP by DE) into the address pointed
	; by (IX + BC). No new copy of the string is created into the HEAP, since
	; it's supposed it's already created (temporary string)
	;

#line 1 "storestr2.asm"

	; Similar to __STORE_STR, but this one is called when
	; the value of B$ if already duplicated onto the stack.
	; So we needn't call STRASSING to create a duplication
	; HL = address of string memory variable
	; DE = address of 2n string. It just copies DE into (HL)
	; 	freeing (HL) previously.



__PISTORE_STR2: ; Indirect store temporary string at (IX + BC)
	    push ix
	    pop hl
	    add hl, bc

__ISTORE_STR2:
		ld c, (hl)  ; Dereferences HL
		inc hl
		ld h, (hl)
		ld l, c		; HL = *HL (real string variable address)

__STORE_STR2:
		push hl
		ld c, (hl)
		inc hl
		ld h, (hl)
		ld l, c		; HL = *HL (real string address)

		push de
		call __MEM_FREE
		pop de

		pop hl
		ld (hl), e
		inc hl
		ld (hl), d
		dec hl		; HL points to mem address variable. This might be useful in the future.

		ret

#line 9 "pstorestr2.asm"

__PSTORE_STR2:
	    push ix
	    pop hl
	    add hl, bc
	    jp __STORE_STR2

#line 14375 "Program.zxbas"
#line 1 "random.asm"

	; RANDOM functions

RANDOMIZE:
	    ; Randomize with 32 bit seed in DE HL
	    ; if SEED = 0, calls ROM to take frames as seed
	    PROC

	    LOCAL TAKE_FRAMES
	    LOCAL FRAMES

	    ld a, h
	    or l
	    or d
	    or e
	    jr z, TAKE_FRAMES

	    ld (RANDOM_SEED_LOW), hl
	    ld (RANDOM_SEED_HIGH), de
	    ret

TAKE_FRAMES:
	    ; Takes the seed from frames
	    ld hl, (FRAMES)
	    ld (RANDOM_SEED_LOW), hl
	    ld hl, (FRAMES + 2)
	    ld (RANDOM_SEED_HIGH), hl
	    ret

	FRAMES EQU    23672
	    ENDP

	RANDOM_SEED_HIGH EQU RAND+6    ; RANDOM seed, 16 higher bits
	RANDOM_SEED_LOW     EQU 23670  ; RANDOM seed, 16 lower bits


RAND:
	    PROC
	    LOCAL RAND_LOOP
	    ld b, 4
RAND_LOOP:
	    ld  hl,(RANDOM_SEED_LOW)   ; xz -> yw
	    ld  de,0C0DEh   ; yw -> zt
	    ld  (RANDOM_SEED_LOW),de  ; x = y, z = w
	    ld  a,e         ; w = w ^ ( w << 3 )
	    add a,a
	    add a,a
	    add a,a
	    xor e
	    ld  e,a
	    ld  a,h         ; t = x ^ (x << 1)
	    add a,a
	    xor h
	    ld  d,a
	    rra             ; t = t ^ (t >> 1) ^ w
	    xor d
	    xor e
	    ld  h,l         ; y = z
	    ld  l,a         ; w = t
	    ld  (RANDOM_SEED_HIGH),hl
	    push af
	    djnz RAND_LOOP
	    pop af
	    pop af
	    ld d, a
	    pop af
	    ld e, a
	    pop af
	    ld h, a
	    ret
	    ENDP

RND:
	    ; Returns a FLOATING point integer
	    ; using RAND as a mantissa
	    PROC
	    LOCAL RND_LOOP

	    call RAND
	    ; BC = HL since ZX BASIC uses ED CB A registers for FP
	    ld b, h
	    ld c, l

	    ld a, e
	    or d
	    or c
	    or b
	    ret z   ; Returns 0 if BC=DE=0

	    ; We already have a random 32 bit mantissa in ED CB
	    ; From 0001h to FFFFh

	    ld l, 81h	; Exponent
	    ; At this point we have [0 .. 1) FP number;

	    ; Now we must shift mantissa left until highest bit goes into carry
	    ld a, e ; Use A register for rotating E faster (using RLA instead of RL E)
RND_LOOP:
	    dec l
	    sla b
	    rl c
	    rl d
	    rla
	    jp nc, RND_LOOP

	    ; Now undo last mantissa left-shift once
	    ccf ; Clears carry to insert a 0 bit back into mantissa -> positive FP number
	    rra
	    rr d
	    rr c
	    rr b

	    ld e, a     ; E must have the highest byte
	    ld a, l     ; exponent in A
	    ret

	    ENDP

#line 14376 "Program.zxbas"
#line 1 "str.asm"

	; The STR$( ) BASIC function implementation

	; Given a FP number in C ED LH
	; Returns a pointer (in HL) to the memory heap
	; containing the FP number string representation





__STR:

__STR_FAST:

		PROC
		LOCAL __STR_END
		LOCAL RECLAIM2
		LOCAL STK_END

		ld hl, (STK_END)
		push hl; Stores STK_END
		ld hl, (ATTR_T)	; Saves ATTR_T since it's changed by STR$ due to a ROM BUG
		push hl

	    call __FPSTACK_PUSH ; Push number into stack
		rst 28h		; # Rom Calculator
		defb 2Eh	; # STR$(x)
		defb 38h	; # END CALC
		call __FPSTACK_POP ; Recovers string parameters to A ED CB (Only ED LH are important)

		pop hl
		ld (ATTR_T), hl	; Restores ATTR_T
		pop hl
		ld (STK_END), hl	; Balance STK_END to avoid STR$ bug

		push bc
		push de

		inc bc
		inc bc
		call __MEM_ALLOC ; HL Points to new block

		pop de
		pop bc

		push hl
		ld a, h
		or l
		jr z, __STR_END  ; Return if NO MEMORY (NULL)

		push bc
		push de
		ld (hl), c
		inc hl
		ld (hl), b
		inc hl		; Copies length

		ex de, hl	; HL = start of original string
		ldir		; Copies string content

		pop de		; Original (ROM-CALC) string
		pop bc		; Original Length

__STR_END:
		ex de, hl
		inc bc

		call RECLAIM2 ; Frees TMP Memory
		pop hl		  ; String result

		ret

	RECLAIM2 EQU 19E8h
	STK_END EQU 5C65h

		ENDP

#line 14377 "Program.zxbas"
#line 1 "strcat.asm"


#line 1 "strlen.asm"

	; Returns len if a string
	; If a string is NULL, its len is also 0
	; Result returned in HL

__STRLEN:	; Direct FASTCALL entry
			ld a, h
			or l
			ret z

			ld a, (hl)
			inc hl
			ld h, (hl)  ; LEN(str) in HL
			ld l, a
			ret


#line 3 "strcat.asm"

__ADDSTR:	; Implements c$ = a$ + b$
				; hl = &a$, de = &b$ (pointers)


__STRCAT2:	; This routine creates a new string in dynamic space
				; making room for it. Then copies a$ + b$ into it.
				; HL = a$, DE = b$

			PROC

			LOCAL __STR_CONT
			LOCAL __STRCATEND

			push hl
			call __STRLEN
			ld c, l
			ld b, h		; BC = LEN(a$)
			ex (sp), hl ; (SP) = LEN (a$), HL = a$
			push hl		; Saves pointer to a$

			inc bc
			inc bc		; +2 bytes to store length

			ex de, hl
			push hl
			call __STRLEN
			; HL = len(b$)

			add hl, bc	; Total str length => 2 + len(a$) + len(b$)

			ld c, l
			ld b, h		; BC = Total str length + 2
			call __MEM_ALLOC
			pop de		; HL = c$, DE = b$

			ex de, hl	; HL = b$, DE = c$
			ex (sp), hl ; HL = a$, (SP) = b$

			exx
			pop de		; D'E' = b$
			exx

			pop bc		; LEN(a$)

			ld a, d
			or e
		ret z		; If no memory: RETURN

__STR_CONT:
			push de		; Address of c$

			ld a, h
			or l
			jr nz, __STR_CONT1 ; If len(a$) != 0 do copy

	        ; a$ is NULL => uses HL = DE for transfer
			ld h, d
			ld l, e
			ld (hl), a	; This will copy 00 00 at (DE) location
	        inc de      ;
	        dec bc      ; Ensure BC will be set to 1 in the next step

__STR_CONT1:        ; Copies a$ (HL) into c$ (DE)
			inc bc
			inc bc		; BC = BC + 2
		ldir		; MEMCOPY: c$ = a$
			pop hl		; HL = c$

			exx
			push de		; Recovers b$; A ex hl,hl' would be very handy
			exx

			pop de		; DE = b$

__STRCAT: ; ConCATenate two strings a$ = a$ + b$. HL = ptr to a$, DE = ptr to b$
		  ; NOTE: Both DE, BC and AF are modified and lost
			  ; Returns HL (pointer to a$)
			  ; a$ Must be NOT NULL
			ld a, d
			or e
			ret z		; Returns if de is NULL (nothing to copy)

			push hl		; Saves HL to return it later

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl
			add hl, bc	; HL = end of (a$) string ; bc = len(a$)
			push bc		; Saves LEN(a$) for later

			ex de, hl	; DE = end of string (Begin of copy addr)
			ld c, (hl)
			inc hl
			ld b, (hl)	; BC = len(b$)

			ld a, b
			or c
			jr z, __STRCATEND; Return if len(b$) == 0

			push bc			 ; Save LEN(b$)
			inc hl			 ; Skip 2nd byte of len(b$)
			ldir			 ; Concatenate b$

			pop bc			 ; Recovers length (b$)
			pop hl			 ; Recovers length (a$)
			add hl, bc		 ; HL = LEN(a$) + LEN(b$) = LEN(a$+b$)
			ex de, hl		 ; DE = LEN(a$+b$)
			pop hl

			ld (hl), e		 ; Updates new LEN and return
			inc hl
			ld (hl), d
			dec hl
			ret

__STRCATEND:
			pop hl		; Removes Len(a$)
			pop hl		; Restores original HL, so HL = a$
			ret

			ENDP

#line 14378 "Program.zxbas"
#line 1 "string.asm"

	; String library



__STR_ISNULL:	; Returns A = FF if HL is 0, 0 otherwise
			ld a, h
			or l
			sub 1		; Only CARRY if HL is NULL
			sbc a, a	; Only FF if HL is NULL (0 otherwise)
			ret


__STRCMP:	; Compares strings at HL, DE: Returns 0 if EQual, -1 if HL < DE, +1 if HL > DE
				; A register is preserved and returned in A'
			PROC ; __FASTCALL__

			LOCAL __STRCMPZERO
			LOCAL __STRCMPEXIT
			LOCAL __STRCMPLOOP
			LOCAL __NOPRESERVEBC
			LOCAL __EQULEN
			LOCAL __EQULEN1
			LOCAL __HLZERO

			ex af, af'	; Saves current A register in A' (it's used by STRXX comparison functions)

			ld a, h
			or l
			jr z, __HLZERO

			ld a, d
			or e
			ld a, 1
			ret z		; Returns +1 if HL is not NULL and DE is NULL

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl		; BC = LEN(a$)
			push hl		; HL = &a$, saves it

			ex de, hl
			ld e, (hl)
			inc hl
			ld d, (hl)
			inc hl
			ex de, hl	; HL = LEN(b$), de = &b$

			; At this point Carry is cleared, and A reg. = 1
			sbc hl, bc	; Carry if len(b$) > len(a$)
			jr z, __EQULEN	; Jump if they have the same length so A reg. = 0
			jr c, __EQULEN1 ; Jump if len(b$) > len(a$) so A reg. = 1
__NOPRESERVEBC:
			add hl, bc	; Restore HL (original length)
			ld b, h		; len(b$) <= len(a$)
			ld c, l		; so BC = hl
			dec a		; At this point A register = 0, it must be -1 since len(a$) > len(b$)
__EQULEN:
			dec a		; A = 0 if len(a$) = len(b$), -1 otherwise
__EQULEN1:
			pop hl		; Recovers A$ pointer
			push af		; Saves A for later (Value to return if strings reach the end)
	        ld a, b
	        or c
	        jr z, __STRCMPZERO ; empty string being compared

		; At this point: BC = lesser length, DE and HL points to b$ and a$ chars respectively
__STRCMPLOOP:
			ld a, (de)
			cpi
			jr nz, __STRCMPEXIT ; (HL) != (DE). Examine carry
			jp po, __STRCMPZERO ; END of string (both are equal)
			inc de
			jp __STRCMPLOOP

__STRCMPZERO:
			pop af		; This is -1 if len(a$) < len(b$), +1 if len(b$) > len(a$), 0 otherwise
			ret

__STRCMPEXIT:		; Sets A with the following value
			dec hl		; Get back to the last char
			cp (hl)
			sbc a, a	; A = -1 if carry => (DE) < (HL); 0 otherwise (DE) > (HL)
			cpl			; A = -1 if (HL) < (DE), 0 otherwise
			add a, a    ; A = A * 2 (thus -2 or 0)
			inc a		; A = A + 1 (thus -1 or 1)

			pop bc		; Discard top of the stack
			ret

__HLZERO:
			or d
			or e
			ret z		; Returns 0 (EQ) if HL == DE == NULL
			ld a, -1
			ret			; Returns -1 if HL is NULL and DE is not NULL

			ENDP

			; The following routines perform string comparison operations (<, >, ==, etc...)
			; On return, A will contain 0 for False, other value for True
			; Register A' will determine whether the incoming strings (HL, DE) will be freed
		; from dynamic memory on exit:
			;		Bit 0 => 1 means HL will be freed.
			;		Bit 1 => 1 means DE will be freed.

__STREQ:	; Compares a$ == b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			;inc a		; If A == -1, return 0
			;jp z, __FREE_STR

			;dec a		;
			;dec a		; Return -1 if a = 0 (True), returns 0 if A == 1 (False)
	        sub 1
	        sbc a, a
			jp __FREE_STR


__STRNE:	; Compares a$ != b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			;jp z, __FREE_STR

			;ld a, 0FFh	; Returns 0xFFh (True)
			jp __FREE_STR


__STRLT:	; Compares a$ < b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			jp z, __FREE_STR ; Returns 0 if A == B

			dec a		; Returns 0 if A == 1 => a$ > b$
			;jp z, __FREE_STR

			;inc a		; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRLE:	; Compares a$ <= b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			dec a		; Returns 0 if A == 1 => a$ < b$
			;jp z, __FREE_STR

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRGT:	; Compares a$ > b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			jp z, __FREE_STR		; Returns 0 if A == B

			inc a		; Returns 0 if A == -1 => a$ < b$
			;jp z, __FREE_STR		; Returns 0 if A == B

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRGE:	; Compares a$ >= b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			inc a		; Returns 0 if A == -1 => a$ < b$
			;jr z, __FREE_STR

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return

__FREE_STR: ; This exit point will test A' for bits 0 and 1
				; If bit 0 is 1 => Free memory from HL pointer
				; If bit 1 is 1 => Free memory from DE pointer
				; Finally recovers A, to return the result
			PROC

			LOCAL __FREE_STR2
			LOCAL __FREE_END

			ex af, af'
			bit 0, a
			jr z, __FREE_STR2

			push af
			push de
			call __MEM_FREE
			pop de
			pop af

__FREE_STR2:
			bit 1, a
			jr z, __FREE_END

			ex de, hl
			call __MEM_FREE

__FREE_END:
			ex af, af'
			ret

			ENDP

#line 14379 "Program.zxbas"

#line 1 "strslice.asm"

	; String slicing library
	; HL = Str pointer
	; DE = String start
	; BC = String character end
	; A register => 0 => the HL pointer wont' be freed from the HEAP
	; e.g. a$(5 TO 10) => HL = a$; DE = 5; BC = 10

	; This implements a$(X to Y) being X and Y first and
	; last characters respectively. If X > Y, NULL is returned

	; Otherwise returns a pointer to a$ FROM X to Y (starting from 0)
	; if Y > len(a$), then a$ will be padded with spaces (reallocating
	; it in dynamic memory if needed). Returns pointer (HL) to resulting
	; string. NULL (0) if no memory for padding.
	;





__STRSLICE:			; Callee entry
		pop hl			; Return ADDRESS
		pop bc			; Last char pos
		pop de			; 1st char pos
		ex (sp), hl		; CALLEE. -> String start

__STRSLICE_FAST:	; __FASTCALL__ Entry
		PROC

		LOCAL __CONT
		LOCAL __EMPTY
		LOCAL __FREE_ON_EXIT

		push hl			; Stores original HL pointer to be recovered on exit
		ex af, af'		; Saves A register for later

		push hl
		call __STRLEN
		inc bc			; Last character position + 1 (string starts from 0)
		or a
		sbc hl, bc		; Compares length with last char position
		jr nc, __CONT	; If Carry => We must copy to end of string
		add hl, bc		; Restore back original LEN(a$) in HL
		ld b, h
		ld c, l			; Copy to the end of str
		ccf				; Clears Carry flag for next subtraction

__CONT:
		ld h, b
		ld l, c			; HL = Last char position to copy (1 for char 0, 2 for char 1, etc)
		sbc hl, de		; HL = LEN(a$) - DE => Number of chars to copy
		jr z, __EMPTY	; 0 Chars to copy => Return HL = 0 (NULL STR)
		jr c, __EMPTY	; If Carry => Nothing to return (NULL STR)

		ld b, h
		ld c, l			; BC = Number of chars to copy
		inc bc
		inc bc			; +2 bytes for string length number

		push bc
		push de
		call __MEM_ALLOC
		pop de
		pop bc
		ld a, h
		or l
		jr z, __EMPTY	; Return if NULL (no memory)

		dec bc
		dec bc			; Number of chars to copy (Len of slice)

		ld (hl), c
		inc hl
		ld (hl), b
		inc hl			; Stores new string length

		ex (sp), hl		; Pointer to A$ now in HL; Pointer to new string chars in Stack
		inc hl
		inc hl			; Skip string length
		add hl, de		; Were to start from A$
		pop de			; Start of new string chars
		push de			; Stores it again
		ldir			; Copies BC chars
		pop de
		dec de
		dec de			; Points to String LEN start
		ex de, hl		; Returns it in HL
		jr __FREE_ON_EXIT

__EMPTY:			; Return NULL (empty) string
		pop hl
		ld hl, 0		; Return NULL


__FREE_ON_EXIT:
		ex af, af'		; Recover original A register
		ex (sp), hl		; Original HL pointer

		or a
		call nz, __MEM_FREE

		pop hl			; Recover result
		ret

		ENDP

#line 14381 "Program.zxbas"

#line 1 "swap32.asm"

	; Exchanges current DE HL with the
	; ones in the stack

__SWAP32:
		pop bc ; Return address
	    ex (sp), hl
	    inc sp
	    inc sp
	    ex de, hl
	    ex (sp), hl
	    ex de, hl
	    dec sp
	    dec sp
	    push bc
		ret

#line 14383 "Program.zxbas"


ZXBASIC_USER_DATA:
	_counter EQU 23672
	_hiCounter EQU 23674
_musParamA:
	DEFB 00, 00
_musParamB:
	DEFB 00, 00
_currentOp:
	DEFB 00
_screenScore:
	DEFB 00, 00
_workingScore:
	DEFB 00, 00
_screenLevel:
	DEFB 00
_workingLevel:
	DEFB 00
	_udgAddress EQU 23675
_playedTetrisMusic:
	DEFB 00h
_playedArkaMusic:
	DEFB 00h
_playedRacingMusic:
	DEFB 00h
_playedSnakeMusic:
	DEFB 00h
_playedDestroyerMusic:
	DEFB 00h
_playedGhostMusic:
	DEFB 00h
_playedConstructorMusic:
	DEFB 00h
_playedMatchMusic:
	DEFB 00
_level:
	DEFB 00h
_game:
	DEFB 00
	_chars EQU 23606
	_deathMusic.__DATA__ EQU 25576
_deathMusic:
	DEFW __LABEL1357
_deathMusic.__DATA__.__PTR__:
	DEFW 25576
__LABEL1357:
	DEFW 0000h
	DEFB 02h
	_winMusic.__DATA__ EQU 25668
_winMusic:
	DEFW __LABEL1358
_winMusic.__DATA__.__PTR__:
	DEFW 25668
__LABEL1358:
	DEFW 0000h
	DEFB 02h
	_tetrisIntroMusic.__DATA__ EQU 26108
_tetrisIntroMusic:
	DEFW __LABEL1359
_tetrisIntroMusic.__DATA__.__PTR__:
	DEFW 26108
__LABEL1359:
	DEFW 0000h
	DEFB 02h
	_tetrisLevelMusic.__DATA__ EQU 26308
_tetrisLevelMusic:
	DEFW __LABEL1360
_tetrisLevelMusic.__DATA__.__PTR__:
	DEFW 26308
__LABEL1360:
	DEFW 0000h
	DEFB 02h
	_arkaIntroMusic.__DATA__ EQU 26428
_arkaIntroMusic:
	DEFW __LABEL1361
_arkaIntroMusic.__DATA__.__PTR__:
	DEFW 26428
__LABEL1361:
	DEFW 0000h
	DEFB 02h
	_arkaDeathMusic.__DATA__ EQU 26620
_arkaDeathMusic:
	DEFW __LABEL1362
_arkaDeathMusic.__DATA__.__PTR__:
	DEFW 26620
__LABEL1362:
	DEFW 0000h
	DEFB 02h
	_raceIntroMusic.__DATA__ EQU 26668
_raceIntroMusic:
	DEFW __LABEL1363
_raceIntroMusic.__DATA__.__PTR__:
	DEFW 26668
__LABEL1363:
	DEFW 0000h
	DEFB 02h
	_raceLevelMusic.__DATA__ EQU 26752
_raceLevelMusic:
	DEFW __LABEL1364
_raceLevelMusic.__DATA__.__PTR__:
	DEFW 26752
__LABEL1364:
	DEFW 0000h
	DEFB 02h
	_snakeIntroMusic.__DATA__ EQU 26780
_snakeIntroMusic:
	DEFW __LABEL1365
_snakeIntroMusic.__DATA__.__PTR__:
	DEFW 26780
__LABEL1365:
	DEFW 0000h
	DEFB 02h
	_snakeLevelMusic.__DATA__ EQU 26860
_snakeLevelMusic:
	DEFW __LABEL1366
_snakeLevelMusic.__DATA__.__PTR__:
	DEFW 26860
__LABEL1366:
	DEFW 0000h
	DEFB 02h
	_destroyerIntroMusic.__DATA__ EQU 26888
_destroyerIntroMusic:
	DEFW __LABEL1367
_destroyerIntroMusic.__DATA__.__PTR__:
	DEFW 26888
__LABEL1367:
	DEFW 0000h
	DEFB 02h
	_destroyerLevelMusic.__DATA__ EQU 27024
_destroyerLevelMusic:
	DEFW __LABEL1368
_destroyerLevelMusic.__DATA__.__PTR__:
	DEFW 27024
__LABEL1368:
	DEFW 0000h
	DEFB 02h
	_ghostIntroMusic.__DATA__ EQU 27132
_ghostIntroMusic:
	DEFW __LABEL1369
_ghostIntroMusic.__DATA__.__PTR__:
	DEFW 27132
__LABEL1369:
	DEFW 0000h
	DEFB 02h
	_ghostScarySound.__DATA__ EQU 27252
_ghostScarySound:
	DEFW __LABEL1370
_ghostScarySound.__DATA__.__PTR__:
	DEFW 27252
__LABEL1370:
	DEFW 0000h
	DEFB 02h
	_ghostLevelMusic.__DATA__ EQU 27384
_ghostLevelMusic:
	DEFW __LABEL1371
_ghostLevelMusic.__DATA__.__PTR__:
	DEFW 27384
__LABEL1371:
	DEFW 0000h
	DEFB 02h
	_constructorIntroMusic.__DATA__ EQU 27420
_constructorIntroMusic:
	DEFW __LABEL1372
_constructorIntroMusic.__DATA__.__PTR__:
	DEFW 27420
__LABEL1372:
	DEFW 0000h
	DEFB 02h
	_constructorLevelMusic.__DATA__ EQU 27596
_constructorLevelMusic:
	DEFW __LABEL1373
_constructorLevelMusic.__DATA__.__PTR__:
	DEFW 27596
__LABEL1373:
	DEFW 0000h
	DEFB 02h
	_matchIntroMusic.__DATA__ EQU 27768
_matchIntroMusic:
	DEFW __LABEL1374
_matchIntroMusic.__DATA__.__PTR__:
	DEFW 27768
__LABEL1374:
	DEFW 0000h
	DEFB 02h
	_matchLevelMusic.__DATA__ EQU 28012
_matchLevelMusic:
	DEFW __LABEL1375
_matchLevelMusic.__DATA__.__PTR__:
	DEFW 28012
__LABEL1375:
	DEFW 0000h
	DEFB 02h
_screenCells:
	DEFW __LABEL1376
_screenCells.__DATA__.__PTR__:
	DEFW _screenCells.__DATA__
_screenCells.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1376:
	DEFW 0001h
	DEFW 0014h
	DEFB 01h
_workingCells:
	DEFW __LABEL1377
_workingCells.__DATA__.__PTR__:
	DEFW _workingCells.__DATA__
_workingCells.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1377:
	DEFW 0001h
	DEFW 0014h
	DEFB 01h
	_attribs.__DATA__ EQU 22528
_attribs:
	DEFW __LABEL1378
_attribs.__DATA__.__PTR__:
	DEFW 22528
__LABEL1378:
	DEFW 0001h
	DEFW 0020h
	DEFB 01h
_ops:
	DEFW __LABEL1379
_ops.__DATA__.__PTR__:
	DEFW _ops.__DATA__
_ops.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1379:
	DEFW 0001h
	DEFW 00C8h
	DEFB 01h
_screenSymbol:
	DEFW __LABEL1380
_screenSymbol.__DATA__.__PTR__:
	DEFW _screenSymbol.__DATA__
_screenSymbol.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1380:
	DEFW 0001h
	DEFW 0002h
	DEFB 01h
_workingSymbol:
	DEFW __LABEL1381
_workingSymbol.__DATA__.__PTR__:
	DEFW _workingSymbol.__DATA__
_workingSymbol.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1381:
	DEFW 0001h
	DEFW 0002h
	DEFB 01h
_sprites:
	DEFW __LABEL1382
_sprites.__DATA__.__PTR__:
	DEFW _sprites.__DATA__
_sprites.__DATA__:
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 00h
	DEFB 7Fh
	DEFB 41h
	DEFB 5Bh
	DEFB 5Bh
	DEFB 43h
	DEFB 5Fh
	DEFB 7Fh
	DEFB 00h
	DEFB 07h
	DEFB 07h
	DEFB 05h
	DEFB 05h
	DEFB 07h
	DEFB 07h
	DEFB 00h
	DEFB 00h
	DEFB 70h
	DEFB 70h
	DEFB 50h
	DEFB 50h
	DEFB 70h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 77h
	DEFB 77h
	DEFB 55h
	DEFB 55h
	DEFB 77h
	DEFB 77h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 77h
	DEFB 44h
	DEFB 24h
	DEFB 14h
	DEFB 77h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 77h
	DEFB 55h
	DEFB 56h
	DEFB 55h
	DEFB 75h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 60h
	DEFB 40h
	DEFB 60h
	DEFB 40h
	DEFB 60h
	DEFB 00h
	DEFB 0Fh
	DEFB 30h
	DEFB 47h
	DEFB 5Fh
	DEFB 9Ch
	DEFB 0BBh
	DEFB 0B7h
	DEFB 0B7h
	DEFB 6Fh
	DEFB 37h
	DEFB 1Bh
	DEFB 1Bh
	DEFB 1Bh
	DEFB 1Bh
	DEFB 36h
	DEFB 6Eh
	DEFB 0F0h
	DEFB 0Ch
	DEFB 0E2h
	DEFB 0FAh
	DEFB 39h
	DEFB 0DDh
	DEFB 0EDh
	DEFB 0EDh
	DEFB 00h
	DEFB 00h
	DEFB 47h
	DEFB 44h
	DEFB 46h
	DEFB 44h
	DEFB 77h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 57h
	DEFB 54h
	DEFB 56h
	DEFB 54h
	DEFB 27h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 97h
	DEFB 0D4h
	DEFB 0B6h
	DEFB 94h
	DEFB 97h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 57h
	DEFB 22h
	DEFB 22h
	DEFB 22h
	DEFB 52h
	DEFB 00h
	DEFB 0F6h
	DEFB 0ECh
	DEFB 0D8h
	DEFB 0D8h
	DEFB 0D8h
	DEFB 0D8h
	DEFB 6Ch
	DEFB 76h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 7Bh
	DEFB 7Bh
	DEFB 7Bh
	DEFB 7Bh
	DEFB 7Bh
	DEFB 7Bh
	DEFB 7Bh
	DEFB 7Bh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0DEh
	DEFB 0DEh
	DEFB 0DEh
	DEFB 0DEh
	DEFB 0DEh
	DEFB 0DEh
	DEFB 0DEh
	DEFB 0DEh
	DEFB 00h
	DEFB 36h
	DEFB 45h
	DEFB 25h
	DEFB 16h
	DEFB 14h
	DEFB 64h
	DEFB 00h
__LABEL1382:
	DEFW 0001h
	DEFW 0008h
	DEFB 01h
	_deadPic.__DATA__ EQU 24616
_deadPic:
	DEFW __LABEL1383
_deadPic.__DATA__.__PTR__:
	DEFW 24616
__LABEL1383:
	DEFW 0000h
	DEFB 02h
	_winPic.__DATA__ EQU 24656
_winPic:
	DEFW __LABEL1384
_winPic.__DATA__.__PTR__:
	DEFW 24656
__LABEL1384:
	DEFW 0000h
	DEFB 02h
	_introScreen.__DATA__ EQU 24576
_introScreen:
	DEFW __LABEL1385
_introScreen.__DATA__.__PTR__:
	DEFW 24576
__LABEL1385:
	DEFW 0000h
	DEFB 02h
	_tetrisPieces.__DATA__ EQU 28080
_tetrisPieces:
	DEFW __LABEL1386
_tetrisPieces.__DATA__.__PTR__:
	DEFW 28080
__LABEL1386:
	DEFW 0002h
	DEFW 0002h
	DEFW 0004h
	DEFB 01h
	_tetrisScreens.__DATA__ EQU 24696
_tetrisScreens:
	DEFW __LABEL1387
_tetrisScreens.__DATA__.__PTR__:
	DEFW 24696
__LABEL1387:
	DEFW 0001h
	DEFW 000Ah
	DEFB 02h
_expandedPiece:
	DEFW __LABEL1388
_expandedPiece.__DATA__.__PTR__:
	DEFW _expandedPiece.__DATA__
_expandedPiece.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1388:
	DEFW 0002h
	DEFW 0004h
	DEFW 0004h
	DEFB 01h
_expandedSize:
	DEFW __LABEL1389
_expandedSize.__DATA__.__PTR__:
	DEFW _expandedSize.__DATA__
_expandedSize.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1389:
	DEFW 0001h
	DEFW 0002h
	DEFB 01h
	_arkaScreens.__DATA__ EQU 24896
_arkaScreens:
	DEFW __LABEL1390
_arkaScreens.__DATA__.__PTR__:
	DEFW 24896
__LABEL1390:
	DEFW 0001h
	DEFW 000Ch
	DEFB 02h
	_snakeScreens.__DATA__ EQU 25136
_snakeScreens:
	DEFW __LABEL1391
_snakeScreens.__DATA__.__PTR__:
	DEFW 25136
__LABEL1391:
	DEFW 0001h
	DEFW 0014h
	DEFB 02h
	_bigGhost.__DATA__ EQU 25536
_bigGhost:
	DEFW __LABEL1392
_bigGhost.__DATA__.__PTR__:
	DEFW 25536
__LABEL1392:
	DEFW 0000h
	DEFB 02h
__LABEL1257:
	DEFB 0FFh
__LABEL1258:
	DEFB 01h
__LABEL1263:
	DEFB 04h
__LABEL1286:
	DEFB 01h
__LABEL1287:
	DEFB 14h
__LABEL1288:
	DEFB 03h
__LABEL1289:
	DEFB 04h
__LABEL1312:
	DEFB 04h
__LABEL1313:
	DEFB 01h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 01h
__LABEL1314:
	DEFB 01h
__LABEL1317:
	DEFB 04h
__LABEL1321:
	DEFB 04h
__LABEL1330:
	DEFB 04h
__LABEL1333:
	DEFB 04h
__LABEL1334:
	DEFB 00h
	DEFB 00h
	DEFB 01h
__LABEL1335:
	DEFB 01h
__LABEL1341:
	DEFB 01h
__LABEL1342:
	DEFB 01h
__LABEL1343:
	DEFB 01h
__LABEL1344:
	DEFB 01h
__LABEL1345:
	DEFB 01h
__LABEL1346:
	DEFB 01h
__LABEL1347:
	DEFB 01h
__LABEL1348:
	DEFB 01h
__LABEL1349:
	DEFB 01h
__LABEL1350:
	DEFB 01h
__LABEL1351:
	DEFB 01h
__LABEL1352:
	DEFB 01h
__LABEL1353:
	DEFB 01h
__LABEL1354:
	DEFB 01h
__LABEL1355:
	DEFB 01h
__LABEL1356:
	DEFB 01h
ZXBASIC_MEM_HEAP:
	; Defines DATA END
ZXBASIC_USER_DATA_END EQU ZXBASIC_MEM_HEAP + ZXBASIC_HEAP_SIZE
	; Defines USER DATA Length in bytes
ZXBASIC_USER_DATA_LEN EQU ZXBASIC_USER_DATA_END - ZXBASIC_USER_DATA
	END
