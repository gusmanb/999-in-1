	.zxbasic
	org 32768
	; Defines HEAP SIZE
ZXBASIC_HEAP_SIZE EQU 128
__START_PROGRAM:
	di
	push ix
	push iy
	exx
	push hl
	exx
	ld hl, 0
	add hl, sp
	ld (__CALL_BACK__), hl
	ei
	call __MEM_INIT
	call __PRINT_INIT
	ld hl, 168
	call _allocate
	ld (23675), hl
	ld de, 0
	ld hl, 0
	call RANDOMIZE
	call _InitScreen
	call _InitIntro
	call _InvertIntro
__LABEL0:
	call _SelectGame
	or a
	jp z, __LABEL2
	call _ShowCurtain
	call _ShowWin
	jp __LABEL3
__LABEL2:
	call _ShowCurtain
	call _ShowDeath
__LABEL3:
	jp __LABEL0
__LABEL1:
	ld hl, 0
	ld b, h
	ld c, l
__END_PROGRAM:
	di
	ld hl, (__CALL_BACK__)
	ld sp, hl
	exx
	pop hl
	exx
	pop iy
	pop ix
	ei
	ret
__CALL_BACK__:
	DEFW 0
_attr:
	push ix
	ld ix, 0
	add ix, sp
#line 27
		PROC
		LOCAL __ATTR_END
		ld e, (ix+7)
		ld d, (ix+5)
		call __IN_SCREEN
		jr nc, __ATTR_END
		call __ATTR_ADDR
		ld a, (hl)
__ATTR_END:
		ENDP
#line 37
_attr__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_setattr:
	push ix
	ld ix, 0
	add ix, sp
#line 63
		PROC
		LOCAL __ATTR_END
		ld e, (ix+7)
		ld d, (ix+5)
		call __IN_SCREEN
		jr nc, __ATTR_END
		call __ATTR_ADDR
		ld a, (ix+9)
		ld (hl), a
__ATTR_END:
		ENDP
#line 74
_setattr__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_attraddr:
#line 97
		pop hl
		ex (sp), hl
		ld d, a
		ld e, h
		jp __ATTR_ADDR
#line 102
_attraddr__leave:
	ret
_point:
	push ix
	ld ix, 0
	add ix, sp
#line 27
		PROC
		LOCAL PIXEL_ADDR
		LOCAL POINT_LOOP
		LOCAL POINT_END
		LOCAL POINT_1
		PIXEL_ADDR EQU (22AAh + 6)
		ld b, (ix+7)
		ld c, (ix+5)
		ld a, 191
		sub b
		jp nc, POINT_1
		ld a, -1
		jr POINT_END
POINT_1:
		call PIXEL_ADDR
		ld b, a
		inc b
		ld a, (hl)
POINT_LOOP:
		rlca
		djnz POINT_LOOP
		and 1
POINT_END:
		ENDP
#line 51
_point__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_screen:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
#line 34
		PROC
		LOCAL __SCREEN_END
		LOCAL __S_SCRNS_BC
		LOCAL STK_END
		LOCAL RECLAIM2
		__S_SCRNS_BC EQU 2538h
		STK_END EQU 5C65h
		RECLAIM2 EQU 19E8h
		ld bc, 4
		call __MEM_ALLOC
		push hl
		ld a, h
		or l
		jr z, __SCREEN_END
		ld hl, (STK_END)
		push hl
		ld b, (ix+7)
		ld c, (ix+5)
		call __S_SCRNS_BC
		call __FPSTACK_POP
		pop hl
		ld (STK_END), hl
		pop hl
		push hl
		ld (hl), c
		inc hl
		ld (hl), b
		inc hl
		ld a, (de)
		ld (hl), a
		ex de, hl
		call RECLAIM2
__SCREEN_END:
		pop hl
		ld (ix-2), l
		ld (ix-1), h
		ENDP
#line 71
	ld l, (ix-2)
	ld h, (ix-1)
	call __LOADSTR
_screen__leave:
	ex af, af'
	exx
	ld l, (ix-2)
	ld h, (ix-1)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_pos:
#line 27
		PROC
		call __LOAD_S_POSN
		ld a, e
		ENDP
#line 31
_pos__leave:
	ret
_csrlin:
#line 25
		PROC
		call __LOAD_S_POSN
		ld a, d
		ENDP
#line 29
_csrlin__leave:
	ret
_input:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld de, __LABEL4
	ld bc, -2
	call __PSTORE_STR
	ld a, (23611)
	push af
	ld h, 8
	pop af
	or h
	ld (23611), a
__LABEL5:
	call _PRIVATEInputShowCursor
	xor a
	ld (_input_LastK), a
__LABEL8:
__LABEL10:
	ld a, (_input_LastK)
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL8
__LABEL9:
	call _PRIVATEInputHideCursor
	ld a, (_input_LastK)
	sub 12
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL11
	ld l, (ix-2)
	ld h, (ix-1)
	call __STRLEN
	ld a, h
	or l
	jp z, __LABEL14
	ld l, (ix-2)
	ld h, (ix-1)
	call __STRLEN
	push hl
	ld de, 1
	pop hl
	call __EQ16
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL15
	ld de, __LABEL4
	ld bc, -2
	call __PSTORE_STR
	jp __LABEL16
__LABEL15:
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	ld hl, 0
	push hl
	ld l, (ix-2)
	ld h, (ix-1)
	call __STRLEN
	dec hl
	dec hl
	dec hl
	push hl
	xor a
	call __STRSLICE
	ld d, h
	ld e, l
	ld bc, -2
	call __PSTORE_STR2
__LABEL16:
	ld hl, __LABEL17
	xor a
	call __PRINTSTR
__LABEL14:
	jp __LABEL12
__LABEL11:
	ld a, (_input_LastK)
	sub 32
	ccf
	sbc a, a
	call __NORMALIZE_BOOLEAN
	push af
	ld l, (ix-2)
	ld h, (ix-1)
	call __STRLEN
	push hl
	ld l, (ix+4)
	ld h, (ix+5)
	ex de, hl
	pop hl
	or a
	sbc hl, de
	sbc a, a
	call __NORMALIZE_BOOLEAN
	ld h, a
	pop af
	or a
	jr z, __LABEL527
	ld a, h
__LABEL527:
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL19
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	ld a, (_input_LastK)
	push af
	ld hl, 1
	call CHR
	ex de, hl
	pop hl
	push de
	call __ADDSTR
	ex (sp), hl
	call __MEM_FREE
	pop hl
	ld d, h
	ld e, l
	ld bc, -2
	call __PSTORE_STR2
	ld a, (_input_LastK)
	push af
	ld hl, 1
	call CHR
	ld a, 1
	call __PRINTSTR
__LABEL19:
__LABEL12:
__LABEL7:
	ld a, (_input_LastK)
	sub 13
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL5
__LABEL6:
	ld (ix-4), 1
	ld (ix-3), 0
	jp __LABEL20
__LABEL23:
	xor a
	call OVER_TMP
	ld a, 8
	push af
	ld hl, 1
	call CHR
	push hl
	ld de, __LABEL25
	pop hl
	push hl
	call __ADDSTR
	ex (sp), hl
	call __MEM_FREE
	pop hl
	push hl
	ld a, 8
	push af
	ld hl, 1
	call CHR
	ex de, hl
	pop hl
	push hl
	push de
	call __ADDSTR
	pop de
	ex (sp), hl
	push de
	call __MEM_FREE
	pop hl
	call __MEM_FREE
	pop hl
	ld a, 1
	call __PRINTSTR
	call COPY_ATTR
__LABEL24:
	ld l, (ix-4)
	ld h, (ix-3)
	inc hl
	ld (ix-4), l
	ld (ix-3), h
__LABEL20:
	ld l, (ix-4)
	ld h, (ix-3)
	push hl
	ld l, (ix-2)
	ld h, (ix-1)
	call __STRLEN
	pop de
	or a
	sbc hl, de
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL23
__LABEL22:
	ld l, (ix-2)
	ld h, (ix-1)
	call __LOADSTR
_input__leave:
	ex af, af'
	exx
	ld l, (ix-2)
	ld h, (ix-1)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_PRIVATEInputShowCursor:
	call _csrlin
	push af
	call _pos
	call PRINT_AT
	xor a
	call OVER_TMP
	ld a, 1
	call FLASH_TMP
	ld de, __LABEL17
	ld hl, __LABEL25
	call __ADDSTR
	ld a, 1
	call __PRINTSTR
	call COPY_ATTR
_PRIVATEInputShowCursor__leave:
	ret
_PRIVATEInputHideCursor:
	call _csrlin
	push af
	call _pos
	call PRINT_AT
	xor a
	call OVER_TMP
	xor a
	call FLASH_TMP
	ld de, __LABEL17
	ld hl, __LABEL25
	call __ADDSTR
	ld a, 1
	call __PRINTSTR
	call COPY_ATTR
_PRIVATEInputHideCursor__leave:
	ret
_allocate:
#line 35
		ld b, h
		ld c, l
		jp __MEM_ALLOC
#line 38
_allocate__leave:
	ret
_callocate:
#line 63
		ld b, h
		ld c, l
		jp __MEM_CALLOC
#line 66
_callocate__leave:
	ret
_deallocate:
#line 81
		jp __MEM_FREE
#line 82
_deallocate__leave:
	ret
_reallocate:
#line 107
		ex de, hl
		pop hl
		ex (sp), hl
		ld b, h
		ld c, l
		ex de, hl
		jp __REALLOC
#line 114
_reallocate__leave:
	ret
_memavail:
#line 126
		PROC
		LOCAL LOOP
		ld hl, ZXBASIC_MEM_HEAP
		ld de, 0
LOOP:
		ld c, (hl)
		inc hl
		ld b, (hl)
		inc hl
		ld a, (hl)
		inc hl
		ld h, (hl)
		ld l, a
		ex de, hl
		add hl, bc
		ex de, hl
		ld a, h
		or l
		jr nz, LOOP
		ex de, hl
		ENDP
#line 147
_memavail__leave:
	ret
_maxavail:
#line 170
		PROC
		LOCAL LOOP, CONT
		ld hl, ZXBASIC_MEM_HEAP
		ld de, 0
LOOP:
		ld c, (hl)
		inc hl
		ld b, (hl)
		inc hl
		ld a, (hl)
		inc hl
		ld h, (hl)
		ld l, a
		ex de, hl
		or a
		sbc hl, bc
		add hl, bc
		ex de, hl
		jr nc, CONT
		ld d, b
		ld e, c
CONT:
		ld a, h
		or l
		jr nz, LOOP
		ex de, hl
		ENDP
#line 197
_maxavail__leave:
	ret
_Frames:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, (_counter)
_Frames__leave:
	ld sp, ix
	pop ix
	ret
_Time:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	ld hl, (_counter)
	ld de, 0
	call __U32TOFREG
	ld hl, -5
	call __PSTOREF
	push ix
	pop hl
	ld de, -5
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	ld a, 086h
	ld de, 00048h
	ld bc, 00000h
	call __DIVF
	ld hl, -5
	call __PSTOREF
	push ix
	pop hl
	ld de, -5
	add hl, de
	call __PLOADF
_Time__leave:
	ld sp, ix
	pop ix
	ret
_ResetFrameCounter:
	push ix
	ld ix, 0
	add ix, sp
#line 21
		di
#line 22
	ld hl, 0
	ld (_counter), hl
	xor a
	ld (_hiCounter), a
#line 30
		ei
#line 31
_ResetFrameCounter__leave:
	ld sp, ix
	pop ix
	ret
_getPaddedText:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld l, (ix+4)
	ld h, (ix+5)
	call __STRLEN
	ld a, l
	ld (ix-1), a
	sub (ix+9)
	ccf
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL27
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	ld hl, 0
	push hl
	ld a, (ix+9)
	ld l, a
	ld h, 0
	dec hl
	push hl
	xor a
	call __STRSLICE
	jp _getPaddedText__leave
__LABEL27:
	ld l, (ix+4)
	ld h, (ix+5)
	ld d, h
	ld e, l
	ld bc, -4
	call __PSTORE_STR
	ld (ix-2), 1
	jp __LABEL28
__LABEL31:
	ld l, (ix+6)
	ld h, (ix+7)
	push hl
	ld l, (ix-4)
	ld h, (ix-3)
	ex de, hl
	pop hl
	call __ADDSTR
	ld d, h
	ld e, l
	ld bc, -4
	call __PSTORE_STR2
__LABEL32:
	inc (ix-2)
__LABEL28:
	ld a, (ix-2)
	push af
	ld a, (ix+9)
	sub (ix-1)
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL31
__LABEL30:
	ld l, (ix-4)
	ld h, (ix-3)
	call __LOADSTR
_getPaddedText__leave:
	ex af, af'
	exx
	ld l, (ix+4)
	ld h, (ix+5)
	call __MEM_FREE
	ld l, (ix+6)
	ld h, (ix+7)
	call __MEM_FREE
	ld l, (ix-4)
	ld h, (ix-3)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_InitScreen:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld hl, _sprites.__DATA__
	ld (_udgAddress), hl
	ld a, 7
	call INK
	call COPY_ATTR
	xor a
	call PAPER
	call COPY_ATTR
	ld a, 1
	call BRIGHT
	call COPY_ATTR
	xor a
	call BORDER
	call CLS
	xor a
	push af
	ld a, 10
	call PRINT_AT
	ld hl, __LABEL33
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 1
	call INK
	call COPY_ATTR
	ld a, 7
	call PAPER
	call COPY_ATTR
	xor a
	call BRIGHT
	call COPY_ATTR
	ld a, 2
	push af
	ld a, 7
	call PRINT_AT
	ld hl, __LABEL34
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld (ix-1), 1
	jp __LABEL35
__LABEL38:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	inc hl
	inc hl
	ld a, l
	push af
	ld a, 7
	call PRINT_AT
	ld hl, __LABEL40
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, (ix-1)
	ld l, a
	ld h, 0
	inc hl
	inc hl
	ld a, l
	push af
	ld a, 18
	call PRINT_AT
	ld hl, __LABEL41
	xor a
	call __PRINTSTR
	call PRINT_EOL
__LABEL39:
	inc (ix-1)
__LABEL35:
	ld a, (ix-1)
	push af
	ld a, 20
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL38
__LABEL37:
	xor a
	ld (_sprites.__DATA__ + 0), a
	xor a
	ld (_sprites.__DATA__ + 1), a
	xor a
	ld (_sprites.__DATA__ + 2), a
	xor a
	ld (_sprites.__DATA__ + 3), a
	xor a
	ld (_sprites.__DATA__ + 4), a
	xor a
	ld (_sprites.__DATA__ + 5), a
	xor a
	ld (_sprites.__DATA__ + 6), a
	xor a
	ld (_sprites.__DATA__ + 7), a
	ld a, 23
	push af
	ld a, 7
	call PRINT_AT
	ld hl, __LABEL42
	xor a
	call __PRINTSTR
	call PRINT_EOL
	xor a
	call INK
	call COPY_ATTR
	ld a, 7
	call PAPER
	call COPY_ATTR
	xor a
	call BRIGHT
	call COPY_ATTR
	ld a, 3
	push af
	ld a, 19
	call PRINT_AT
	ld hl, __LABEL43
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 7
	push af
	ld a, 19
	call PRINT_AT
	ld hl, __LABEL44
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 12
	push af
	ld a, 19
	call PRINT_AT
	ld hl, __LABEL45
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, 9999
	ld (_workingScore), hl
	ld a, 99
	ld (_workingLevel), a
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 15
	push af
	ld a, 15
	push af
	call _SetSymbol
	ld hl, 1
	call __PAUSE
	call _UpdateScreen
	ld hl, 0
	ld (_workingScore), hl
	ld a, 1
	ld (_workingLevel), a
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	xor a
	push af
	xor a
	push af
	call _SetSymbol
	ld hl, 50
	call __PAUSE
	ld hl, 856
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 58
	call __BEEPER
	call _UpdateScreen
_InitScreen__leave:
	ld sp, ix
	pop ix
	ret
_InvertCell:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL46
	ld a, 1
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	call _SetCell
	jp __LABEL47
__LABEL46:
	xor a
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	call _SetCell
__LABEL47:
_InvertCell__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_InvertRect:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL48
__LABEL51:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL53
__LABEL56:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL58
	ld a, 1
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
	jp __LABEL59
__LABEL58:
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
__LABEL59:
__LABEL57:
	inc (ix-1)
__LABEL53:
	ld a, (ix-1)
	push af
	ld a, (ix+7)
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL56
__LABEL55:
__LABEL52:
	inc (ix-2)
__LABEL48:
	ld a, (ix-2)
	push af
	ld a, (ix+11)
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL51
__LABEL50:
_InvertRect__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_MoveRect:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL60
__LABEL63:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL65
__LABEL68:
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
__LABEL69:
	inc (ix-1)
__LABEL65:
	ld a, (ix-1)
	push af
	ld a, (ix+7)
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL68
__LABEL67:
__LABEL64:
	inc (ix-2)
__LABEL60:
	ld a, (ix-2)
	push af
	ld a, (ix+11)
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL63
__LABEL62:
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL70
__LABEL73:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL75
__LABEL78:
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	push af
	ld a, (ix-2)
	add a, (ix+15)
	push af
	ld a, (ix-1)
	add a, (ix+13)
	push af
	call _SetCell
__LABEL79:
	inc (ix-1)
__LABEL75:
	ld a, (ix-1)
	push af
	ld a, (ix+7)
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL78
__LABEL77:
__LABEL74:
	inc (ix-2)
__LABEL70:
	ld a, (ix-2)
	push af
	ld a, (ix+11)
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL73
__LABEL72:
_MoveRect__leave:
	exx
	ld hl, 12
__EXIT_FUNCTION:
	ld sp, ix
	pop ix
	pop de
	add hl, sp
	ld sp, hl
	push de
	exx
	ret
_DisplaceCollideRect:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld a, (ix+13)
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix+15)
	call __NORMALIZE_BOOLEAN
	ld h, a
	pop af
	or a
	jr z, __LABEL528
	ld a, h
__LABEL528:
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL81
	ld a, 255
	jp _DisplaceCollideRect__leave
__LABEL81:
	ld a, (ix+15)
	push af
	xor a
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL82
	ld a, (ix+11)
	add a, (ix+15)
	push af
	ld a, 20
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL85
	ld a, 2
	jp _DisplaceCollideRect__leave
__LABEL85:
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL86
__LABEL89:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL91
__LABEL94:
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix-2)
	add a, (ix+15)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	ld h, (hl)
	or a
	jr z, __LABEL529
	ld a, h
__LABEL529:
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL97
	ld a, 1
	jp _DisplaceCollideRect__leave
__LABEL97:
__LABEL95:
	inc (ix-1)
__LABEL91:
	ld a, (ix-1)
	push af
	ld a, (ix+7)
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL94
__LABEL93:
__LABEL90:
	inc (ix-2)
__LABEL86:
	ld a, (ix-2)
	push af
	ld a, (ix+11)
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL89
__LABEL88:
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL98
__LABEL101:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL103
__LABEL106:
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	ld (ix-3), a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL109
	ld a, (ix-3)
	push af
	ld a, (ix-2)
	add a, (ix+15)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
__LABEL109:
__LABEL107:
	inc (ix-1)
__LABEL103:
	ld a, (ix-1)
	push af
	ld a, (ix+7)
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL106
__LABEL105:
__LABEL102:
	inc (ix-2)
__LABEL98:
	ld a, (ix-2)
	push af
	ld a, (ix+11)
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL101
__LABEL100:
	xor a
	jp _DisplaceCollideRect__leave
__LABEL82:
	ld a, (ix+15)
	push af
	ld h, 0
	pop af
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL110
	ld a, (ix+9)
	add a, (ix+15)
	push af
	ld h, 1
	pop af
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL113
	ld a, 2
	jp _DisplaceCollideRect__leave
__LABEL113:
	ld a, (ix+11)
	ld (ix-2), a
	jp __LABEL114
__LABEL117:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL119
__LABEL122:
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix-2)
	add a, (ix+15)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	ld h, (hl)
	or a
	jr z, __LABEL530
	ld a, h
__LABEL530:
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL125
	ld a, 1
	jp _DisplaceCollideRect__leave
__LABEL125:
__LABEL123:
	inc (ix-1)
__LABEL119:
	ld a, (ix-1)
	push af
	ld a, (ix+7)
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL122
__LABEL121:
__LABEL118:
	dec (ix-2)
__LABEL114:
	ld a, (ix-2)
	ld h, (ix+9)
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL117
__LABEL116:
	ld a, (ix+11)
	ld (ix-2), a
	jp __LABEL126
__LABEL129:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL131
__LABEL134:
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	ld (ix-3), a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL137
	ld a, (ix-3)
	push af
	ld a, (ix-2)
	add a, (ix+15)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
__LABEL137:
__LABEL135:
	inc (ix-1)
__LABEL131:
	ld a, (ix-1)
	push af
	ld a, (ix+7)
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL134
__LABEL133:
__LABEL130:
	dec (ix-2)
__LABEL126:
	ld a, (ix-2)
	ld h, (ix+9)
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL129
__LABEL128:
	xor a
	jp _DisplaceCollideRect__leave
__LABEL110:
	ld a, (ix+13)
	push af
	xor a
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL138
	ld a, (ix+7)
	add a, (ix+13)
	push af
	ld a, 10
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL141
	ld a, 2
	jp _DisplaceCollideRect__leave
__LABEL141:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL142
__LABEL145:
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL147
__LABEL150:
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	add a, (ix+13)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	ld h, (hl)
	or a
	jr z, __LABEL531
	ld a, h
__LABEL531:
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL153
	ld a, 1
	jp _DisplaceCollideRect__leave
__LABEL153:
__LABEL151:
	inc (ix-2)
__LABEL147:
	ld a, (ix-2)
	push af
	ld a, (ix+11)
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL150
__LABEL149:
__LABEL146:
	inc (ix-1)
__LABEL142:
	ld a, (ix-1)
	push af
	ld a, (ix+7)
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL145
__LABEL144:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL154
__LABEL157:
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL159
__LABEL162:
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	ld (ix-3), a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL165
	ld a, (ix-3)
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	add a, (ix+13)
	push af
	call _SetCell
__LABEL165:
__LABEL163:
	inc (ix-2)
__LABEL159:
	ld a, (ix-2)
	push af
	ld a, (ix+11)
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL162
__LABEL161:
__LABEL158:
	inc (ix-1)
__LABEL154:
	ld a, (ix-1)
	push af
	ld a, (ix+7)
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL157
__LABEL156:
	xor a
	jp _DisplaceCollideRect__leave
__LABEL138:
	ld a, (ix+13)
	push af
	ld h, 0
	pop af
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL166
	ld a, (ix+7)
	add a, (ix+13)
	push af
	ld h, 1
	pop af
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL169
	ld a, 2
	jp _DisplaceCollideRect__leave
__LABEL169:
	ld a, (ix+7)
	ld (ix-1), a
	jp __LABEL170
__LABEL173:
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL175
__LABEL178:
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	add a, (ix+13)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	ld h, (hl)
	or a
	jr z, __LABEL532
	ld a, h
__LABEL532:
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL181
	ld a, 1
	jp _DisplaceCollideRect__leave
__LABEL181:
__LABEL179:
	inc (ix-2)
__LABEL175:
	ld a, (ix-2)
	push af
	ld a, (ix+11)
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL178
__LABEL177:
__LABEL174:
	dec (ix-1)
__LABEL170:
	ld a, (ix-1)
	ld h, (ix+5)
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL173
__LABEL172:
	ld a, (ix+7)
	ld (ix-1), a
	jp __LABEL182
__LABEL185:
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL187
__LABEL190:
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	ld (ix-3), a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL193
	ld a, (ix-3)
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	add a, (ix+13)
	push af
	call _SetCell
__LABEL193:
__LABEL191:
	inc (ix-2)
__LABEL187:
	ld a, (ix-2)
	push af
	ld a, (ix+11)
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL190
__LABEL189:
__LABEL186:
	dec (ix-1)
__LABEL182:
	ld a, (ix-1)
	ld h, (ix+5)
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL185
__LABEL184:
	xor a
	jp _DisplaceCollideRect__leave
__LABEL166:
	xor a
	jp _DisplaceCollideRect__leave
__LABEL167:
__LABEL139:
__LABEL111:
__LABEL83:
_DisplaceCollideRect__leave:
	exx
	ld hl, 12
	jp __EXIT_FUNCTION
_FillRect:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL194
__LABEL197:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL199
__LABEL202:
	ld a, (ix+13)
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
__LABEL203:
	inc (ix-1)
__LABEL199:
	ld a, (ix-1)
	push af
	ld a, (ix+7)
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL202
__LABEL201:
__LABEL198:
	inc (ix-2)
__LABEL194:
	ld a, (ix-2)
	push af
	ld a, (ix+11)
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL197
__LABEL196:
_FillRect__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_SetCell:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _workingCells
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL204
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	sub (hl)
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL206
	ld a, (ix+5)
	push af
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _ops
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL207
__LABEL206:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _ops
	call __ARRAY
	ld (hl), 0
__LABEL207:
	jp __LABEL205
__LABEL204:
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	sub (ix+9)
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL209
	ld hl, _currentOp
	inc (hl)
	ld a, (ix+5)
	push af
	ld a, (_currentOp)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _ops
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix+7)
	push af
	ld a, (_currentOp)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _ops
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix+9)
	push af
	ld a, (_currentOp)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _ops
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _workingCells
	call __ARRAY
	ld a, (_currentOp)
	ld (hl), a
__LABEL209:
__LABEL205:
_SetCell__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_SetSymbol:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld a, (ix+5)
	push af
	ld h, 3
	pop af
	and h
	ld (ix-1), a
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL210
	xor a
	ld (_workingSymbol.__DATA__ + 2), a
	jp __LABEL211
__LABEL210:
	ld a, (ix-1)
	inc a
	ld (_workingSymbol.__DATA__ + 2), a
__LABEL211:
	ld a, (ix+5)
	srl a
	srl a
	push af
	ld h, 3
	pop af
	and h
	ld (ix-1), a
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL212
	xor a
	ld (_workingSymbol.__DATA__ + 0), a
	jp __LABEL213
__LABEL212:
	ld a, (ix-1)
	inc a
	ld (_workingSymbol.__DATA__ + 0), a
__LABEL213:
	ld a, (ix+7)
	push af
	ld h, 3
	pop af
	and h
	ld (ix-1), a
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL214
	xor a
	ld (_workingSymbol.__DATA__ + 3), a
	jp __LABEL215
__LABEL214:
	ld a, (ix-1)
	inc a
	ld (_workingSymbol.__DATA__ + 3), a
__LABEL215:
	ld a, (ix+7)
	srl a
	srl a
	push af
	ld h, 3
	pop af
	and h
	ld (ix-1), a
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL216
	xor a
	ld (_workingSymbol.__DATA__ + 1), a
	jp __LABEL217
__LABEL216:
	ld a, (ix-1)
	inc a
	ld (_workingSymbol.__DATA__ + 1), a
__LABEL217:
_SetSymbol__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_SetLevel:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+5)
	ld (_workingLevel), a
_SetLevel__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_SetScore:
	push ix
	ld ix, 0
	add ix, sp
	ld l, (ix+4)
	ld h, (ix+5)
	ld (_workingScore), hl
_SetScore__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_UpdateScreen:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	xor a
	ld hl, (_currentOp - 1)
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL219
	ld (ix-3), 1
	jp __LABEL220
__LABEL223:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _ops
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL226
	ld a, (ix-3)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _ops
	call __ARRAY
	ld a, (hl)
	ld (ix-2), a
	ld a, (ix-3)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _ops
	call __ARRAY
	ld a, (hl)
	ld (ix-5), a
	push af
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-2)
	ld l, a
	ld h, 0
	inc hl
	inc hl
	ld a, l
	push af
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ld de, 7
	add hl, de
	ld a, l
	call PRINT_AT
	ld a, (ix-5)
	add a, 144
	push af
	ld hl, 1
	call CHR
	ld a, 1
	call __PRINTSTR
	call PRINT_EOL
__LABEL226:
__LABEL224:
	inc (ix-3)
__LABEL220:
	ld a, (ix-3)
	push af
	ld a, (_currentOp)
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL223
__LABEL222:
__LABEL219:
	ld (ix-2), 1
	jp __LABEL227
__LABEL230:
	ld (ix-1), 1
	jp __LABEL232
__LABEL235:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenSymbol
	call __ARRAY
	ld a, (hl)
	ld (ix-4), a
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _workingSymbol
	call __ARRAY
	ld a, (hl)
	ld (ix-5), a
	ld a, (ix-4)
	sub (ix-5)
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL238
	ld a, (ix-5)
	push af
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenSymbol
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-2)
	ld l, a
	ld h, 0
	ld de, 8
	add hl, de
	ld a, l
	push af
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ld de, 18
	add hl, de
	ld a, l
	call PRINT_AT
	ld a, (ix-5)
	add a, 144
	push af
	ld hl, 1
	call CHR
	ld a, 1
	call __PRINTSTR
	call PRINT_EOL
__LABEL238:
__LABEL236:
	inc (ix-1)
__LABEL232:
	ld a, (ix-1)
	push af
	ld a, 4
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL235
__LABEL234:
__LABEL231:
	inc (ix-2)
__LABEL227:
	ld a, (ix-2)
	push af
	ld a, 2
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL230
__LABEL229:
	ld de, (_screenScore)
	ld hl, (_workingScore)
	or a
	sbc hl, de
	ld a, h
	or l
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL240
	ld hl, (_workingScore)
	ld (_screenScore), hl
	ld a, 5
	push af
	ld a, 19
	call PRINT_AT
	ld a, 4
	push af
	ld hl, __LABEL241
	call __LOADSTR
	push hl
	ld hl, (_screenScore)
	ld de, 0
	call __U32TOFREG
	call __STR_FAST
	push hl
	call _getPaddedText
	ld a, 1
	call __PRINTSTR
	call PRINT_EOL
__LABEL240:
	ld hl, (_workingLevel - 1)
	ld a, (_screenLevel)
	sub h
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL243
	ld a, (_workingLevel)
	ld (_screenLevel), a
	ld a, 14
	push af
	ld a, 19
	call PRINT_AT
	ld a, 2
	push af
	ld hl, __LABEL241
	call __LOADSTR
	push hl
	ld a, (_screenLevel)
	call __U8TOFREG
	call __STR_FAST
	push hl
	call _getPaddedText
	ld a, 1
	call __PRINTSTR
	call PRINT_EOL
__LABEL243:
	xor a
	ld (_currentOp), a
#line 443
		di
		ld de, _workingCells.__DATA__
		ld a, 0
		ld (de), a
		inc de
		ld hl, _workingCells.__DATA__
		ld bc, 199
		ldir
		ei
#line 452
_UpdateScreen__leave:
	ld sp, ix
	pop ix
	ret
_ExpandPiece:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld (ix-2), 1
	jp __LABEL244
__LABEL247:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tetrisPieces
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	push af
	ld h, 128
	pop af
	and h
	push af
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 64
	pop af
	and h
	push af
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 32
	pop af
	and h
	push af
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 16
	pop af
	and h
	push af
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 3
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 8
	pop af
	and h
	push af
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 4
	pop af
	and h
	push af
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 2
	pop af
	and h
	push af
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 1
	pop af
	and h
	push af
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 3
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tetrisPieces
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	push af
	ld h, 128
	pop af
	and h
	push af
	ld hl, 2
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 64
	pop af
	and h
	push af
	ld hl, 2
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 32
	pop af
	and h
	push af
	ld hl, 2
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 16
	pop af
	and h
	push af
	ld hl, 2
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 3
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 8
	pop af
	and h
	push af
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 4
	pop af
	and h
	push af
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 2
	pop af
	and h
	push af
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld h, 1
	pop af
	and h
	push af
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 3
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld (hl), 0
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld (hl), 0
__LABEL248:
	inc (ix-2)
__LABEL244:
	ld a, (ix-2)
	push af
	ld a, 4
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL247
__LABEL246:
	ld (ix-4), 1
	jp __LABEL249
__LABEL252:
	ld (ix-2), 1
	jp __LABEL254
__LABEL257:
	ld (ix-3), 1
	jp __LABEL259
__LABEL262:
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-3)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	ld a, (hl)
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL265
	ld hl, 0
	push hl
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld a, (hl)
	ld h, (ix-2)
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL267
	ld a, (ix-2)
	push af
	ld hl, 0
	push hl
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	pop af
	ld (hl), a
__LABEL267:
	ld hl, 1
	push hl
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld a, (hl)
	ld h, (ix-3)
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL269
	ld a, (ix-3)
	push af
	ld hl, 1
	push hl
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	pop af
	ld (hl), a
__LABEL269:
__LABEL265:
__LABEL263:
	inc (ix-3)
__LABEL259:
	ld a, (ix-3)
	push af
	ld a, 4
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL262
__LABEL261:
__LABEL258:
	inc (ix-2)
__LABEL254:
	ld a, (ix-2)
	push af
	ld a, 4
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL257
__LABEL256:
__LABEL253:
	inc (ix-4)
__LABEL249:
	ld a, (ix-4)
	push af
	ld a, 4
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL252
__LABEL251:
_ExpandPiece__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_WillCollide:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	ld a, (ix+9)
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL271
	ld a, (ix+5)
	add a, (ix+9)
	ld (ix-1), a
	push af
	ld h, 1
	pop af
	call __LTI8
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix-1)
	push af
	ld hl, 1
	push hl
	ld a, (ix+13)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld a, 11
	sub (hl)
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	pop de
	or d
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL273
	ld a, 1
	jp _WillCollide__leave
__LABEL273:
__LABEL271:
	ld (ix-2), 1
	jp __LABEL274
__LABEL277:
	ld a, (ix-2)
	add a, (ix+7)
	add a, (ix+11)
	dec a
	ld (ix-5), a
	push af
	ld h, 1
	pop af
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp nz, __LABEL278
__LABEL280:
	ld a, (ix-2)
	add a, (ix+11)
	ld (ix-4), a
	ld (ix-1), 1
	jp __LABEL281
__LABEL284:
	ld a, (ix-1)
	add a, (ix+5)
	add a, (ix+9)
	dec a
	ld (ix-6), a
	ld a, (ix-1)
	add a, (ix+9)
	ld (ix-3), a
	ld a, (ix+15)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	ld a, (hl)
	push af
	ld a, (ix-3)
	push af
	ld h, 1
	pop af
	call __LTI8
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix-3)
	push af
	ld a, 4
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	pop de
	or d
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix-4)
	push af
	ld h, 1
	pop af
	call __LTI8
	call __NORMALIZE_BOOLEAN
	pop de
	or d
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix-4)
	push af
	ld a, 4
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	pop de
	or d
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix+13)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-4)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-3)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	ld a, (hl)
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	pop de
	or d
	call __NORMALIZE_BOOLEAN
	ld h, a
	pop af
	or a
	jr z, __LABEL533
	ld a, h
__LABEL533:
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL287
	ld a, (ix-6)
	push af
	ld h, 1
	pop af
	call __LTI8
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix-6)
	push af
	ld a, 10
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	pop de
	or d
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix-5)
	push af
	ld a, 20
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	pop de
	or d
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	or (hl)
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL289
	ld a, 1
	jp _WillCollide__leave
__LABEL289:
__LABEL287:
__LABEL285:
	inc (ix-1)
__LABEL281:
	ld a, (ix-1)
	push af
	ld a, 4
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL284
__LABEL283:
__LABEL278:
	inc (ix-2)
__LABEL274:
	ld a, (ix-2)
	push af
	ld a, 4
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL277
__LABEL276:
	xor a
_WillCollide__leave:
	exx
	ld hl, 12
	jp __EXIT_FUNCTION
_DrawFigure:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld (ix-2), 1
	jp __LABEL290
__LABEL293:
	ld a, (ix-2)
	add a, (ix+7)
	dec a
	ld (ix-4), a
	push af
	ld h, 1
	pop af
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp nz, __LABEL294
__LABEL296:
	ld (ix-1), 1
	jp __LABEL297
__LABEL300:
	ld a, (ix-1)
	add a, (ix+5)
	dec a
	ld (ix-3), a
	push af
	ld h, 1
	pop af
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp nz, __LABEL301
__LABEL303:
	ld a, (ix+9)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL305
	ld a, (ix+11)
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-3)
	push af
	call _SetCell
__LABEL305:
__LABEL301:
	inc (ix-1)
__LABEL297:
	ld a, (ix-1)
	push af
	ld a, 4
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL300
__LABEL299:
__LABEL294:
	inc (ix-2)
__LABEL290:
	ld a, (ix-2)
	push af
	ld a, 4
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL293
__LABEL292:
_DrawFigure__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_FindTop:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld (ix-1), 20
	jp __LABEL306
__LABEL309:
	ld (ix-3), 1
	ld (ix-2), 1
	jp __LABEL311
__LABEL314:
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL317
	ld (ix-3), 0
	jp __LABEL313
__LABEL317:
__LABEL315:
	inc (ix-2)
__LABEL311:
	ld a, (ix-2)
	push af
	ld a, 10
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL314
__LABEL313:
	ld a, (ix-3)
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL319
	ld a, (ix-1)
	sub 20
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL321
	xor a
	jp _FindTop__leave
__LABEL321:
	ld a, (ix-1)
	inc a
	jp _FindTop__leave
__LABEL319:
__LABEL310:
	dec (ix-1)
__LABEL306:
	ld a, (ix-1)
	push af
	ld h, 1
	pop af
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL309
__LABEL308:
	xor a
_FindTop__leave:
	ld sp, ix
	pop ix
	ret
_EraseLines:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	call _FindTop
	ld (ix-1), a
	ld (ix-4), 3
	jp __LABEL322
__LABEL325:
	ld (ix-2), 1
	ld a, (ix-4)
	add a, (ix+5)
	ld (ix-3), a
	ld h, (ix-1)
	call __LTI8
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix-3)
	push af
	ld a, 20
	pop hl
	call __LTI8
	call __NORMALIZE_BOOLEAN
	pop de
	or d
	call __NORMALIZE_BOOLEAN
	or a
	jp nz, __LABEL326
__LABEL328:
	ld (ix-5), 1
	jp __LABEL329
__LABEL332:
	ld a, (ix-3)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL335
	ld (ix-2), 0
	jp __LABEL331
__LABEL335:
__LABEL333:
	inc (ix-5)
__LABEL329:
	ld a, (ix-5)
	push af
	ld a, 10
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL332
__LABEL331:
	ld a, (ix-2)
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL337
	inc (ix+5)
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-3)
	dec a
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _MoveRect
	call _UpdateScreen
	ld hl, 233
	push hl
	ld hl, 82
	call __BEEPER
	inc (ix-6)
__LABEL337:
__LABEL326:
	dec (ix-4)
__LABEL322:
	ld a, (ix-4)
	push af
	ld h, 0
	pop af
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL325
__LABEL324:
	ld a, (ix-6)
_EraseLines__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_RunTetris:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -19
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 18
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL534
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL535
	ld bc, 1
	ldir
	ld a, (_playedTetrisMusic)
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL339
	ld hl, 715
	push hl
	ld hl, 205
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 806
	push hl
	ld hl, 418
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 964
	push hl
	ld hl, 72
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 806
	push hl
	ld hl, 86
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 908
	push hl
	ld hl, 84
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 964
	push hl
	ld hl, 28
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 1086
	push hl
	ld hl, 25
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 1223
	push hl
	ld hl, 133
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 1642
	push hl
	ld hl, 95
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 964
	push hl
	ld hl, 72
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 806
	push hl
	ld hl, 95
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 1086
	push hl
	ld hl, 64
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 964
	push hl
	ld hl, 72
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 1223
	push hl
	ld hl, 133
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 1642
	push hl
	ld hl, 99
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 1460
	push hl
	ld hl, 107
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 1460
	push hl
	ld hl, 53
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 1297
	push hl
	ld hl, 54
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 1086
	push hl
	ld hl, 64
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 1223
	push hl
	ld hl, 57
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 1297
	push hl
	ld hl, 59
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 1460
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 1642
	push hl
	ld hl, 99
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 1642
	push hl
	ld hl, 95
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 1642
	push hl
	ld hl, 99
	call __BEEPER
	ld hl, 30
	call __PAUSE
	ld a, 1
	ld (_playedTetrisMusic), a
__LABEL339:
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	inc a
	ld h, 5
	call __MUL8_FAST
	ld h, a
	ld a, 51
	sub h
	ld (ix-1), a
	ld de, __LABEL4
	ld bc, -19
	call __PSTORE_STR
	call RND
	push bc
	push de
	push af
	ld a, 083h
	ld de, 00060h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 1
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-11), a
	call RND
	push bc
	push de
	push af
	ld a, 083h
	ld de, 00060h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 1
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-11), a
	ld a, (ix+5)
	dec a
	ld h, 10
	call __MODU8_FAST
	add a, 5
	ld (ix-15), a
	ld hl, 908
	push hl
	ld hl, 46
	call __BEEPER
	ld hl, 806
	push hl
	ld hl, 51
	call __BEEPER
	ld hl, 673
	push hl
	ld hl, 61
	call __BEEPER
	ld hl, 596
	push hl
	ld hl, 69
	call __BEEPER
	call RND
	push bc
	push de
	push af
	ld a, 083h
	ld de, 00060h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 1
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-11), a
__LABEL340:
	ld a, (ix-2)
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL341
	ld a, (ix-3)
	sub 255
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL343
	ld (ix-4), 1
	ld a, (ix-11)
	ld (ix-3), a
	call RND
	push bc
	push de
	push af
	ld a, 083h
	ld de, 00060h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 1
	pop bc
	add hl, bc
	ex de, hl
	pop bc
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-11), a
	ld a, (ix-3)
	push af
	call _ExpandPiece
	ld a, (_expandedSize.__DATA__ + 0)
	neg
	ld (ix-5), a
	ld (ix-6), 4
	ld hl, 1
	push hl
	ld hl, 0
	push hl
	ld a, (ix-11)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tetrisPieces
	call __ARRAY
	ld a, (hl)
	ld b, 4
__LABEL536:
	srl a
	djnz __LABEL536
	push af
	ld hl, 0
	push hl
	ld hl, 0
	push hl
	ld a, (ix-11)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tetrisPieces
	call __ARRAY
	ld a, (hl)
	ld b, 4
__LABEL537:
	srl a
	djnz __LABEL537
	push af
	call _SetSymbol
__LABEL343:
	ld a, (ix-4)
	push af
	ld a, (ix-4)
	push af
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _WillCollide
	or a
	jp z, __LABEL344
	ld a, (ix-5)
	push af
	ld h, 1
	pop af
	call __LTI8
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL346
	ld (ix-2), 1
	jp __LABEL347
__LABEL346:
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	ld a, (ix-5)
	push af
	call _EraseLines
	ld (ix-7), a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL348
	ld a, (ix-7)
	dec a
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL350
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	jp __LABEL351
__LABEL350:
	ld a, (ix-7)
	sub 2
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL352
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	inc hl
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	jp __LABEL353
__LABEL352:
	ld a, (ix-7)
	sub 3
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL354
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, 5
	add hl, de
	ld (ix-17), l
	ld (ix-16), h
	jp __LABEL355
__LABEL354:
	ld a, (ix-7)
	sub 4
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL357
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, 10
	add hl, de
	ld (ix-17), l
	ld (ix-16), h
__LABEL357:
__LABEL355:
__LABEL353:
__LABEL351:
	ld a, (ix-14)
	add a, (ix-7)
	ld (ix-14), a
	sub (ix-15)
	ccf
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL359
	ld a, (ix+5)
	sub 99
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL361
	ld a, 1
	jp _RunTetris__leave
__LABEL361:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL363
	ld hl, 1742
	push hl
	ld hl, 16
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 1297
	push hl
	ld hl, 15
	call __BEEPER
	ld hl, 3
	call __PAUSE
	ld hl, 1152
	push hl
	ld hl, 11
	call __BEEPER
	ld hl, 3
	call __PAUSE
	ld hl, 856
	push hl
	ld hl, 139
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 1297
	push hl
	ld hl, 26
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 964
	push hl
	ld hl, 14
	call __BEEPER
	ld hl, 3
	call __PAUSE
	ld hl, 1023
	push hl
	ld hl, 20
	call __BEEPER
	ld hl, 3
	call __PAUSE
	ld hl, 759
	push hl
	ld hl, 156
	call __BEEPER
	ld hl, 2
	call __PAUSE
	ld hl, 964
	push hl
	ld hl, 14
	call __BEEPER
	ld hl, 3
	call __PAUSE
	ld hl, 759
	push hl
	ld hl, 27
	call __BEEPER
	ld hl, 3
	call __PAUSE
	ld hl, 856
	push hl
	ld hl, 24
	call __BEEPER
	ld hl, 3
	call __PAUSE
	ld hl, 673
	push hl
	ld hl, 30
	call __BEEPER
	ld hl, 3
	call __PAUSE
	ld hl, 759
	push hl
	ld hl, 27
	call __BEEPER
	ld hl, 3
	call __PAUSE
	ld hl, 856
	push hl
	ld hl, 24
	call __BEEPER
	ld hl, 4
	call __PAUSE
	ld hl, 634
	push hl
	ld hl, 219
	call __BEEPER
	ld hl, 25
	call __PAUSE
	call _ShowCurtain
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL363:
	inc (ix+5)
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	inc a
	ld h, 5
	call __MUL8_FAST
	ld h, a
	ld a, 51
	sub h
	ld (ix-1), a
	ld (ix-14), 0
	ld a, (ix+5)
	dec a
	ld h, 10
	call __MODU8_FAST
	add a, 5
	ld (ix-15), a
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, 50
	add hl, de
	ld (ix-17), l
	ld (ix-16), h
	ld a, (ix+5)
	push af
	call _SetLevel
	ld hl, 908
	push hl
	ld hl, 46
	call __BEEPER
	ld hl, 596
	push hl
	ld hl, 69
	call __BEEPER
__LABEL359:
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	call _UpdateScreen
	jp __LABEL349
__LABEL348:
	ld hl, 2949
	push hl
	ld hl, 6
	call __BEEPER
__LABEL349:
	ld (ix-3), 255
__LABEL347:
	jp __LABEL345
__LABEL344:
	xor a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	inc (ix-5)
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL364:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL365
	call INKEY
	ld d, h
	ld e, l
	ld bc, -19
	call __PSTORE_STR2
	dec (ix-13)
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	ld de, __LABEL4
	pop hl
	xor a
	call __STRNE
	call __NORMALIZE_BOOLEAN
	ld h, (ix-8)
	or a
	jr z, __LABEL538
	ld a, h
__LABEL538:
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix-13)
	push af
	ld a, 1
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	ld h, a
	pop af
	or a
	jr z, __LABEL539
	ld a, h
__LABEL539:
	call __NORMALIZE_BOOLEAN
	or a
	jp nz, __LABEL364
__LABEL366:
	ld (ix-8), 0
__LABEL367:
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	ld de, __LABEL4
	pop hl
	xor a
	call __STRNE
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL369
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	ld de, __LABEL370
	pop hl
	xor a
	call __STREQ
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL371
	ld a, (ix-4)
	push af
	ld a, (ix-4)
	push af
	xor a
	push af
	ld a, 255
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _WillCollide
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL374
	xor a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	dec (ix-6)
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	call _UpdateScreen
	ld (ix-8), 1
	ld (ix-13), 70
__LABEL374:
	jp __LABEL372
__LABEL371:
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	ld de, __LABEL375
	pop hl
	xor a
	call __STREQ
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL376
	ld a, (ix-4)
	push af
	ld a, (ix-4)
	push af
	xor a
	push af
	ld a, 1
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _WillCollide
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL379
	xor a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	inc (ix-6)
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	call _UpdateScreen
	ld (ix-8), 1
	ld (ix-13), 70
__LABEL379:
	jp __LABEL377
__LABEL376:
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	ld de, __LABEL380
	pop hl
	xor a
	call __STREQ
	call __NORMALIZE_BOOLEAN
	or a
	jp nz, __LABEL365
__LABEL381:
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	ld de, __LABEL25
	pop hl
	xor a
	call __STREQ
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL384
	ld a, (ix-4)
	inc a
	ld (ix-12), a
	push af
	ld a, 4
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL386
	ld (ix-12), 1
__LABEL386:
	ld a, (ix-12)
	push af
	ld a, (ix-4)
	push af
	xor a
	push af
	xor a
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _WillCollide
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL388
	xor a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	ld a, (ix-12)
	ld (ix-4), a
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	call _UpdateScreen
	ld (ix-8), 1
	ld (ix-13), 200
__LABEL388:
__LABEL384:
__LABEL382:
__LABEL377:
__LABEL372:
__LABEL369:
	jp __LABEL364
__LABEL365:
__LABEL345:
	jp __LABEL340
__LABEL341:
	ld hl, 2949
	push hl
	ld hl, 28
	call __BEEPER
	ld hl, 3314
	push hl
	ld hl, 25
	call __BEEPER
	ld hl, 3947
	push hl
	ld hl, 21
	call __BEEPER
	ld hl, 4434
	push hl
	ld hl, 19
	call __BEEPER
	xor a
_RunTetris__leave:
	ex af, af'
	exx
	ld l, (ix-19)
	ld h, (ix-18)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_InitIntro:
	push ix
	ld ix, 0
	add ix, sp
	ld a, 1
	push af
	ld a, 2
	push af
	ld a, 2
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 2
	push af
	ld a, 3
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 2
	push af
	ld a, 7
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 2
	push af
	ld a, 8
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 3
	push af
	ld a, 1
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 3
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 3
	push af
	ld a, 6
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 3
	push af
	ld a, 9
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 4
	push af
	ld a, 1
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 4
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 4
	push af
	ld a, 6
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 4
	push af
	ld a, 9
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 5
	push af
	ld a, 2
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 5
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 5
	push af
	ld a, 7
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 5
	push af
	ld a, 8
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 5
	push af
	ld a, 9
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 6
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 6
	push af
	ld a, 9
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 7
	push af
	ld a, 1
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 7
	push af
	ld a, 2
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 7
	push af
	ld a, 3
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 7
	push af
	ld a, 6
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 7
	push af
	ld a, 7
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 7
	push af
	ld a, 8
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 3
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 8
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 9
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 2
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 7
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 11
	push af
	ld a, 3
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 11
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 11
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 11
	push af
	ld a, 8
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 11
	push af
	ld a, 9
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 11
	push af
	ld a, 10
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 12
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 12
	push af
	ld a, 10
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 13
	push af
	ld a, 2
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 13
	push af
	ld a, 3
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 13
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 13
	push af
	ld a, 7
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 13
	push af
	ld a, 8
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 13
	push af
	ld a, 9
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 15
	push af
	ld a, 1
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 15
	push af
	ld a, 3
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 15
	push af
	ld a, 6
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 15
	push af
	ld a, 9
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 16
	push af
	ld a, 1
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 16
	push af
	ld a, 3
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 16
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 16
	push af
	ld a, 6
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 16
	push af
	ld a, 8
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 16
	push af
	ld a, 9
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 17
	push af
	ld a, 1
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 17
	push af
	ld a, 3
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 17
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 17
	push af
	ld a, 6
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 17
	push af
	ld a, 9
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	push af
	ld a, 1
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	push af
	ld a, 3
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	push af
	ld a, 6
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	push af
	ld a, 9
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 8
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 9
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 10
	push af
	call _SetCell
	call _UpdateScreen
_InitIntro__leave:
	ld sp, ix
	pop ix
	ret
_InvertIntro:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld (ix-3), 0
	jp __LABEL389
__LABEL392:
	ld a, (ix-3)
	inc a
	ld (ix-1), a
	jp __LABEL394
__LABEL397:
	ld a, 20
	sub (ix-3)
	push af
	ld a, (ix-1)
	push af
	call _InvertCell
	call _UpdateScreen
	ld hl, 1
	call __PAUSE
__LABEL398:
	inc (ix-1)
__LABEL394:
	ld a, (ix-1)
	push af
	ld a, 10
	sub (ix-3)
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL397
__LABEL396:
	ld a, 19
	sub (ix-3)
	ld (ix-2), a
	jp __LABEL399
__LABEL402:
	ld a, (ix-2)
	push af
	ld a, 10
	sub (ix-3)
	push af
	call _InvertCell
	call _UpdateScreen
	ld hl, 1
	call __PAUSE
__LABEL403:
	dec (ix-2)
__LABEL399:
	ld a, (ix-2)
	push af
	ld a, (ix-3)
	inc a
	ld h, a
	pop af
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL402
__LABEL401:
	ld a, 9
	sub (ix-3)
	ld (ix-1), a
	jp __LABEL404
__LABEL407:
	ld a, (ix-3)
	inc a
	push af
	ld a, (ix-1)
	push af
	call _InvertCell
	call _UpdateScreen
	ld hl, 1
	call __PAUSE
__LABEL408:
	dec (ix-1)
__LABEL404:
	ld a, (ix-1)
	push af
	ld a, (ix-3)
	inc a
	ld h, a
	pop af
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL407
__LABEL406:
	ld a, (ix-3)
	add a, 2
	ld (ix-2), a
	jp __LABEL409
__LABEL412:
	ld a, (ix-2)
	push af
	ld a, (ix-3)
	inc a
	push af
	call _InvertCell
	call _UpdateScreen
	ld hl, 1
	call __PAUSE
__LABEL413:
	inc (ix-2)
__LABEL409:
	ld a, (ix-2)
	push af
	ld a, 19
	sub (ix-3)
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL412
__LABEL411:
__LABEL393:
	inc (ix-3)
__LABEL389:
	ld a, (ix-3)
	push af
	ld a, 4
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL392
__LABEL391:
	ld hl, 30
	call __PAUSE
_InvertIntro__leave:
	ld sp, ix
	pop ix
	ret
_ShowChar:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -8
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 7
	ld d, h
	ld e, l
	inc de
	ldir
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	ld hl, 0
	push hl
	ld hl, 0
	push hl
	xor a
	call __STRSLICE
	ld a, 1
	call __ASC
	ld l, a
	ld h, 0
	ld (ix-8), l
	ld (ix-7), h
	ld l, (ix-8)
	ld h, (ix-7)
	add hl, hl
	add hl, hl
	add hl, hl
	ex de, hl
	ld hl, (_chars)
	add hl, de
	ld (ix-8), l
	ld (ix-7), h
	xor a
	push af
	ld a, 8
	push af
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 2
	push af
	call _FillRect
	ld a, (ix+7)
	push af
	ld h, 5
	pop af
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL414
	ld a, (ix+7)
	add a, a
	ld h, a
	ld a, 10
	sub h
	ld (ix-1), a
	ld a, (ix+7)
	ld (ix-2), a
	ld (ix-5), 1
	jp __LABEL416
__LABEL419:
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld a, (ix-5)
	dec a
	ld l, a
	ld h, 0
	ex de, hl
	pop hl
	add hl, de
	ld a, (hl)
	ld (ix-6), a
	ld a, (ix-2)
	ld (ix-4), a
	jp __LABEL421
__LABEL424:
	ld a, 8
	sub (ix-4)
	ld h, 1
	or a
	ld b, a
	ld a, h
	jr z, __LABEL541
__LABEL540:
	add a, a
	djnz __LABEL540
__LABEL541:
	ld (ix-3), a
	ld a, (ix-6)
	and (ix-3)
	jp z, __LABEL427
	ld a, 1
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-4)
	inc a
	push af
	call _SetCell
__LABEL427:
__LABEL425:
	inc (ix-4)
__LABEL421:
	ld a, (ix-4)
	push af
	ld a, (ix-2)
	add a, (ix-1)
	dec a
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL424
__LABEL423:
__LABEL420:
	inc (ix-5)
__LABEL416:
	ld a, (ix-5)
	push af
	ld a, 8
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL419
__LABEL418:
	jp __LABEL415
__LABEL414:
	ld a, (ix+7)
	push af
	ld a, 5
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL429
	ld a, 10
	sub (ix+7)
	ld (ix+7), a
	add a, a
	ld h, a
	ld a, 10
	sub h
	ld (ix-1), a
	ld a, (ix+7)
	ld (ix-2), a
	ld (ix-5), 1
	jp __LABEL430
__LABEL433:
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld a, (ix-5)
	dec a
	ld l, a
	ld h, 0
	ex de, hl
	pop hl
	add hl, de
	ld a, (hl)
	ld (ix-6), a
	ld a, (ix-2)
	add a, (ix-1)
	dec a
	ld (ix-4), a
	jp __LABEL435
__LABEL438:
	ld a, (ix-4)
	dec a
	ld h, 1
	or a
	ld b, a
	ld a, h
	jr z, __LABEL543
__LABEL542:
	add a, a
	djnz __LABEL542
__LABEL543:
	ld (ix-3), a
	ld a, (ix-6)
	and (ix-3)
	jp z, __LABEL441
	ld a, 1
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-4)
	inc a
	push af
	call _SetCell
__LABEL441:
__LABEL439:
	dec (ix-4)
__LABEL435:
	ld a, (ix-4)
	cp (ix-2)
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL438
__LABEL437:
__LABEL434:
	inc (ix-5)
__LABEL430:
	ld a, (ix-5)
	push af
	ld a, 8
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL433
__LABEL432:
__LABEL429:
__LABEL415:
	ld hl, 2
	call __PAUSE
_ShowChar__leave:
	ex af, af'
	exx
	ld l, (ix+4)
	ld h, (ix+5)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_ShowTetris:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL544
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL545
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 19
	push af
	ld a, 4
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 19
	push af
	ld a, 10
	push af
	ld a, 6
	push af
	call _FillRect
__LABEL442:
	ld a, (ix-1)
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL443
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 6
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, (ix-4)
	push af
	ld hl, __LABEL444
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-4)
	add a, (ix-3)
	ld (ix-4), a
	dec a
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix-4)
	sub 9
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	pop de
	or d
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL446
	ld a, (ix-3)
	neg
	ld (ix-3), a
__LABEL446:
	call _UpdateScreen
	ld (ix-2), 9
	jp __LABEL447
__LABEL450:
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-2)
	inc a
	push af
	ld a, (ix-2)
	push af
	ld a, 6
	push af
	ld a, 4
	push af
	call _MoveRect
	ld a, (ix-4)
	push af
	ld hl, __LABEL444
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-4)
	add a, (ix-3)
	ld (ix-4), a
	dec a
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix-4)
	sub 9
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	pop de
	or d
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL453
	ld a, (ix-3)
	neg
	ld (ix-3), a
__LABEL453:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL454:
	call _Frames
	push hl
	ld de, 30
	pop hl
	or a
	sbc hl, de
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL455
	ld a, (ix-4)
	push af
	ld hl, __LABEL444
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-4)
	add a, (ix-3)
	ld (ix-4), a
	dec a
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	push af
	ld a, (ix-4)
	sub 9
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	pop de
	or d
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL457
	ld a, (ix-3)
	neg
	ld (ix-3), a
__LABEL457:
	call _UpdateScreen
	call INKEY
	ld d, h
	ld e, l
	ld bc, -6
	call __PSTORE_STR2
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL4
	pop hl
	xor a
	call __STRNE
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL459
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL460
	pop hl
	xor a
	call __STREQ
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL461
	ld hl, _level
	inc (hl)
	ld a, 99
	ld hl, (_level - 1)
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL464
	ld a, 1
	ld (_level), a
__LABEL464:
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
	jp __LABEL462
__LABEL461:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL380
	pop hl
	xor a
	call __STREQ
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL465
	ld hl, _level
	dec (hl)
	ld a, (_level)
	cp 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL468
	ld a, 99
	ld (_level), a
__LABEL468:
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
	jp __LABEL466
__LABEL465:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL370
	pop hl
	xor a
	call __STREQ
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL469
	ld a, 2
	jp _ShowTetris__leave
__LABEL469:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL375
	pop hl
	xor a
	call __STREQ
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL471
	ld a, 1
	jp _ShowTetris__leave
__LABEL471:
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld de, __LABEL25
	pop hl
	xor a
	call __STREQ
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL474
	ld a, 3
	jp _ShowTetris__leave
__LABEL474:
__LABEL472:
__LABEL470:
__LABEL466:
__LABEL462:
__LABEL459:
	jp __LABEL454
__LABEL455:
__LABEL451:
	inc (ix-2)
__LABEL447:
	ld a, (ix-2)
	push af
	ld a, 16
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL450
__LABEL449:
	xor a
	push af
	ld a, 18
	push af
	ld a, 17
	push af
	ld a, 6
	push af
	ld a, 4
	push af
	call _FillRect
	jp __LABEL442
__LABEL443:
_ShowTetris__leave:
	ex af, af'
	exx
	ld l, (ix-6)
	ld h, (ix-5)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	ret
_SelectGame:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld a, 1
	ld (_level), a
	ld a, 1
	push af
	call _SetLevel
	call _UpdateScreen
__LABEL475:
	ld a, (ix-1)
	sub 3
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL476
	ld a, (_game)
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL477
	call _ShowTetris
	ld (ix-1), a
	jp __LABEL478
__LABEL477:
	ld a, (_game)
	dec a
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp nz, __LABEL480
__LABEL479:
	ld a, (_game)
	sub 2
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp nz, __LABEL482
__LABEL481:
	ld a, (_game)
	sub 3
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
__LABEL484:
__LABEL482:
__LABEL480:
__LABEL478:
	ld a, (ix-1)
	dec a
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL485
	ld hl, _game
	inc (hl)
	ld a, 3
	ld hl, (_game - 1)
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL488
	xor a
	ld (_game), a
__LABEL488:
	jp __LABEL486
__LABEL485:
	ld a, (ix-1)
	sub 2
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL489
	ld hl, _game
	dec (hl)
	ld a, 3
	ld hl, (_game - 1)
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL492
	ld a, 3
	ld (_game), a
__LABEL492:
	jp __LABEL490
__LABEL489:
	ld a, (ix-1)
	sub 3
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL494
	ld a, (_game)
	sub 1
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL496
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	call _UpdateScreen
	ld a, (_level)
	push af
	call _RunTetris
	jp _SelectGame__leave
__LABEL496:
__LABEL494:
__LABEL490:
__LABEL486:
	jp __LABEL475
__LABEL476:
_SelectGame__leave:
	ld sp, ix
	pop ix
	ret
_ShowCurtain:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld (ix-2), 1
	jp __LABEL497
__LABEL500:
	ld (ix-1), 1
	jp __LABEL502
__LABEL505:
	ld a, 1
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
__LABEL506:
	inc (ix-1)
__LABEL502:
	ld a, (ix-1)
	push af
	ld a, 10
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL505
__LABEL504:
	call _UpdateScreen
	ld hl, 11888
	push hl
	ld hl, 0
	call __BEEPER
__LABEL501:
	inc (ix-2)
__LABEL497:
	ld a, (ix-2)
	push af
	ld a, 20
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL500
__LABEL499:
_ShowCurtain__leave:
	ld sp, ix
	pop ix
	ret
_ShowDeath:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld (ix-2), 1
	jp __LABEL507
__LABEL510:
	ld (ix-1), 1
	jp __LABEL512
__LABEL515:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _dead
	call __ARRAY
	ld a, (hl)
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
__LABEL516:
	inc (ix-1)
__LABEL512:
	ld a, (ix-1)
	push af
	ld a, 10
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL515
__LABEL514:
__LABEL511:
	inc (ix-2)
__LABEL507:
	ld a, (ix-2)
	push af
	ld a, 20
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL510
__LABEL509:
	call _UpdateScreen
	ld hl, 673
	push hl
	ld hl, 51
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 759
	push hl
	ld hl, 45
	call __BEEPER
	ld hl, 806
	push hl
	ld hl, 42
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 759
	push hl
	ld hl, 45
	call __BEEPER
	ld hl, 806
	push hl
	ld hl, 42
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 40
	call __BEEPER
	ld hl, 759
	push hl
	ld hl, 45
	call __BEEPER
	ld hl, 806
	push hl
	ld hl, 42
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 40
	call __BEEPER
	ld hl, 908
	push hl
	ld hl, 38
	call __BEEPER
	ld hl, 806
	push hl
	ld hl, 42
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 40
	call __BEEPER
	ld hl, 908
	push hl
	ld hl, 38
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 36
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 40
	call __BEEPER
	ld hl, 908
	push hl
	ld hl, 38
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 36
	call __BEEPER
	ld hl, 1023
	push hl
	ld hl, 33
	call __BEEPER
	ld hl, 1152
	push hl
	ld hl, 30
	call __BEEPER
	ld hl, 1223
	push hl
	ld hl, 28
	call __BEEPER
	ld hl, 1297
	push hl
	ld hl, 329
	call __BEEPER
_ShowDeath__leave:
	ld sp, ix
	pop ix
	ret
_ShowWin:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld (ix-2), 1
	jp __LABEL517
__LABEL520:
	ld (ix-1), 1
	jp __LABEL522
__LABEL525:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _win
	call __ARRAY
	ld a, (hl)
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
__LABEL526:
	inc (ix-1)
__LABEL522:
	ld a, (ix-1)
	push af
	ld a, 10
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL525
__LABEL524:
__LABEL521:
	inc (ix-2)
__LABEL517:
	ld a, (ix-2)
	push af
	ld a, 20
	pop hl
	cp h
	sbc a, a
	call __NORMALIZE_BOOLEAN
	or a
	jp z, __LABEL520
__LABEL519:
	call _UpdateScreen
	ld hl, 964
	push hl
	ld hl, 87
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 1297
	push hl
	ld hl, 32
	call __BEEPER
	ld hl, 1460
	push hl
	ld hl, 28
	call __BEEPER
	ld hl, 1297
	push hl
	ld hl, 32
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 87
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 759
	push hl
	ld hl, 54
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 87
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 1023
	push hl
	ld hl, 41
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 759
	push hl
	ld hl, 54
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 759
	push hl
	ld hl, 54
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 5
	call __PAUSE
	ld hl, 908
	push hl
	ld hl, 46
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 116
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 58
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 58
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 58
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 1086
	push hl
	ld hl, 38
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 116
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 58
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 58
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 58
	call __BEEPER
	ld hl, 634
	push hl
	ld hl, 65
	call __BEEPER
	ld hl, 561
	push hl
	ld hl, 73
	call __BEEPER
	ld hl, 634
	push hl
	ld hl, 65
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 116
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 58
	call __BEEPER
	ld hl, 759
	push hl
	ld hl, 54
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 98
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 1023
	push hl
	ld hl, 41
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 1023
	push hl
	ld hl, 41
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 1023
	push hl
	ld hl, 41
	call __BEEPER
	ld hl, 5
	call __PAUSE
	ld hl, 1152
	push hl
	ld hl, 36
	call __BEEPER
	ld hl, 1023
	push hl
	ld hl, 41
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 87
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 1297
	push hl
	ld hl, 32
	call __BEEPER
	ld hl, 1460
	push hl
	ld hl, 28
	call __BEEPER
	ld hl, 1297
	push hl
	ld hl, 32
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 87
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 759
	push hl
	ld hl, 54
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 87
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 1023
	push hl
	ld hl, 41
	call __BEEPER
	ld hl, 964
	push hl
	ld hl, 43
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 759
	push hl
	ld hl, 54
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 759
	push hl
	ld hl, 54
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 5
	call __PAUSE
	ld hl, 908
	push hl
	ld hl, 46
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 634
	push hl
	ld hl, 131
	call __BEEPER
	ld hl, 634
	push hl
	ld hl, 65
	call __BEEPER
	ld hl, 634
	push hl
	ld hl, 65
	call __BEEPER
	ld hl, 634
	push hl
	ld hl, 65
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 58
	call __BEEPER
	ld hl, 806
	push hl
	ld hl, 51
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 58
	call __BEEPER
	ld hl, 634
	push hl
	ld hl, 131
	call __BEEPER
	ld hl, 634
	push hl
	ld hl, 65
	call __BEEPER
	ld hl, 634
	push hl
	ld hl, 65
	call __BEEPER
	ld hl, 634
	push hl
	ld hl, 65
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 58
	call __BEEPER
	ld hl, 806
	push hl
	ld hl, 51
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 58
	call __BEEPER
	ld hl, 634
	push hl
	ld hl, 65
	call __BEEPER
	ld hl, 5
	call __PAUSE
	ld hl, 1297
	push hl
	ld hl, 32
	call __BEEPER
	ld hl, 1152
	push hl
	ld hl, 36
	call __BEEPER
	ld hl, 1023
	push hl
	ld hl, 82
	call __BEEPER
	ld hl, 1297
	push hl
	ld hl, 32
	call __BEEPER
	ld hl, 759
	push hl
	ld hl, 54
	call __BEEPER
	ld hl, 856
	push hl
	ld hl, 147
	call __BEEPER
	ld hl, 5
	call __PAUSE
	ld hl, 964
	push hl
	ld hl, 175
	call __BEEPER
_ShowWin__leave:
	ld sp, ix
	pop ix
	ret
__LABEL4:
	DEFW 0000h
__LABEL17:
	DEFW 0001h
	DEFB 08h
__LABEL25:
	DEFW 0001h
	DEFB 20h
__LABEL33:
	DEFW 000Bh
	DEFB 39h
	DEFB 39h
	DEFB 39h
	DEFB 39h
	DEFB 20h
	DEFB 49h
	DEFB 4Eh
	DEFB 20h
	DEFB 4Fh
	DEFB 4Eh
	DEFB 45h
__LABEL34:
	DEFW 0011h
	DEFB 0A0h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A0h
__LABEL40:
	DEFW 0011h
	DEFB 0A4h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 0A2h
__LABEL41:
	DEFW 0001h
	DEFB 90h
__LABEL42:
	DEFW 0011h
	DEFB 0A0h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A0h
__LABEL43:
	DEFW 0003h
	DEFB 95h
	DEFB 96h
	DEFB 97h
__LABEL44:
	DEFW 0002h
	DEFB 9Eh
	DEFB 9Fh
__LABEL45:
	DEFW 0003h
	DEFB 9Bh
	DEFB 9Ch
	DEFB 9Dh
__LABEL241:
	DEFW 0001h
	DEFB 30h
__LABEL370:
	DEFW 0001h
	DEFB 6Fh
__LABEL375:
	DEFW 0001h
	DEFB 70h
__LABEL380:
	DEFW 0001h
	DEFB 61h
__LABEL444:
	DEFW 0001h
	DEFB 41h
__LABEL460:
	DEFW 0001h
	DEFB 71h
#line 1 "alloc.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the MIT license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the MIT license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be freed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.

#line 1 "error.asm"

	; Simple error control routines
; vim:ts=4:et:

	ERR_NR    EQU    23610    ; Error code system variable


	; Error code definitions (as in ZX spectrum manual)

; Set error code with:
	;    ld a, ERROR_CODE
	;    ld (ERR_NR), a


	ERROR_Ok                EQU    -1
	ERROR_SubscriptWrong    EQU     2
	ERROR_OutOfMemory       EQU     3
	ERROR_OutOfScreen       EQU     4
	ERROR_NumberTooBig      EQU     5
	ERROR_InvalidArg        EQU     9
	ERROR_IntOutOfRange     EQU    10
	ERROR_NonsenseInBasic   EQU    11
	ERROR_InvalidFileName   EQU    14
	ERROR_InvalidColour     EQU    19
	ERROR_BreakIntoProgram  EQU    20
	ERROR_TapeLoadingErr    EQU    26


	; Raises error using RST #8
__ERROR:
	    ld (__ERROR_CODE), a
	    rst 8
__ERROR_CODE:
	    nop
	    ret

	; Sets the error system variable, but keeps running.
	; Usually this instruction if followed by the END intermediate instruction.
__STOP:
	    ld (ERR_NR), a
	    ret
#line 69 "alloc.asm"
#line 1 "heapinit.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.




	; ---------------------------------------------------------------------
	;  __MEM_INIT must be called to initalize this library with the
	; standard parameters
	; ---------------------------------------------------------------------
__MEM_INIT: ; Initializes the library using (RAMTOP) as start, and
	        ld hl, ZXBASIC_MEM_HEAP  ; Change this with other address of heap start
	        ld de, ZXBASIC_HEAP_SIZE ; Change this with your size

	; ---------------------------------------------------------------------
	;  __MEM_INIT2 initalizes this library
; Parameters:
;   HL : Memory address of 1st byte of the memory heap
;   DE : Length in bytes of the Memory Heap
	; ---------------------------------------------------------------------
__MEM_INIT2:
	        ; HL as TOP
	        PROC

	        dec de
	        dec de
	        dec de
	        dec de        ; DE = length - 4; HL = start
	        ; This is done, because we require 4 bytes for the empty dummy-header block

	        xor a
	        ld (hl), a
	        inc hl
        ld (hl), a ; First "free" block is a header: size=0, Pointer=&(Block) + 4
	        inc hl

	        ld b, h
	        ld c, l
	        inc bc
	        inc bc      ; BC = starts of next block

	        ld (hl), c
	        inc hl
	        ld (hl), b
	        inc hl      ; Pointer to next block

	        ld (hl), e
	        inc hl
	        ld (hl), d
	        inc hl      ; Block size (should be length - 4 at start); This block contains all the available memory

	        ld (hl), a ; NULL (0000h) ; No more blocks (a list with a single block)
	        inc hl
	        ld (hl), a

	        ld a, 201
	        ld (__MEM_INIT), a; "Pokes" with a RET so ensure this routine is not called again
	        ret

	        ENDP

#line 70 "alloc.asm"


	; ---------------------------------------------------------------------
	; MEM_ALLOC
	;  Allocates a block of memory in the heap.
	;
	; Parameters
	;  BC = Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	; ---------------------------------------------------------------------

MEM_ALLOC:
__MEM_ALLOC: ; Returns the 1st free block found of the given length (in BC)
	        PROC

	        LOCAL __MEM_LOOP
	        LOCAL __MEM_DONE
	        LOCAL __MEM_SUBTRACT
	        LOCAL __MEM_START
	        LOCAL TEMP, TEMP0

	TEMP EQU TEMP0 + 1

	        ld hl, 0
	        ld (TEMP), hl

__MEM_START:
	        ld hl, ZXBASIC_MEM_HEAP  ; This label point to the heap start
	        inc bc
	        inc bc  ; BC = BC + 2 ; block size needs 2 extra bytes for hidden pointer

__MEM_LOOP:  ; Loads lengh at (HL, HL+). If Lenght >= BC, jump to __MEM_DONE
	        ld a, h ;  HL = NULL (No memory available?)
	        or l
#line 111 "C:/zxbasic/library-asm/alloc.asm"
	        ret z ; NULL
#line 113 "C:/zxbasic/library-asm/alloc.asm"
	        ; HL = Pointer to Free block
	        ld e, (hl)
	        inc hl
	        ld d, (hl)
	        inc hl          ; DE = Block Length

	        push hl         ; HL = *pointer to -> next block
	        ex de, hl
	        or a            ; CF = 0
	        sbc hl, bc      ; FREE >= BC (Length)  (HL = BlockLength - Length)
	        jp nc, __MEM_DONE
	        pop hl
	        ld (TEMP), hl

	        ex de, hl
	        ld e, (hl)
	        inc hl
	        ld d, (hl)
	        ex de, hl
	        jp __MEM_LOOP

__MEM_DONE:  ; A free block has been found.
	             ; Check if at least 4 bytes remains free (HL >= 4)
	        push hl
	        exx  ; exx to preserve bc
	        pop hl
	        ld bc, 4
	        or a
	        sbc hl, bc
	        exx
	        jp nc, __MEM_SUBTRACT
	        ; At this point...
	        ; less than 4 bytes remains free. So we return this block entirely
	        ; We must link the previous block with the next to this one
	        ; (DE) => Pointer to next block
	        ; (TEMP) => &(previous->next)
	        pop hl     ; Discard current block pointer
	        push de
	        ex de, hl  ; DE = Previous block pointer; (HL) = Next block pointer
	        ld a, (hl)
	        inc hl
	        ld h, (hl)
	        ld l, a    ; HL = (HL)
	        ex de, hl  ; HL = Previous block pointer; DE = Next block pointer
TEMP0:
	        ld hl, 0   ; Pre-previous block pointer

	        ld (hl), e
	        inc hl
	        ld (hl), d ; LINKED
	        pop hl ; Returning block.

	        ret

__MEM_SUBTRACT:
	        ; At this point we have to store HL value (Length - BC) into (DE - 2)
	        ex de, hl
	        dec hl
	        ld (hl), d
	        dec hl
	        ld (hl), e ; Store new block length

	        add hl, de ; New length + DE => free-block start
	        pop de     ; Remove previous HL off the stack

	        ld (hl), c ; Store length on its 1st word
	        inc hl
	        ld (hl), b
	        inc hl     ; Return hl
	        ret

	        ENDP

#line 6737 "Program.zxbas"
#line 1 "array.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	; -------------------------------------------------------------------
	; Simple array Index routine
	; Number of total indexes dimensions - 1 at beginning of memory
	; HL = Start of array memory (First two bytes contains N-1 dimensions)
	; Dimension values on the stack, (top of the stack, highest dimension)
	; E.g. A(2, 4) -> PUSH <4>; PUSH <2>

	; For any array of N dimension A(aN-1, ..., a1, a0)
	; and dimensions D[bN-1, ..., b1, b0], the offset is calculated as
	; O = [a0 + b0 * (a1 + b1 * (a2 + ... bN-2(aN-1)))]
; What I will do here is to calculate the following sequence:
	; ((aN-1 * bN-2) + aN-2) * bN-3 + ...


#line 1 "mul16.asm"

__MUL16:	; Mutiplies HL with the last value stored into de stack
				; Works for both signed and unsigned

			PROC

			LOCAL __MUL16LOOP
	        LOCAL __MUL16NOADD

			ex de, hl
			pop hl		; Return address
			ex (sp), hl ; CALLEE caller convention

__MUL16_FAST:
	        ld b, 16
	        ld a, h
	        ld c, l
	        ld hl, 0

__MUL16LOOP:
	        add hl, hl  ; hl << 1
	        sla c
	        rla         ; a,c << 1
	        jp nc, __MUL16NOADD
	        add hl, de

__MUL16NOADD:
	        djnz __MUL16LOOP

			ret	; Result in hl (16 lower bits)

			ENDP

#line 20 "array.asm"

#line 24 "C:/zxbasic/library-asm/array.asm"

__ARRAY_PTR:   ;; computes an array offset from a pointer
	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c

__ARRAY:
		PROC

		LOCAL LOOP
		LOCAL ARRAY_END
		LOCAL RET_ADDRESS ; Stores return address
		LOCAL TMP_ARR_PTR ; Stores pointer temporarily

	    ld e, (hl)
	    inc hl
	    ld d, (hl)
	    inc hl
	    ld (TMP_ARR_PTR), hl
	    ex de, hl
		ex (sp), hl	; Return address in HL, array address in the stack
		ld (RET_ADDRESS + 1), hl ; Stores it for later

		exx
		pop hl		; Will use H'L' as the pointer
		ld c, (hl)	; Loads Number of dimensions from (hl)
		inc hl
		ld b, (hl)
		inc hl		; Ready
		exx

		ld hl, 0	; HL = Offset "accumulator"

LOOP:
#line 62 "C:/zxbasic/library-asm/array.asm"
		pop bc		; Get next index (Ai) from the stack

#line 72 "C:/zxbasic/library-asm/array.asm"

		add hl, bc	; Adds current index

		exx			; Checks if B'C' = 0
		ld a, b		; Which means we must exit (last element is not multiplied by anything)
		or c
		jr z, ARRAY_END		; if B'Ci == 0 we are done

		ld e, (hl)			; Loads next dimension into D'E'
		inc hl
		ld d, (hl)
		inc hl
		push de
		dec bc				; Decrements loop counter
		exx
		pop de				; DE = Max bound Number (i-th dimension)

	    call __FNMUL
		jp LOOP

ARRAY_END:
		ld a, (hl)
		exx

#line 101 "C:/zxbasic/library-asm/array.asm"
	    LOCAL ARRAY_SIZE_LOOP

	    ex de, hl
	    ld hl, 0
	    ld b, a
ARRAY_SIZE_LOOP:
	    add hl, de
	    djnz ARRAY_SIZE_LOOP

#line 111 "C:/zxbasic/library-asm/array.asm"

	    ex de, hl
		ld hl, (TMP_ARR_PTR)
		ld a, (hl)
		inc hl
		ld h, (hl)
		ld l, a
		add hl, de  ; Adds element start

RET_ADDRESS:
		jp 0

	    ;; Performs a faster multiply for little 16bit numbs
	    LOCAL __FNMUL, __FNMUL2

__FNMUL:
	    xor a
	    or h
	    jp nz, __MUL16_FAST
	    or l
	    ret z

	    cp 33
	    jp nc, __MUL16_FAST

	    ld b, l
	    ld l, h  ; HL = 0

__FNMUL2:
	    add hl, de
	    djnz __FNMUL2
	    ret

TMP_ARR_PTR:
	    DW 0  ; temporary storage for pointer to tables

		ENDP

#line 6738 "Program.zxbas"
#line 1 "asc.asm"

	; Returns the ascii code for the given str
#line 1 "free.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.



	; ---------------------------------------------------------------------
	; MEM_FREE
	;  Frees a block of memory
	;
; Parameters:
	;  HL = Pointer to the block to be freed. If HL is NULL (0) nothing
	;  is done
	; ---------------------------------------------------------------------

MEM_FREE:
__MEM_FREE: ; Frees the block pointed by HL
	            ; HL DE BC & AF modified
	        PROC

	        LOCAL __MEM_LOOP2
	        LOCAL __MEM_LINK_PREV
	        LOCAL __MEM_JOIN_TEST
	        LOCAL __MEM_BLOCK_JOIN

	        ld a, h
	        or l
	        ret z       ; Return if NULL pointer

	        dec hl
	        dec hl
	        ld b, h
	        ld c, l    ; BC = Block pointer

	        ld hl, ZXBASIC_MEM_HEAP  ; This label point to the heap start

__MEM_LOOP2:
	        inc hl
	        inc hl     ; Next block ptr

	        ld e, (hl)
	        inc hl
	        ld d, (hl) ; Block next ptr
	        ex de, hl  ; DE = &(block->next); HL = block->next

	        ld a, h    ; HL == NULL?
	        or l
	        jp z, __MEM_LINK_PREV; if so, link with previous

	        or a       ; Clear carry flag
	        sbc hl, bc ; Carry if BC > HL => This block if before
	        add hl, bc ; Restores HL, preserving Carry flag
	        jp c, __MEM_LOOP2 ; This block is before. Keep searching PASS the block

	;------ At this point current HL is PAST BC, so we must link (DE) with BC, and HL in BC->next

__MEM_LINK_PREV:    ; Link (DE) with BC, and BC->next with HL
	        ex de, hl
	        push hl
	        dec hl

	        ld (hl), c
	        inc hl
	        ld (hl), b ; (DE) <- BC

	        ld h, b    ; HL <- BC (Free block ptr)
	        ld l, c
	        inc hl     ; Skip block length (2 bytes)
	        inc hl
	        ld (hl), e ; Block->next = DE
	        inc hl
	        ld (hl), d
	        ; --- LINKED ; HL = &(BC->next) + 2

	        call __MEM_JOIN_TEST
	        pop hl

__MEM_JOIN_TEST:   ; Checks for fragmented contiguous blocks and joins them
	                   ; hl = Ptr to current block + 2
	        ld d, (hl)
	        dec hl
	        ld e, (hl)
	        dec hl
	        ld b, (hl) ; Loads block length into BC
	        dec hl
	        ld c, (hl) ;

	        push hl    ; Saves it for later
	        add hl, bc ; Adds its length. If HL == DE now, it must be joined
	        or a
	        sbc hl, de ; If Z, then HL == DE => We must join
	        pop hl
	        ret nz

__MEM_BLOCK_JOIN:  ; Joins current block (pointed by HL) with next one (pointed by DE). HL->length already in BC
	        push hl    ; Saves it for later
	        ex de, hl

	        ld e, (hl) ; DE -> block->next->length
	        inc hl
	        ld d, (hl)
	        inc hl

	        ex de, hl  ; DE = &(block->next)
	        add hl, bc ; HL = Total Length

	        ld b, h
	        ld c, l    ; BC = Total Length

	        ex de, hl
	        ld e, (hl)
	        inc hl
	        ld d, (hl) ; DE = block->next

	        pop hl     ; Recovers Pointer to block
	        ld (hl), c
	        inc hl
	        ld (hl), b ; Length Saved
	        inc hl
	        ld (hl), e
	        inc hl
	        ld (hl), d ; Next saved
	        ret

	        ENDP

#line 3 "asc.asm"

__ASC:
		PROC
		LOCAL __ASC_END

		ex af, af'	; Saves free_mem flag

		ld a, h
		or l
		ret z		; NULL? return

		ld c, (hl)
		inc hl
		ld b, (hl)

		ld a, b
		or c
		jr z, __ASC_END		; No length? return

		inc hl
		ld a, (hl)
	    dec hl

__ASC_END:
		dec hl
		ex af, af'
		or a
		call nz, __MEM_FREE	; Free memory if needed

		ex af, af'	; Recover result

		ret
		ENDP
#line 6739 "Program.zxbas"
#line 1 "attr.asm"

	; Attribute routines
; vim:ts=4:et:sw:

#line 1 "sposn.asm"

	; Printing positioning library.
			PROC
			LOCAL ECHO_E

__LOAD_S_POSN:		; Loads into DE current ROW, COL print position from S_POSN mem var.
			ld de, (S_POSN)
			ld hl, (MAXX)
			or a
			sbc hl, de
			ex de, hl
			ret


__SAVE_S_POSN:		; Saves ROW, COL from DE into S_POSN mem var.
			ld hl, (MAXX)
			or a
			sbc hl, de
			ld (S_POSN), hl ; saves it again
			ret


	ECHO_E	EQU 23682
	MAXX	EQU ECHO_E   ; Max X position + 1
	MAXY	EQU MAXX + 1 ; Max Y position + 1

	S_POSN	EQU 23688
	POSX	EQU S_POSN		; Current POS X
	POSY	EQU S_POSN + 1	; Current POS Y

			ENDP

#line 5 "attr.asm"

#line 1 "in_screen.asm"




__IN_SCREEN:
		; Returns NO carry if current coords (D, E)
		; are OUT of the screen limits (MAXX, MAXY)

		PROC
		LOCAL __IN_SCREEN_ERR

		ld hl, MAXX
		ld a, e
		cp (hl)
		jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range

		ld a, d
		inc hl
		cp (hl)
		;; jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range
		;; ret
	    ret c                       ; Return if carry (OK)

__IN_SCREEN_ERR:
__OUT_OF_SCREEN_ERR:
		; Jumps here if out of screen
		ld a, ERROR_OutOfScreen
	    jp __STOP   ; Saves error code and exits

		ENDP
#line 7 "attr.asm"
#line 1 "const.asm"

	; Global constants

	P_FLAG	EQU 23697
	FLAGS2	EQU 23681
	ATTR_P	EQU 23693	; permanet ATTRIBUTES
	ATTR_T	EQU 23695	; temporary ATTRIBUTES
	CHARS	EQU 23606 ; Pointer to ROM/RAM Charset
	UDG	EQU 23675 ; Pointer to UDG Charset
	MEM0	EQU 5C92h ; Temporary memory buffer used by ROM chars

#line 8 "attr.asm"
#line 1 "cls.asm"

	; JUMPS directly to spectrum CLS
	; This routine does not clear lower screen

	;CLS	EQU	0DAFh

	; Our faster implementation



CLS:
		PROC

		LOCAL COORDS
		LOCAL __CLS_SCR
		LOCAL ATTR_P
		LOCAL SCREEN

		ld hl, 0
		ld (COORDS), hl
	    ld hl, 1821h
		ld (S_POSN), hl
__CLS_SCR:
		ld hl, SCREEN
		ld (hl), 0
		ld d, h
		ld e, l
		inc de
		ld bc, 6144
		ldir

		; Now clear attributes

		ld a, (ATTR_P)
		ld (hl), a
		ld bc, 767
		ldir
		ret

	COORDS	EQU	23677
	SCREEN	EQU 16384 ; Default start of the screen (can be changed)
	ATTR_P	EQU 23693
	;you can poke (SCREEN_SCRADDR) to change CLS, DRAW & PRINTing address

	SCREEN_ADDR EQU (__CLS_SCR + 1) ; Address used by print and other screen routines
								    ; to get the start of the screen
		ENDP

#line 9 "attr.asm"

__ATTR_ADDR:
	    ; calc start address in DE (as (32 * d) + e)
    ; Contributed by Santiago Romero at http://www.speccy.org
	    ld h, 0                     ;  7 T-States
	    ld a, d                     ;  4 T-States
	    add a, a     ; a * 2        ;  4 T-States
	    add a, a     ; a * 4        ;  4 T-States
	    ld l, a      ; HL = A * 4   ;  4 T-States

	    add hl, hl   ; HL = A * 8   ; 15 T-States
	    add hl, hl   ; HL = A * 16  ; 15 T-States
	    add hl, hl   ; HL = A * 32  ; 15 T-States

    ld d, 18h ; DE = 6144 + E. Note: 6144 is the screen size (before attr zone)
	    add hl, de

	    ld de, (SCREEN_ADDR)    ; Adds the screen address
	    add hl, de

	    ; Return current screen address in HL
	    ret


	; Sets the attribute at a given screen coordinate (D, E).
	; The attribute is taken from the ATTR_T memory variable
	; Used by PRINT routines
SET_ATTR:

	    ; Checks for valid coords
	    call __IN_SCREEN
	    ret nc

__SET_ATTR:
	    ; Internal __FASTCALL__ Entry used by printing routines
	    PROC

	    call __ATTR_ADDR

__SET_ATTR2:  ; Sets attr from ATTR_T to (HL) which points to the scr address
	    ld de, (ATTR_T)    ; E = ATTR_T, D = MASK_T

	    ld a, d
	    and (hl)
	    ld c, a    ; C = current screen color, masked

	    ld a, d
	    cpl        ; Negate mask
	    and e    ; Mask current attributes
	    or c    ; Mix them
	    ld (hl), a ; Store result in screen

	    ret

	    ENDP


	; Sets the attribute at a given screen pixel address in hl
	; HL contains the address in RAM for a given pixel (not a coordinate)
SET_PIXEL_ADDR_ATTR:
	    ;; gets ATTR position with offset given in SCREEN_ADDR
	    ld a, h
	    rrca
	    rrca
	    rrca
	    and 3
	    or 18h
	    ld h, a
	    ld de, (SCREEN_ADDR)
	    add hl, de  ;; Final screen addr
	    jp __SET_ATTR2
#line 6740 "Program.zxbas"
#line 1 "beeper.asm"

; vim:ts=4:et:sw=4:
	; This is a fast beep routine, but needs parameters
	; codified in a different way.
; See http://www.wearmouth.demon.co.uk/zx82.htm#L03F8

	; Needs pitch on top of the stack
	; HL = duration

__BEEPER:
	    ex de, hl
	    pop hl
	    ex (sp), hl ; CALLEE
	    push ix     ; BEEPER changes IX
	    call 03B5h
	    pop ix
	    ret


#line 6741 "Program.zxbas"
#line 1 "border.asm"

	; __FASTCALL__ Routine to change de border
	; Parameter (color) specified in A register

	BORDER EQU 229Bh

	; Nothing to do! (Directly from the ZX Spectrum ROM)

#line 6742 "Program.zxbas"
#line 1 "bright.asm"

	; Sets bright flag in ATTR_P permanently
; Parameter: Paper color in A register



BRIGHT:
		ld hl, ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

__SET_BRIGHT:
		; Another entry. This will set the bright flag at location pointer by DE
		cp 8
		jr z, IS_TR

		; # Convert to 0/1
		or a
		jr z, IS_ZERO
		ld a, 0x40

IS_ZERO:
		ld b, a	; Saves the color
		ld a, (hl)
		and 0BFh ; Clears previous value
		or b
		ld (hl), a
		inc hl
		res 6, (hl)  ;Reset bit 6 to disable transparency
		ret

IS_TR:  ; transparent
		inc hl ; Points DE to MASK_T or MASK_P
	    set 6, (hl)  ;Set bit 6 to enable transparency
		ret

	; Sets the BRIGHT flag passed in A register in the ATTR_T variable
BRIGHT_TMP:
		ld hl, ATTR_T
		jr __SET_BRIGHT
	    ENDP
#line 6743 "Program.zxbas"
#line 1 "calloc.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the MIT license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the MIT license on the internet




	; ---------------------------------------------------------------------
	; MEM_CALLOC
	;  Allocates a block of memory in the heap, and clears it filling it
	;  with 0 bytes
	;
	; Parameters
	;  BC = Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	; ---------------------------------------------------------------------
__MEM_CALLOC:
	        push bc
	        call __MEM_ALLOC
	        pop bc
	        ld a, h
	        or l
	        ret z  ; No memory
	        ld (hl), 0
	        dec bc
	        ld a, b
	        or c
	        ret z  ; Already filled (1 byte-length block)
	        ld d, h
	        ld e, l
	        inc de
	        push hl
	        ldir
	        pop hl
	        ret
#line 6744 "Program.zxbas"
#line 1 "chr.asm"

	; CHR$(x, y, x) returns the string CHR$(x) + CHR$(y) + CHR$(z)
	;



CHR:	; Returns HL = Pointer to STRING (NULL if no memory)
			; Requires alloc.asm for dynamic memory heap.
		; Parameters: HL = Number of bytes to insert (already push onto the stack)
			; STACK => parameters (16 bit, only the High byte is considered)
			; Used registers A, A', BC, DE, HL, H'L'

			PROC

			LOCAL __POPOUT
			LOCAL TMP

	TMP		EQU 23629 ; (DEST System variable)

			ld a, h
			or l
			ret z	; If Number of parameters is ZERO, return NULL STRING

			ld b, h
			ld c, l

			pop hl	; Return address
			ld (TMP), hl

			push bc
			inc bc
			inc bc	; BC = BC + 2 => (2 bytes for the length number)
			call __MEM_ALLOC
			pop bc

			ld d, h
			ld e, l			; Saves HL in DE

			ld a, h
			or l
			jr z, __POPOUT	; No Memory, return

			ld (hl), c
			inc hl
			ld (hl), b
			inc hl

__POPOUT:	; Removes out of the stack every byte and return
				; If Zero Flag is set, don't store bytes in memory
			ex af, af' ; Save Zero Flag

			ld a, b
			or c
			jr z, __CHR_END

			dec bc
			pop af 	   ; Next byte

			ex af, af' ; Recovers Zero flag
			jr z, __POPOUT

			ex af, af' ; Saves Zero flag
			ld (hl), a
			inc hl
	        ex af, af' ; Recovers Zero Flag

			jp __POPOUT

__CHR_END:
			ld hl, (TMP)
			push hl		; Restores return addr
			ex de, hl	; Recovers original HL ptr
			ret

			ENDP

#line 6745 "Program.zxbas"

#line 1 "copy_attr.asm"


#line 1 "print.asm"

; vim:ts=4:sw=4:et:
; vim:ts=4:sw=4:et:
	; PRINT command routine
	; Does not print attribute. Use PRINT_STR or PRINT_NUM for that




#line 1 "table_jump.asm"


JUMP_HL_PLUS_2A: ; Does JP (HL + A*2) Modifies DE. Modifies A
		add a, a

JUMP_HL_PLUS_A:	 ; Does JP (HL + A) Modifies DE
		ld e, a
		ld d, 0

JUMP_HL_PLUS_DE: ; Does JP (HL + DE)
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		ex de, hl
CALL_HL:
		jp (hl)

#line 10 "print.asm"
#line 1 "ink.asm"

	; Sets ink color in ATTR_P permanently
; Parameter: Paper color in A register



INK:
		PROC
		LOCAL __SET_INK
		LOCAL __SET_INK2

		ld de, ATTR_P

__SET_INK:
		cp 8
		jr nz, __SET_INK2

		inc de ; Points DE to MASK_T or MASK_P
		ld a, (de)
		or 7 ; Set bits 0,1,2 to enable transparency
		ld (de), a
		ret

__SET_INK2:
		; Another entry. This will set the ink color at location pointer by DE
		and 7	; # Gets color mod 8
		ld b, a	; Saves the color
		ld a, (de)
		and 0F8h ; Clears previous value
		or b
		ld (de), a
		inc de ; Points DE to MASK_T or MASK_P
		ld a, (de)
		and 0F8h ; Reset bits 0,1,2 sign to disable transparency
		ld (de), a ; Store new attr
		ret

	; Sets the INK color passed in A register in the ATTR_T variable
INK_TMP:
		ld de, ATTR_T
		jp __SET_INK

		ENDP

#line 11 "print.asm"
#line 1 "paper.asm"

	; Sets paper color in ATTR_P permanently
; Parameter: Paper color in A register



PAPER:
		PROC
		LOCAL __SET_PAPER
		LOCAL __SET_PAPER2

		ld de, ATTR_P

__SET_PAPER:
		cp 8
		jr nz, __SET_PAPER2
		inc de
		ld a, (de)
		or 038h
		ld (de), a
		ret

		; Another entry. This will set the paper color at location pointer by DE
__SET_PAPER2:
		and 7	; # Remove
		rlca
		rlca
		rlca		; a *= 8

		ld b, a	; Saves the color
		ld a, (de)
		and 0C7h ; Clears previous value
		or b
		ld (de), a
		inc de ; Points to MASK_T or MASK_P accordingly
		ld a, (de)
		and 0C7h  ; Resets bits 3,4,5
		ld (de), a
		ret


	; Sets the PAPER color passed in A register in the ATTR_T variable
PAPER_TMP:
		ld de, ATTR_T
		jp __SET_PAPER
		ENDP

#line 12 "print.asm"
#line 1 "flash.asm"

	; Sets flash flag in ATTR_P permanently
; Parameter: Paper color in A register



FLASH:
		ld hl, ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

__SET_FLASH:
		; Another entry. This will set the flash flag at location pointer by DE
		cp 8
		jr z, IS_TR

		; # Convert to 0/1
		or a
		jr z, IS_ZERO
		ld a, 0x80

IS_ZERO:
		ld b, a	; Saves the color
		ld a, (hl)
		and 07Fh ; Clears previous value
		or b
		ld (hl), a
		inc hl
		res 7, (hl)  ;Reset bit 7 to disable transparency
		ret

IS_TR:  ; transparent
		inc hl ; Points DE to MASK_T or MASK_P
		set 7, (hl)  ;Set bit 7 to enable transparency
		ret

	; Sets the FLASH flag passed in A register in the ATTR_T variable
FLASH_TMP:
		ld hl, ATTR_T
		jr __SET_FLASH
	    ENDP

#line 13 "print.asm"

#line 1 "over.asm"

	; Sets OVER flag in P_FLAG permanently
; Parameter: OVER flag in bit 0 of A register



OVER:
		PROC

		ld c, a ; saves it for later
		and 2
		ld hl, FLAGS2
		res 1, (HL)
		or (hl)
		ld (hl), a

		ld a, c	; Recovers previous value
		and 1	; # Convert to 0/1
		add a, a; # Shift left 1 bit for permanent

		ld hl, P_FLAG
		res 1, (hl)
		or (hl)
		ld (hl), a
		ret

	; Sets OVER flag in P_FLAG temporarily
OVER_TMP:
		ld c, a ; saves it for later
		and 2	; gets bit 1; clears carry
		rra
		ld hl, FLAGS2
		res 0, (hl)
		or (hl)
		ld (hl), a

		ld a, c	; Recovers previous value
		and 1
		ld hl, P_FLAG
		res 0, (hl)
	    or (hl)
		ld (hl), a
		jp __SET_ATTR_MODE

		ENDP

#line 15 "print.asm"
#line 1 "inverse.asm"

	; Sets INVERSE flag in P_FLAG permanently
; Parameter: INVERSE flag in bit 0 of A register



INVERSE:
		PROC

		and 1	; # Convert to 0/1
		add a, a; # Shift left 3 bits for permanent
		add a, a
		add a, a
		ld hl, P_FLAG
		res 3, (hl)
		or (hl)
		ld (hl), a
		ret

	; Sets INVERSE flag in P_FLAG temporarily
INVERSE_TMP:
		and 1
		add a, a
		add a, a; # Shift left 2 bits for temporary
		ld hl, P_FLAG
		res 2, (hl)
		or (hl)
		ld (hl), a
		jp __SET_ATTR_MODE

		ENDP

#line 16 "print.asm"
#line 1 "bold.asm"

	; Sets BOLD flag in P_FLAG permanently
; Parameter: BOLD flag in bit 0 of A register


BOLD:
		PROC

		and 1
		rlca
	    rlca
	    rlca
		ld hl, FLAGS2
		res 3, (HL)
		or (hl)
		ld (hl), a
		ret

	; Sets BOLD flag in P_FLAG temporarily
BOLD_TMP:
		and 1
		rlca
		rlca
		ld hl, FLAGS2
		res 2, (hl)
		or (hl)
		ld (hl), a
		ret

		ENDP

#line 17 "print.asm"
#line 1 "italic.asm"

	; Sets ITALIC flag in P_FLAG permanently
; Parameter: ITALIC flag in bit 0 of A register


ITALIC:
		PROC

		and 1
	    rrca
	    rrca
	    rrca
		ld hl, FLAGS2
		res 5, (HL)
		or (hl)
		ld (hl), a
		ret

	; Sets ITALIC flag in P_FLAG temporarily
ITALIC_TMP:
		and 1
		rrca
		rrca
		rrca
		rrca
		ld hl, FLAGS2
		res 4, (hl)
		or (hl)
		ld (hl), a
		ret

		ENDP

#line 18 "print.asm"



	; Putting a comment starting with @INIT <address>
	; will make the compiler to add a CALL to <address>
	; It is useful for initialization routines.


__PRINT_INIT: ; To be called before program starts (initializes library)
	        PROC

	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl

	        ld hl, 1821h
	        ld (MAXX), hl  ; Sets current maxX and maxY

	        xor a
	        ld (FLAGS2), a

	        ret


__PRINTCHAR: ; Print character store in accumulator (A register)
	             ; Modifies H'L', B'C', A'F', D'E', A

	        LOCAL PO_GR_1

	        LOCAL __PRCHAR
	        LOCAL __PRINT_CONT
	        LOCAL __PRINT_CONT2
	        LOCAL __PRINT_JUMP
	        LOCAL __SRCADDR
	        LOCAL __PRINT_UDG
	        LOCAL __PRGRAPH
	        LOCAL __PRINT_START
	        LOCAL __ROM_SCROLL_SCR
	        LOCAL __TVFLAGS

	        __ROM_SCROLL_SCR EQU 0DFEh
	        __TVFLAGS EQU 5C3Ch

	PRINT_JUMP_STATE EQU __PRINT_JUMP + 1

__PRINT_JUMP:
	        jp __PRINT_START    ; Where to jump. If we print 22 (AT), next two calls jumps to AT1 and AT2 respectively


	        LOCAL __SCROLL
__SCROLL:  ; Scroll?
	        ld hl, __TVFLAGS
	        bit 1, (hl)
	        ret z
	        call __ROM_SCROLL_SCR
	        ld hl, __TVFLAGS
	        res 1, (hl)
	        ret
#line 76 "C:/zxbasic/library-asm/print.asm"

__PRINT_START:
	        cp ' '
	        jp c, __PRINT_SPECIAL    ; Characters below ' ' are special ones

	        exx               ; Switch to alternative registers
	        ex af, af'        ; Saves a value (char to print) for later


	        call __SCROLL
#line 87 "C:/zxbasic/library-asm/print.asm"
	        call __LOAD_S_POSN

	; At this point we have the new coord
	        ld hl, (SCREEN_ADDR)

	        ld a, d
	        ld c, a     ; Saves it for later

	        and 0F8h    ; Masks 3 lower bit ; zy
	        ld d, a

	        ld a, c     ; Recovers it
	        and 07h     ; MOD 7 ; y1
	        rrca
	        rrca
	        rrca

	        or e
	        ld e, a
	        add hl, de    ; HL = Screen address + DE
	        ex de, hl     ; DE = Screen address

	        ex af, af'

	        cp 80h    ; Is it an UDG or a ?
	        jp c, __SRCADDR

	        cp 90h
	        jp nc, __PRINT_UDG

	        ; Print a 8 bit pattern (80h to 8Fh)

	        ld b, a
	        call PO_GR_1 ; This ROM routine will generate the bit pattern at MEM0
	        ld hl, MEM0
	        jp __PRGRAPH

	PO_GR_1 EQU 0B38h

__PRINT_UDG:
	        sub 90h ; Sub ASC code
	        ld bc, (UDG)
	        jp __PRGRAPH0

	__SOURCEADDR EQU (__SRCADDR + 1)    ; Address of the pointer to chars source
__SRCADDR:
	        ld bc, (CHARS)

__PRGRAPH0:
        add a, a   ; A = a * 2 (since a < 80h) ; Thanks to Metalbrain at http://foro.speccy.org
	        ld l, a
	        ld h, 0    ; HL = a * 2 (accumulator)
	        add hl, hl
	        add hl, hl ; HL = a * 8
	        add hl, bc ; HL = CHARS address

__PRGRAPH:
	        ex de, hl  ; HL = Write Address, DE = CHARS address
	        bit 2, (iy + $47)
	        call nz, __BOLD
	        bit 4, (iy + $47)
	        call nz, __ITALIC
	        ld b, 8 ; 8 bytes per char
__PRCHAR:
	        ld a, (de) ; DE *must* be ALWAYS source, and HL destiny

PRINT_MODE:     ; Which operation is used to write on the screen
                ; Set it with:
	                ; LD A, <OPERATION>
	                ; LD (PRINT_MODE), A
	                ;
                ; Available opertions:
                ; NORMAL : 0h  --> NOP         ; OVER 0
                ; XOR    : AEh --> XOR (HL)    ; OVER 1
                ; OR     : B6h --> OR (HL)     ; PUTSPRITE
                ; AND    : A6h --> AND (HL)    ; PUTMASK
	        nop     ;

INVERSE_MODE:   ; 00 -> NOP -> INVERSE 0
	        nop     ; 2F -> CPL -> INVERSE 1

	        ld (hl), a

	        inc de
	        inc h     ; Next line
	        djnz __PRCHAR

	        call __LOAD_S_POSN
	        push de
	        call __SET_ATTR
	        pop de
	        inc e            ; COL = COL + 1
	        ld hl, (MAXX)
	        ld a, e
	        dec l            ; l = MAXX
	        cp l            ; Lower than max?
	        jp c, __PRINT_CONT; Nothing to do
	        call __PRINT_EOL1
	        exx            ; counteracts __PRINT_EOL1 exx
	        jp __PRINT_CONT2

__PRINT_CONT:
	        call __SAVE_S_POSN

__PRINT_CONT2:
	        exx
	        ret

	; ------------- SPECIAL CHARS (< 32) -----------------

__PRINT_SPECIAL:    ; Jumps here if it is a special char
	        exx
	        ld hl, __PRINT_TABLE
	        jp JUMP_HL_PLUS_2A


PRINT_EOL:        ; Called WHENEVER there is no ";" at end of PRINT sentence
	        exx

__PRINT_0Dh:        ; Called WHEN printing CHR$(13)

	        call __SCROLL
#line 210 "C:/zxbasic/library-asm/print.asm"
	        call __LOAD_S_POSN

__PRINT_EOL1:        ; Another entry called from PRINT when next line required
	        ld e, 0

__PRINT_EOL2:
	        ld a, d
	        inc a

__PRINT_AT1_END:
	        ld hl, (MAXY)
	        cp l
	        jr c, __PRINT_EOL_END    ; Carry if (MAXY) < d

	        ld hl, __TVFLAGS
	        set 1, (hl)
	        ld a, d
#line 230 "C:/zxbasic/library-asm/print.asm"

__PRINT_EOL_END:
	        ld d, a

__PRINT_AT2_END:
	        call __SAVE_S_POSN
	        exx
	        ret

__PRINT_COM:
	        exx
	        push hl
	        push de
	        push bc
	        call PRINT_COMMA
	        pop bc
	        pop de
	        pop hl
	        ret

__PRINT_TAB:
	        ld hl, __PRINT_TAB1
	        jp __PRINT_SET_STATE

__PRINT_TAB1:
	        ld (MEM0), a
	        ld hl, __PRINT_TAB2
	        ld (PRINT_JUMP_STATE), hl
	        ret

__PRINT_TAB2:
	        ld a, (MEM0)        ; Load tab code (ignore the current one)
	        push hl
	        push de
	        push bc
	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl
	        call PRINT_TAB
	        pop bc
	        pop de
	        pop hl
	        ret

__PRINT_NOP:
__PRINT_RESTART:
	        ld hl, __PRINT_START
	        jp __PRINT_SET_STATE

__PRINT_AT:
	        ld hl, __PRINT_AT1

__PRINT_SET_STATE:
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        exx
	        ret

__PRINT_AT1:    ; Jumps here if waiting for 1st parameter
	        exx
	        ld hl, __PRINT_AT2
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        call __LOAD_S_POSN
	        jp __PRINT_AT1_END

__PRINT_AT2:
	        exx
	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        call __LOAD_S_POSN
	        ld e, a
	        ld hl, (MAXX)
	        cp (hl)
	        jr c, __PRINT_AT2_END
	        jr __PRINT_EOL1

__PRINT_DEL:
	        call __LOAD_S_POSN        ; Gets current screen position
	        dec e
	        ld a, -1
	        cp e
	        jp nz, __PRINT_AT2_END
	        ld hl, (MAXX)
	        ld e, l
	        dec e
	        dec e
	        dec d
	        cp d
	        jp nz, __PRINT_AT2_END
	        ld d, h
	        dec d
	        jp __PRINT_AT2_END

__PRINT_INK:
	        ld hl, __PRINT_INK2
	        jp __PRINT_SET_STATE

__PRINT_INK2:
	        exx
	        call INK_TMP
	        jp __PRINT_RESTART

__PRINT_PAP:
	        ld hl, __PRINT_PAP2
	        jp __PRINT_SET_STATE

__PRINT_PAP2:
	        exx
	        call PAPER_TMP
	        jp __PRINT_RESTART

__PRINT_FLA:
	        ld hl, __PRINT_FLA2
	        jp __PRINT_SET_STATE

__PRINT_FLA2:
	        exx
	        call FLASH_TMP
	        jp __PRINT_RESTART

__PRINT_BRI:
	        ld hl, __PRINT_BRI2
	        jp __PRINT_SET_STATE

__PRINT_BRI2:
	        exx
	        call BRIGHT_TMP
	        jp __PRINT_RESTART

__PRINT_INV:
	        ld hl, __PRINT_INV2
	        jp __PRINT_SET_STATE

__PRINT_INV2:
	        exx
	        call INVERSE_TMP
	        jp __PRINT_RESTART

__PRINT_OVR:
	        ld hl, __PRINT_OVR2
	        jp __PRINT_SET_STATE

__PRINT_OVR2:
	        exx
	        call OVER_TMP
	        jp __PRINT_RESTART

__PRINT_BOLD:
	        ld hl, __PRINT_BOLD2
	        jp __PRINT_SET_STATE

__PRINT_BOLD2:
	        exx
	        call BOLD_TMP
	        jp __PRINT_RESTART

__PRINT_ITA:
	        ld hl, __PRINT_ITA2
	        jp __PRINT_SET_STATE

__PRINT_ITA2:
	        exx
	        call ITALIC_TMP
	        jp __PRINT_RESTART


__BOLD:
	        push hl
	        ld hl, MEM0
	        ld b, 8
__BOLD_LOOP:
	        ld a, (de)
	        ld c, a
	        rlca
	        or c
	        ld (hl), a
	        inc hl
	        inc de
	        djnz __BOLD_LOOP
	        pop hl
	        ld de, MEM0
	        ret


__ITALIC:
	        push hl
	        ld hl, MEM0
	        ex de, hl
	        ld bc, 8
	        ldir
	        ld hl, MEM0
	        srl (hl)
	        inc hl
	        srl (hl)
	        inc hl
	        srl (hl)
	        inc hl
	        inc hl
	        inc hl
	        sla (hl)
	        inc hl
	        sla (hl)
	        inc hl
	        sla (hl)
	        pop hl
	        ld de, MEM0
	        ret

PRINT_COMMA:
	        call __LOAD_S_POSN
	        ld a, e
	        and 16
	        add a, 16

PRINT_TAB:
	        PROC
	        LOCAL LOOP, CONTINUE

	        inc a
	        call __LOAD_S_POSN ; e = current row
	        ld d, a
	        ld a, e
	        cp 21h
	        jr nz, CONTINUE
	        ld e, -1
CONTINUE:
	        ld a, d
	        inc e
	        sub e  ; A = A - E
	        and 31 ;
	        ret z  ; Already at position E
	        ld b, a
LOOP:
	        ld a, ' '
	        call __PRINTCHAR
	        djnz LOOP
	        ret
	        ENDP

PRINT_AT: ; Changes cursor to ROW, COL
	         ; COL in A register
	         ; ROW in stack

	        pop hl    ; Ret address
	        ex (sp), hl ; callee H = ROW
	        ld l, a
	        ex de, hl

	        call __IN_SCREEN
	        ret nc    ; Return if out of screen

	        ld hl, __TVFLAGS
	        res 1, (hl)
#line 482 "C:/zxbasic/library-asm/print.asm"
	        jp __SAVE_S_POSN

	        LOCAL __PRINT_COM
	        LOCAL __BOLD
	        LOCAL __BOLD_LOOP
	        LOCAL __ITALIC
	        LOCAL __PRINT_EOL1
	        LOCAL __PRINT_EOL2
	        LOCAL __PRINT_AT1
	        LOCAL __PRINT_AT2
	        LOCAL __PRINT_AT2_END
	        LOCAL __PRINT_BOLD
	        LOCAL __PRINT_BOLD2
	        LOCAL __PRINT_ITA
	        LOCAL __PRINT_ITA2
	        LOCAL __PRINT_INK
	        LOCAL __PRINT_PAP
	        LOCAL __PRINT_SET_STATE
	        LOCAL __PRINT_TABLE
	        LOCAL __PRINT_TAB, __PRINT_TAB1, __PRINT_TAB2

__PRINT_TABLE:    ; Jump table for 0 .. 22 codes

	        DW __PRINT_NOP    ;  0
	        DW __PRINT_NOP    ;  1
	        DW __PRINT_NOP    ;  2
	        DW __PRINT_NOP    ;  3
	        DW __PRINT_NOP    ;  4
	        DW __PRINT_NOP    ;  5
	        DW __PRINT_COM    ;  6 COMMA
	        DW __PRINT_NOP    ;  7
	        DW __PRINT_DEL    ;  8 DEL
	        DW __PRINT_NOP    ;  9
	        DW __PRINT_NOP    ; 10
	        DW __PRINT_NOP    ; 11
	        DW __PRINT_NOP    ; 12
	        DW __PRINT_0Dh    ; 13
	        DW __PRINT_BOLD   ; 14
	        DW __PRINT_ITA    ; 15
	        DW __PRINT_INK    ; 16
	        DW __PRINT_PAP    ; 17
	        DW __PRINT_FLA    ; 18
	        DW __PRINT_BRI    ; 19
	        DW __PRINT_INV    ; 20
	        DW __PRINT_OVR    ; 21
	        DW __PRINT_AT     ; 22 AT
	        DW __PRINT_TAB    ; 23 TAB

	        ENDP


#line 3 "copy_attr.asm"
#line 4 "C:/zxbasic/library-asm/copy_attr.asm"



COPY_ATTR:
		; Just copies current permanent attribs to temporal attribs
		; and sets print mode
		PROC

		LOCAL INVERSE1
		LOCAL __REFRESH_TMP

	INVERSE1 EQU 02Fh

		ld hl, (ATTR_P)
		ld (ATTR_T), hl

		ld hl, FLAGS2
		call __REFRESH_TMP

		ld hl, P_FLAG
		call __REFRESH_TMP


__SET_ATTR_MODE:		; Another entry to set print modes. A contains (P_FLAG)


		LOCAL TABLE
		LOCAL CONT2

		rra					; Over bit to carry
		ld a, (FLAGS2)
		rla					; Over bit in bit 1, Over2 bit in bit 2
		and 3				; Only bit 0 and 1 (OVER flag)

		ld c, a
		ld b, 0

		ld hl, TABLE
		add hl, bc
		ld a, (hl)
		ld (PRINT_MODE), a

		ld hl, (P_FLAG)
		xor a			; NOP -> INVERSE0
		bit 2, l
		jr z, CONT2
		ld a, INVERSE1 	; CPL -> INVERSE1

CONT2:
		ld (INVERSE_MODE), a
		ret

TABLE:
		nop				; NORMAL MODE
		xor (hl)		; OVER 1 MODE
		and (hl)		; OVER 2 MODE
		or  (hl)		; OVER 3 MODE

#line 65 "C:/zxbasic/library-asm/copy_attr.asm"

__REFRESH_TMP:
		ld a, (hl)
		and 10101010b
		ld c, a
		rra
		or c
		ld (hl), a
		ret

		ENDP

#line 6747 "Program.zxbas"
#line 1 "div8.asm"

				; --------------------------------
__DIVU8:	; 8 bit unsigned integer division
				; Divides (Top of stack, High Byte) / A
		pop hl	; --------------------------------
		ex (sp), hl	; CALLEE

__DIVU8_FAST:	; Does A / H
		ld l, h
		ld h, a		; At this point do H / L

		ld b, 8
		xor a		; A = 0, Carry Flag = 0

__DIV8LOOP:
		sla	h
		rla
		cp	l
		jr	c, __DIV8NOSUB
		sub	l
		inc	h

__DIV8NOSUB:
		djnz __DIV8LOOP

		ld	l, a		; save remainder
		ld	a, h		;

		ret			; a = Quotient,


					; --------------------------------
__DIVI8:		; 8 bit signed integer division Divides (Top of stack) / A
		pop hl		; --------------------------------
		ex (sp), hl

__DIVI8_FAST:
		ld e, a		; store operands for later
		ld c, h

		or a		; negative?
		jp p, __DIV8A
		neg			; Make it positive

__DIV8A:
		ex af, af'
		ld a, h
		or a
		jp p, __DIV8B
		neg
		ld h, a		; make it positive

__DIV8B:
		ex af, af'

		call __DIVU8_FAST

		ld a, c
		xor l		; bit 7 of A = 1 if result is negative

		ld a, h		; Quotient
		ret p		; return if positive

		neg
		ret


__MODU8:		; 8 bit module. REturns A mod (Top of stack) (unsigned operands)
		pop hl
		ex (sp), hl	; CALLEE

__MODU8_FAST:	; __FASTCALL__ entry
		call __DIVU8_FAST
		ld a, l		; Remainder

		ret		; a = Modulus


__MODI8:		; 8 bit module. REturns A mod (Top of stack) (For singed operands)
		pop hl
		ex (sp), hl	; CALLEE

__MODI8_FAST:	; __FASTCALL__ entry
		call __DIVI8_FAST
		ld a, l		; remainder

		ret		; a = Modulus

#line 6748 "Program.zxbas"
#line 1 "divf.asm"

#line 1 "stackf.asm"

	; -------------------------------------------------------------
	; Functions to manage FP-Stack of the ZX Spectrum ROM CALC
	; -------------------------------------------------------------


	__FPSTACK_PUSH EQU 2AB6h	; Stores an FP number into the ROM FP stack (A, ED CB)
	__FPSTACK_POP  EQU 2BF1h	; Pops an FP number out of the ROM FP stack (A, ED CB)

__FPSTACK_PUSH2: ; Pushes Current A ED CB registers and top of the stack on (SP + 4)
	                 ; Second argument to push into the stack calculator is popped out of the stack
	                 ; Since the caller routine also receives the parameters into the top of the stack
	                 ; four bytes must be removed from SP before pop them out

	    call __FPSTACK_PUSH ; Pushes A ED CB into the FP-STACK
	    exx
	    pop hl       ; Caller-Caller return addr
	    exx
	    pop hl       ; Caller return addr

	    pop af
	    pop de
	    pop bc

	    push hl      ; Caller return addr
	    exx
	    push hl      ; Caller-Caller return addr
	    exx

	    jp __FPSTACK_PUSH


__FPSTACK_I16:	; Pushes 16 bits integer in HL into the FP ROM STACK
					; This format is specified in the ZX 48K Manual
					; You can push a 16 bit signed integer as
					; 0 SS LL HH 0, being SS the sign and LL HH the low
					; and High byte respectively
		ld a, h
		rla			; sign to Carry
		sbc	a, a	; 0 if positive, FF if negative
		ld e, a
		ld d, l
		ld c, h
		xor a
		ld b, a
		jp __FPSTACK_PUSH
#line 2 "divf.asm"


	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)

	; All of them uses C EDHL registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order BC DE HL (B not used).
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__DIVF:	; Division
		PROC
		LOCAL __DIVBYZERO
		LOCAL TMP, ERR_SP

	TMP         EQU 23629 ;(DEST)
	ERR_SP      EQU 23613

		call __FPSTACK_PUSH2

		ld hl, (ERR_SP)
		ld (TMP), hl
		ld hl, __DIVBYZERO
		push hl
		ld hl, 0
		add hl, sp
		ld (ERR_SP), hl

		; ------------- ROM DIV
		rst 28h
		defb 01h	; EXCHANGE
		defb 05h	; DIV
		defb 38h;   ; END CALC

		pop hl
		ld hl, (TMP)
		ld (ERR_SP), hl

		jp __FPSTACK_POP

__DIVBYZERO:
		ld hl, (TMP)
		ld (ERR_SP), hl

		ld a, ERROR_NumberTooBig
		ld (ERR_NR), a

		; Returns 0 on DIV BY ZERO error
		xor a
		ld b, a
		ld c, a
		ld d, a
		ld e, a
		ret

		ENDP

#line 6749 "Program.zxbas"
#line 1 "eq16.asm"

__EQ16:	; Test if 16bit values HL == DE
		; Returns result in A: 0 = False, FF = True
			xor a	; Reset carry flag
			sbc hl, de
			ret nz
			inc a
			ret

#line 6750 "Program.zxbas"


#line 1 "ftou32reg.asm"

#line 1 "neg32.asm"

__ABS32:
		bit 7, d
		ret z

__NEG32: ; Negates DEHL (Two's complement)
		ld a, l
		cpl
		ld l, a

		ld a, h
		cpl
		ld h, a

		ld a, e
		cpl
		ld e, a

		ld a, d
		cpl
		ld d, a

		inc l
		ret nz

		inc h
		ret nz

		inc de
		ret

#line 2 "ftou32reg.asm"

__FTOU32REG:	; Converts a Float to (un)signed 32 bit integer (NOTE: It's ALWAYS 32 bit signed)
					; Input FP number in A EDCB (A exponent, EDCB mantissa)
				; Output: DEHL 32 bit number (signed)
		PROC

		LOCAL __IS_FLOAT
		LOCAL __NEGATE

		or a
		jr nz, __IS_FLOAT
		; Here if it is a ZX ROM Integer

		ld h, c
		ld l, d
	ld a, e	 ; Takes sign: FF = -, 0 = +
		ld de, 0
		inc a
		jp z, __NEG32	; Negates if negative
		ret

__IS_FLOAT:  ; Jumps here if it is a true floating point number
		ld h, e
		push hl  ; Stores it for later (Contains Sign in H)

		push de
		push bc

		exx
		pop de   ; Loads mantissa into C'B' E'D'
		pop bc	 ;

		set 7, c ; Highest mantissa bit is always 1
		exx

		ld hl, 0 ; DEHL = 0
		ld d, h
		ld e, l

		;ld a, c  ; Get exponent
		sub 128  ; Exponent -= 128
		jr z, __FTOU32REG_END	; If it was <= 128, we are done (Integers must be > 128)
		jr c, __FTOU32REG_END	; It was decimal (0.xxx). We are done (return 0)

		ld b, a  ; Loop counter = exponent - 128

__FTOU32REG_LOOP:
		exx 	 ; Shift C'B' E'D' << 1, output bit stays in Carry
		sla d
		rl e
		rl b
		rl c

	    exx		 ; Shift DEHL << 1, inserting the carry on the right
		rl l
		rl h
		rl e
		rl d

		djnz __FTOU32REG_LOOP

__FTOU32REG_END:
		pop af   ; Take the sign bit
		or a	 ; Sets SGN bit to 1 if negative
		jp m, __NEGATE ; Negates DEHL

		ret

__NEGATE:
	    exx
	    ld a, d
	    or e
	    or b
	    or c
	    exx
	    jr z, __END
	    inc l
	    jr nz, __END
	    inc h
	    jr nz, __END
	    inc de
	LOCAL __END
__END:
	    jp __NEG32
		ENDP


__FTOU8:	; Converts float in C ED LH to Unsigned byte in A
		call __FTOU32REG
		ld a, l
		ret

#line 6753 "Program.zxbas"


#line 1 "inkey.asm"

	; INKEY Function
	; Returns a string allocated in dynamic memory
	; containing the string.
	; An empty string otherwise.



INKEY:
		PROC
		LOCAL __EMPTY_INKEY
		LOCAL KEY_SCAN
		LOCAL KEY_TEST
		LOCAL KEY_CODE

		ld bc, 3	; 1 char length string
		call __MEM_ALLOC

		ld a, h
		or l
		ret z	; Return if NULL (No memory)

		push hl ; Saves memory pointer

		call KEY_SCAN
		jp nz, __EMPTY_INKEY

		call KEY_TEST
		jp nc, __EMPTY_INKEY

		dec d	; D is expected to be FLAGS so set bit 3 $FF
				; 'L' Mode so no keywords.
		ld e, a	; main key to A
				; C is MODE 0 'KLC' from above still.
		call KEY_CODE ; routine K-DECODE
		pop hl

		ld (hl), 1
		inc hl
		ld (hl), 0
		inc hl
		ld (hl), a
		dec hl
		dec hl	; HL Points to string result
		ret

__EMPTY_INKEY:
		pop hl
		xor a
		ld (hl), a
		inc hl
		ld (hl), a
		dec hl
		ret

	KEY_SCAN	EQU 028Eh
	KEY_TEST	EQU 031Eh
	KEY_CODE	EQU 0333h

		ENDP

#line 6756 "Program.zxbas"
#line 1 "loadstr.asm"



	; Loads a string (ptr) from HL
	; and duplicates it on dynamic memory again
	; Finally, it returns result pointer in HL

__ILOADSTR:		; This is the indirect pointer entry HL = (HL)
			ld a, h
			or l
			ret z
			ld a, (hl)
			inc hl
			ld h, (hl)
			ld l, a

__LOADSTR:		; __FASTCALL__ entry
			ld a, h
			or l
			ret z	; Return if NULL

			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl  ; BC = LEN(a$)

			inc bc
			inc bc	; BC = LEN(a$) + 2 (two bytes for length)

			push hl
			push bc
			call __MEM_ALLOC
			pop bc  ; Recover length
			pop de  ; Recover origin

			ld a, h
			or l
			ret z	; Return if NULL (No memory)

			ex de, hl ; ldir takes HL as source, DE as destiny, so SWAP HL,DE
			push de	; Saves destiny start
			ldir	; Copies string (length number included)
			pop hl	; Recovers destiny in hl as result
			ret
#line 6757 "Program.zxbas"
#line 1 "lti8.asm"

#line 1 "lei8.asm"

__LEI8: ; Signed <= comparison for 8bit int
	        ; A <= H (registers)
	    PROC
	    LOCAL checkParity
	    sub h
	    jr nz, __LTI
	    inc a
	    ret

__LTI8:  ; Test 8 bit values A < H
	    sub h

__LTI:   ; Generic signed comparison
	    jp po, checkParity
	    xor 0x80
checkParity:
	    ld a, 0     ; False
	    ret p
	    inc a       ; True
	    ret
	    ENDP
#line 2 "lti8.asm"
#line 6758 "Program.zxbas"
#line 1 "mul8.asm"

__MUL8:		; Performs 8bit x 8bit multiplication
		PROC

		;LOCAL __MUL8A
		LOCAL __MUL8LOOP
		LOCAL __MUL8B
				; 1st operand (byte) in A, 2nd operand into the stack (AF)
		pop hl	; return address
		ex (sp), hl ; CALLE convention

;;__MUL8_FAST: ; __FASTCALL__ entry
	;;	ld e, a
	;;	ld d, 0
	;;	ld l, d
	;;
	;;	sla h
	;;	jr nc, __MUL8A
	;;	ld l, e
	;;
;;__MUL8A:
	;;
	;;	ld b, 7
;;__MUL8LOOP:
	;;	add hl, hl
	;;	jr nc, __MUL8B
	;;
	;;	add hl, de
	;;
;;__MUL8B:
	;;	djnz __MUL8LOOP
	;;
	;;	ld a, l ; result = A and HL  (Truncate to lower 8 bits)

__MUL8_FAST: ; __FASTCALL__ entry, a = a * h (8 bit mul) and Carry

	    ld b, 8
	    ld l, a
	    xor a

__MUL8LOOP:
	    add a, a ; a *= 2
	    sla l
	    jp nc, __MUL8B
	    add a, h

__MUL8B:
	    djnz __MUL8LOOP

		ret		; result = HL
		ENDP

#line 6759 "Program.zxbas"
#line 1 "mulf.asm"



	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)
	; All of them uses A EDCB registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order A DE BC.
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__MULF:	; Multiplication
		call __FPSTACK_PUSH2

		; ------------- ROM MUL
		rst 28h
		defb 04h	;
		defb 38h;   ; END CALC

		jp __FPSTACK_POP

#line 6760 "Program.zxbas"


#line 1 "pause.asm"

	; The PAUSE statement (Calling the ROM)

__PAUSE:
		ld b, h
	    ld c, l
	    jp 1F3Dh  ; PAUSE_1
#line 6763 "Program.zxbas"
#line 1 "ploadf.asm"

	; Parameter / Local var load
	; A => Offset
	; IX = Stack Frame
; RESULT: HL => IX + DE

#line 1 "iloadf.asm"

	; __FASTCALL__ routine which
	; loads a 40 bits floating point into A ED CB
	; stored at position pointed by POINTER HL
	;A DE, BC <-- ((HL))

__ILOADF:
	    ld a, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, a

	; __FASTCALL__ routine which
	; loads a 40 bits floating point into A ED CB
	; stored at position pointed by POINTER HL
	;A DE, BC <-- (HL)

__LOADF:    ; Loads a 40 bits FP number from address pointed by HL
		ld a, (hl)
		inc hl
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
		ld c, (hl)
		inc hl
		ld b, (hl)
		ret

#line 7 "ploadf.asm"

__PLOADF:
	    push ix
	    pop hl
	    add hl, de
	    jp __LOADF

#line 6764 "Program.zxbas"

#line 1 "printstr.asm"






	; PRINT command routine
	; Prints string pointed by HL

PRINT_STR:
__PRINTSTR:		; __FASTCALL__ Entry to print_string
			PROC
			LOCAL __PRINT_STR_LOOP
	        LOCAL __PRINT_STR_END

	        ld d, a ; Saves A reg (Flag) for later

			ld a, h
			or l
			ret z	; Return if the pointer is NULL

	        push hl

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl	; BC = LEN(a$); HL = &a$

__PRINT_STR_LOOP:
			ld a, b
			or c
			jr z, __PRINT_STR_END 	; END if BC (counter = 0)

			ld a, (hl)
			call __PRINTCHAR
			inc hl
			dec bc
			jp __PRINT_STR_LOOP

__PRINT_STR_END:
	        pop hl
	        ld a, d ; Recovers A flag
	        or a   ; If not 0 this is a temporary string. Free it
	        ret z
	        jp __MEM_FREE ; Frees str from heap and return from there

__PRINT_STR:
	        ; Fastcall Entry
	        ; It ONLY prints strings
	        ; HL = String start
	        ; BC = String length (Number of chars)
	        push hl ; Push str address for later
	        ld d, a ; Saves a FLAG
	        jp __PRINT_STR_LOOP

			ENDP

#line 6766 "Program.zxbas"
#line 1 "pstoref.asm"

	; Stores FP number in A ED CB at location HL+IX
	; HL = Offset
	; IX = Stack Frame
	; A ED CB = FP Number

#line 1 "storef.asm"

__PISTOREF:	; Indect Stores a float (A, E, D, C, B) at location stored in memory, pointed by (IX + HL)
			push de
			ex de, hl	; DE <- HL
			push ix
			pop hl		; HL <- IX
			add hl, de  ; HL <- IX + HL
			pop de

__ISTOREF:  ; Load address at hl, and stores A,E,D,C,B registers at that address. Modifies A' register
	        ex af, af'
			ld a, (hl)
			inc hl
			ld h, (hl)
			ld l, a     ; HL = (HL)
	        ex af, af'

__STOREF:	; Stores the given FP number in A EDCB at address HL
			ld (hl), a
			inc hl
			ld (hl), e
			inc hl
			ld (hl), d
			inc hl
			ld (hl), c
			inc hl
			ld (hl), b
			ret

#line 7 "pstoref.asm"

	; Stored a float number in A ED CB into the address pointed by IX + HL
__PSTOREF:
		push de
	    ex de, hl  ; DE <- HL
	    push ix
		pop hl	   ; HL <- IX
	    add hl, de ; HL <- IX + DE
		pop de
	    jp __STOREF

#line 6767 "Program.zxbas"
#line 1 "pstorestr.asm"

; vim:ts=4:et:sw=4
	;
	; Stores an string (pointer to the HEAP by DE) into the address pointed
	; by (IX + BC). A new copy of the string is created into the HEAP
	;

#line 1 "storestr.asm"

; vim:ts=4:et:sw=4
	; Stores value of current string pointed by DE register into address pointed by HL
	; Returns DE = Address pointer  (&a$)
	; Returns HL = HL               (b$ => might be needed later to free it from the heap)
	;
	; e.g. => HL = _variableName    (DIM _variableName$)
	;         DE = Address into the HEAP
	;
	; This function will resize (REALLOC) the space pointed by HL
	; before copying the content of b$ into a$


#line 1 "strcpy.asm"

#line 1 "realloc.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.







	; ---------------------------------------------------------------------
	; MEM_REALLOC
	;  Reallocates a block of memory in the heap.
	;
	; Parameters
	;  HL = Pointer to the original block
	;  BC = New Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	;
; Notes:
	;  If BC = 0, the block is freed, otherwise
	;  the content of the original block is copied to the new one, and
	;  the new size is adjusted. If BC < original length, the content
	;  will be truncated. Otherwise, extra block content might contain
	;  memory garbage.
	;
	; ---------------------------------------------------------------------
__REALLOC:    ; Reallocates block pointed by HL, with new length BC
	        PROC

	        LOCAL __REALLOC_END

	        ld a, h
	        or l
	        jp z, __MEM_ALLOC    ; If HL == NULL, just do a malloc

	        ld e, (hl)
	        inc hl
	        ld d, (hl)    ; DE = First 2 bytes of HL block

	        push hl
	        exx
	        pop de
	        inc de        ; DE' <- HL + 2
	        exx            ; DE' <- HL (Saves current pointer into DE')

	        dec hl        ; HL = Block start

	        push de
	        push bc
	        call __MEM_FREE        ; Frees current block
	        pop bc
	        push bc
	        call __MEM_ALLOC    ; Gets a new block of length BC
	        pop bc
	        pop de

	        ld a, h
	        or l
	        ret z        ; Return if HL == NULL (No memory)

	        ld (hl), e
	        inc hl
	        ld (hl), d
	        inc hl        ; Recovers first 2 bytes in HL

	        dec bc
	        dec bc        ; BC = BC - 2 (Two bytes copied)

	        ld a, b
	        or c
	        jp z, __REALLOC_END        ; Ret if nothing to copy (BC == 0)

	        exx
	        push de
	        exx
	        pop de        ; DE <- DE' ; Start of remaining block

	        push hl        ; Saves current Block + 2 start
        ex de, hl    ; Exchanges them: DE is destiny block
	        ldir        ; Copies BC Bytes
	        pop hl        ; Recovers Block + 2 start

__REALLOC_END:

	        dec hl        ; Set HL
	        dec hl        ; To begin of block
	        ret

	        ENDP

#line 2 "strcpy.asm"

	; String library


__STRASSIGN: ; Performs a$ = b$ (HL = address of a$; DE = Address of b$)
			PROC

			LOCAL __STRREALLOC
			LOCAL __STRCONTINUE
			LOCAL __B_IS_NULL
			LOCAL __NOTHING_TO_COPY

			ld b, d
			ld c, e
			ld a, b
			or c
			jr z, __B_IS_NULL

			ex de, hl
			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl		; BC = LEN(b$)
			ex de, hl	; DE = &b$

__B_IS_NULL:		; Jumps here if B$ pointer is NULL
			inc bc
			inc bc		; BC = BC + 2  ; (LEN(b$) + 2 bytes for storing length)

			push de
			push hl

			ld a, h
			or l
			jr z, __STRREALLOC

			dec hl
			ld d, (hl)
			dec hl
			ld e, (hl)	; DE = MEMBLOCKSIZE(a$)
			dec de
			dec de		; DE = DE - 2  ; (Membloksize takes 2 bytes for memblock length)

			ld h, b
			ld l, c		; HL = LEN(b$) + 2  => Minimum block size required
			ex de, hl	; Now HL = BLOCKSIZE(a$), DE = LEN(b$) + 2

			or a		; Prepare to subtract BLOCKSIZE(a$) - LEN(b$)
			sbc hl, de  ; Carry if len(b$) > Blocklen(a$)
			jr c, __STRREALLOC ; No need to realloc
			; Need to reallocate at least to len(b$) + 2
			ex de, hl	; DE = Remaining bytes in a$ mem block.
			ld hl, 4
			sbc hl, de  ; if remaining bytes < 4 we can continue
			jr nc,__STRCONTINUE ; Otherwise, we realloc, to free some bytes

__STRREALLOC:
			pop hl
			call __REALLOC	; Returns in HL a new pointer with BC bytes allocated
			push hl

__STRCONTINUE:	;   Pops hl and de SWAPPED
			pop de	;	DE = &a$
			pop hl	; 	HL = &b$

			ld a, d		; Return if not enough memory for new length
			or e
			ret z		; Return if DE == NULL (0)

__STRCPY:	; Copies string pointed by HL into string pointed by DE
				; Returns DE as HL (new pointer)
			ld a, h
			or l
			jr z, __NOTHING_TO_COPY
			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl
			inc bc
			inc bc
			push de
			ldir
			pop hl
			ret

__NOTHING_TO_COPY:
			ex de, hl
			ld (hl), e
			inc hl
			ld (hl), d
			dec hl
			ret

			ENDP

#line 14 "storestr.asm"

__PISTORE_STR:          ; Indirect assignement at (IX + BC)
	    push ix
	    pop hl
	    add hl, bc

__ISTORE_STR:           ; Indirect assignement, hl point to a pointer to a pointer to the heap!
	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c             ; HL = (HL)

__STORE_STR:
	    push de             ; Pointer to b$
	    push hl             ; Array pointer to variable memory address

	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c             ; HL = (HL)

	    call __STRASSIGN    ; HL (a$) = DE (b$); HL changed to a new dynamic memory allocation
	    ex de, hl           ; DE = new address of a$
	    pop hl              ; Recover variable memory address pointer

	    ld (hl), e
	    inc hl
	    ld (hl), d          ; Stores a$ ptr into elemem ptr

	    pop hl              ; Returns ptr to b$ in HL (Caller might needed to free it from memory)
	    ret

#line 8 "pstorestr.asm"

__PSTORE_STR:
	    push ix
	    pop hl
	    add hl, bc
	    jp __STORE_STR

#line 6768 "Program.zxbas"
#line 1 "pstorestr2.asm"

; vim:ts=4:et:sw=4
	;
	; Stores an string (pointer to the HEAP by DE) into the address pointed
	; by (IX + BC). No new copy of the string is created into the HEAP, since
	; it's supposed it's already created (temporary string)
	;

#line 1 "storestr2.asm"

	; Similar to __STORE_STR, but this one is called when
	; the value of B$ if already duplicated onto the stack.
	; So we needn't call STRASSING to create a duplication
	; HL = address of string memory variable
	; DE = address of 2n string. It just copies DE into (HL)
	; 	freeing (HL) previously.



__PISTORE_STR2: ; Indirect store temporary string at (IX + BC)
	    push ix
	    pop hl
	    add hl, bc

__ISTORE_STR2:
		ld c, (hl)  ; Dereferences HL
		inc hl
		ld h, (hl)
		ld l, c		; HL = *HL (real string variable address)

__STORE_STR2:
		push hl
		ld c, (hl)
		inc hl
		ld h, (hl)
		ld l, c		; HL = *HL (real string address)

		push de
		call __MEM_FREE
		pop de

		pop hl
		ld (hl), e
		inc hl
		ld (hl), d
		dec hl		; HL points to mem address variable. This might be useful in the future.

		ret

#line 9 "pstorestr2.asm"

__PSTORE_STR2:
	    push ix
	    pop hl
	    add hl, bc
	    jp __STORE_STR2

#line 6769 "Program.zxbas"
#line 1 "random.asm"

	; RANDOM functions

RANDOMIZE:
	    ; Randomize with 32 bit seed in DE HL
	    ; if SEED = 0, calls ROM to take frames as seed
	    PROC

	    LOCAL TAKE_FRAMES
	    LOCAL FRAMES

	    ld a, h
	    or l
	    or d
	    or e
	    jr z, TAKE_FRAMES

	    ld (RANDOM_SEED_LOW), hl
	    ld (RANDOM_SEED_HIGH), de
	    ret

TAKE_FRAMES:
	    ; Takes the seed from frames
	    ld hl, (FRAMES)
	    ld (RANDOM_SEED_LOW), hl
	    ld hl, (FRAMES + 2)
	    ld (RANDOM_SEED_HIGH), hl
	    ret

	FRAMES EQU    23672
	    ENDP

	RANDOM_SEED_HIGH EQU RAND+6    ; RANDOM seed, 16 higher bits
	RANDOM_SEED_LOW     EQU 23670  ; RANDOM seed, 16 lower bits


RAND:
	    PROC
	    LOCAL RAND_LOOP
	    ld b, 4
RAND_LOOP:
	    ld  hl,(RANDOM_SEED_LOW)   ; xz -> yw
	    ld  de,0C0DEh   ; yw -> zt
	    ld  (RANDOM_SEED_LOW),de  ; x = y, z = w
	    ld  a,e         ; w = w ^ ( w << 3 )
	    add a,a
	    add a,a
	    add a,a
	    xor e
	    ld  e,a
	    ld  a,h         ; t = x ^ (x << 1)
	    add a,a
	    xor h
	    ld  d,a
	    rra             ; t = t ^ (t >> 1) ^ w
	    xor d
	    xor e
	    ld  h,l         ; y = z
	    ld  l,a         ; w = t
	    ld  (RANDOM_SEED_HIGH),hl
	    push af
	    djnz RAND_LOOP
	    pop af
	    pop af
	    ld d, a
	    pop af
	    ld e, a
	    pop af
	    ld h, a
	    ret
	    ENDP

RND:
	    ; Returns a FLOATING point integer
	    ; using RAND as a mantissa
	    PROC
	    LOCAL RND_LOOP

	    call RAND
	    ; BC = HL since ZX BASIC uses ED CB A registers for FP
	    ld b, h
	    ld c, l

	    ld a, e
	    or d
	    or c
	    or b
	    ret z   ; Returns 0 if BC=DE=0

	    ; We already have a random 32 bit mantissa in ED CB
	    ; From 0001h to FFFFh

	    ld l, 81h	; Exponent
	    ; At this point we have [0 .. 1) FP number;

	    ; Now we must shift mantissa left until highest bit goes into carry
	    ld a, e ; Use A register for rotating E faster (using RLA instead of RL E)
RND_LOOP:
	    dec l
	    sla b
	    rl c
	    rl d
	    rla
	    jp nc, RND_LOOP

	    ; Now undo last mantissa left-shift once
	    ccf ; Clears carry to insert a 0 bit back into mantissa -> positive FP number
	    rra
	    rr d
	    rr c
	    rr b

	    ld e, a     ; E must have the highest byte
	    ld a, l     ; exponent in A
	    ret

	    ENDP

#line 6770 "Program.zxbas"



#line 1 "str.asm"

	; The STR$( ) BASIC function implementation

	; Given a FP number in C ED LH
	; Returns a pointer (in HL) to the memory heap
	; containing the FP number string representation





__STR:

__STR_FAST:

		PROC
		LOCAL __STR_END
		LOCAL RECLAIM2
		LOCAL STK_END

		ld hl, (STK_END)
		push hl; Stores STK_END
		ld hl, (ATTR_T)	; Saves ATTR_T since it's changed by STR$ due to a ROM BUG
		push hl

	    call __FPSTACK_PUSH ; Push number into stack
		rst 28h		; # Rom Calculator
		defb 2Eh	; # STR$(x)
		defb 38h	; # END CALC
		call __FPSTACK_POP ; Recovers string parameters to A ED CB (Only ED LH are important)

		pop hl
		ld (ATTR_T), hl	; Restores ATTR_T
		pop hl
		ld (STK_END), hl	; Balance STK_END to avoid STR$ bug

		push bc
		push de

		inc bc
		inc bc
		call __MEM_ALLOC ; HL Points to new block

		pop de
		pop bc

		push hl
		ld a, h
		or l
		jr z, __STR_END  ; Return if NO MEMORY (NULL)

		push bc
		push de
		ld (hl), c
		inc hl
		ld (hl), b
		inc hl		; Copies length

		ex de, hl	; HL = start of original string
		ldir		; Copies string content

		pop de		; Original (ROM-CALC) string
		pop bc		; Original Length

__STR_END:
		ex de, hl
		inc bc

		call RECLAIM2 ; Frees TMP Memory
		pop hl		  ; String result

		ret

	RECLAIM2 EQU 19E8h
	STK_END EQU 5C65h

		ENDP

#line 6774 "Program.zxbas"
#line 1 "strcat.asm"


#line 1 "strlen.asm"

	; Returns len if a string
	; If a string is NULL, its len is also 0
	; Result returned in HL

__STRLEN:	; Direct FASTCALL entry
			ld a, h
			or l
			ret z

			ld a, (hl)
			inc hl
			ld h, (hl)  ; LEN(str) in HL
			ld l, a
			ret


#line 3 "strcat.asm"

__ADDSTR:	; Implements c$ = a$ + b$
				; hl = &a$, de = &b$ (pointers)


__STRCAT2:	; This routine creates a new string in dynamic space
				; making room for it. Then copies a$ + b$ into it.
				; HL = a$, DE = b$

			PROC

			LOCAL __STR_CONT
			LOCAL __STRCATEND

			push hl
			call __STRLEN
			ld c, l
			ld b, h		; BC = LEN(a$)
			ex (sp), hl ; (SP) = LEN (a$), HL = a$
			push hl		; Saves pointer to a$

			inc bc
			inc bc		; +2 bytes to store length

			ex de, hl
			push hl
			call __STRLEN
			; HL = len(b$)

			add hl, bc	; Total str length => 2 + len(a$) + len(b$)

			ld c, l
			ld b, h		; BC = Total str length + 2
			call __MEM_ALLOC
			pop de		; HL = c$, DE = b$

			ex de, hl	; HL = b$, DE = c$
			ex (sp), hl ; HL = a$, (SP) = b$

			exx
			pop de		; D'E' = b$
			exx

			pop bc		; LEN(a$)

			ld a, d
			or e
		ret z		; If no memory: RETURN

__STR_CONT:
			push de		; Address of c$

			ld a, h
			or l
			jr nz, __STR_CONT1 ; If len(a$) != 0 do copy

	        ; a$ is NULL => uses HL = DE for transfer
			ld h, d
			ld l, e
			ld (hl), a	; This will copy 00 00 at (DE) location
	        inc de      ;
	        dec bc      ; Ensure BC will be set to 1 in the next step

__STR_CONT1:        ; Copies a$ (HL) into c$ (DE)
			inc bc
			inc bc		; BC = BC + 2
		ldir		; MEMCOPY: c$ = a$
			pop hl		; HL = c$

			exx
			push de		; Recovers b$; A ex hl,hl' would be very handy
			exx

			pop de		; DE = b$

__STRCAT: ; ConCATenate two strings a$ = a$ + b$. HL = ptr to a$, DE = ptr to b$
		  ; NOTE: Both DE, BC and AF are modified and lost
			  ; Returns HL (pointer to a$)
			  ; a$ Must be NOT NULL
			ld a, d
			or e
			ret z		; Returns if de is NULL (nothing to copy)

			push hl		; Saves HL to return it later

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl
			add hl, bc	; HL = end of (a$) string ; bc = len(a$)
			push bc		; Saves LEN(a$) for later

			ex de, hl	; DE = end of string (Begin of copy addr)
			ld c, (hl)
			inc hl
			ld b, (hl)	; BC = len(b$)

			ld a, b
			or c
			jr z, __STRCATEND; Return if len(b$) == 0

			push bc			 ; Save LEN(b$)
			inc hl			 ; Skip 2nd byte of len(b$)
			ldir			 ; Concatenate b$

			pop bc			 ; Recovers length (b$)
			pop hl			 ; Recovers length (a$)
			add hl, bc		 ; HL = LEN(a$) + LEN(b$) = LEN(a$+b$)
			ex de, hl		 ; DE = LEN(a$+b$)
			pop hl

			ld (hl), e		 ; Updates new LEN and return
			inc hl
			ld (hl), d
			dec hl
			ret

__STRCATEND:
			pop hl		; Removes Len(a$)
			pop hl		; Restores original HL, so HL = a$
			ret

			ENDP

#line 6775 "Program.zxbas"
#line 1 "strictbool.asm"

	; This routine is called if --strict-boolean was set at the command line.
	; It will make any boolean result to be always 0 or 1

__NORMALIZE_BOOLEAN:
	    or a
	    ret z
	    ld a, 1
	    ret

#line 6776 "Program.zxbas"
#line 1 "string.asm"

	; String library



__STR_ISNULL:	; Returns A = FF if HL is 0, 0 otherwise
			ld a, h
			or l
			sub 1		; Only CARRY if HL is NULL
			sbc a, a	; Only FF if HL is NULL (0 otherwise)
			ret


__STRCMP:	; Compares strings at HL, DE: Returns 0 if EQual, -1 if HL < DE, +1 if HL > DE
				; A register is preserved and returned in A'
			PROC ; __FASTCALL__

			LOCAL __STRCMPZERO
			LOCAL __STRCMPEXIT
			LOCAL __STRCMPLOOP
			LOCAL __NOPRESERVEBC
			LOCAL __EQULEN
			LOCAL __EQULEN1
			LOCAL __HLZERO

			ex af, af'	; Saves current A register in A' (it's used by STRXX comparison functions)

			ld a, h
			or l
			jr z, __HLZERO

			ld a, d
			or e
			ld a, 1
			ret z		; Returns +1 if HL is not NULL and DE is NULL

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl		; BC = LEN(a$)
			push hl		; HL = &a$, saves it

			ex de, hl
			ld e, (hl)
			inc hl
			ld d, (hl)
			inc hl
			ex de, hl	; HL = LEN(b$), de = &b$

			; At this point Carry is cleared, and A reg. = 1
			sbc hl, bc	; Carry if len(b$) > len(a$)
			jr z, __EQULEN	; Jump if they have the same length so A reg. = 0
			jr c, __EQULEN1 ; Jump if len(b$) > len(a$) so A reg. = 1
__NOPRESERVEBC:
			add hl, bc	; Restore HL (original length)
			ld b, h		; len(b$) <= len(a$)
			ld c, l		; so BC = hl
			dec a		; At this point A register = 0, it must be -1 since len(a$) > len(b$)
__EQULEN:
			dec a		; A = 0 if len(a$) = len(b$), -1 otherwise
__EQULEN1:
			pop hl		; Recovers A$ pointer
			push af		; Saves A for later (Value to return if strings reach the end)
	        ld a, b
	        or c
	        jr z, __STRCMPZERO ; empty string being compared

		; At this point: BC = lesser length, DE and HL points to b$ and a$ chars respectively
__STRCMPLOOP:
			ld a, (de)
			cpi
			jr nz, __STRCMPEXIT ; (HL) != (DE). Examine carry
			jp po, __STRCMPZERO ; END of string (both are equal)
			inc de
			jp __STRCMPLOOP

__STRCMPZERO:
			pop af		; This is -1 if len(a$) < len(b$), +1 if len(b$) > len(a$), 0 otherwise
			ret

__STRCMPEXIT:		; Sets A with the following value
			dec hl		; Get back to the last char
			cp (hl)
			sbc a, a	; A = -1 if carry => (DE) < (HL); 0 otherwise (DE) > (HL)
			cpl			; A = -1 if (HL) < (DE), 0 otherwise
			add a, a    ; A = A * 2 (thus -2 or 0)
			inc a		; A = A + 1 (thus -1 or 1)

			pop bc		; Discard top of the stack
			ret

__HLZERO:
			or d
			or e
			ret z		; Returns 0 (EQ) if HL == DE == NULL
			ld a, -1
			ret			; Returns -1 if HL is NULL and DE is not NULL

			ENDP

			; The following routines perform string comparison operations (<, >, ==, etc...)
			; On return, A will contain 0 for False, other value for True
			; Register A' will determine whether the incoming strings (HL, DE) will be freed
		; from dynamic memory on exit:
			;		Bit 0 => 1 means HL will be freed.
			;		Bit 1 => 1 means DE will be freed.

__STREQ:	; Compares a$ == b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			;inc a		; If A == -1, return 0
			;jp z, __FREE_STR

			;dec a		;
			;dec a		; Return -1 if a = 0 (True), returns 0 if A == 1 (False)
	        sub 1
	        sbc a, a
			jp __FREE_STR


__STRNE:	; Compares a$ != b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			;jp z, __FREE_STR

			;ld a, 0FFh	; Returns 0xFFh (True)
			jp __FREE_STR


__STRLT:	; Compares a$ < b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			jp z, __FREE_STR ; Returns 0 if A == B

			dec a		; Returns 0 if A == 1 => a$ > b$
			;jp z, __FREE_STR

			;inc a		; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRLE:	; Compares a$ <= b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			dec a		; Returns 0 if A == 1 => a$ < b$
			;jp z, __FREE_STR

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRGT:	; Compares a$ > b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			jp z, __FREE_STR		; Returns 0 if A == B

			inc a		; Returns 0 if A == -1 => a$ < b$
			;jp z, __FREE_STR		; Returns 0 if A == B

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRGE:	; Compares a$ >= b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			inc a		; Returns 0 if A == -1 => a$ < b$
			;jr z, __FREE_STR

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return

__FREE_STR: ; This exit point will test A' for bits 0 and 1
				; If bit 0 is 1 => Free memory from HL pointer
				; If bit 1 is 1 => Free memory from DE pointer
				; Finally recovers A, to return the result
			PROC

			LOCAL __FREE_STR2
			LOCAL __FREE_END

			ex af, af'
			bit 0, a
			jr z, __FREE_STR2

			push af
			push de
			call __MEM_FREE
			pop de
			pop af

__FREE_STR2:
			bit 1, a
			jr z, __FREE_END

			ex de, hl
			call __MEM_FREE

__FREE_END:
			ex af, af'
			ret

			ENDP

#line 6777 "Program.zxbas"

#line 1 "strslice.asm"

	; String slicing library
	; HL = Str pointer
	; DE = String start
	; BC = String character end
	; A register => 0 => the HL pointer wont' be freed from the HEAP
	; e.g. a$(5 TO 10) => HL = a$; DE = 5; BC = 10

	; This implements a$(X to Y) being X and Y first and
	; last characters respectively. If X > Y, NULL is returned

	; Otherwise returns a pointer to a$ FROM X to Y (starting from 0)
	; if Y > len(a$), then a$ will be padded with spaces (reallocating
	; it in dynamic memory if needed). Returns pointer (HL) to resulting
	; string. NULL (0) if no memory for padding.
	;





__STRSLICE:			; Callee entry
		pop hl			; Return ADDRESS
		pop bc			; Last char pos
		pop de			; 1st char pos
		ex (sp), hl		; CALLEE. -> String start

__STRSLICE_FAST:	; __FASTCALL__ Entry
		PROC

		LOCAL __CONT
		LOCAL __EMPTY
		LOCAL __FREE_ON_EXIT

		push hl			; Stores original HL pointer to be recovered on exit
		ex af, af'		; Saves A register for later

		push hl
		call __STRLEN
		inc bc			; Last character position + 1 (string starts from 0)
		or a
		sbc hl, bc		; Compares length with last char position
		jr nc, __CONT	; If Carry => We must copy to end of string
		add hl, bc		; Restore back original LEN(a$) in HL
		ld b, h
		ld c, l			; Copy to the end of str
		ccf				; Clears Carry flag for next subtraction

__CONT:
		ld h, b
		ld l, c			; HL = Last char position to copy (1 for char 0, 2 for char 1, etc)
		sbc hl, de		; HL = LEN(a$) - DE => Number of chars to copy
		jr z, __EMPTY	; 0 Chars to copy => Return HL = 0 (NULL STR)
		jr c, __EMPTY	; If Carry => Nothing to return (NULL STR)

		ld b, h
		ld c, l			; BC = Number of chars to copy
		inc bc
		inc bc			; +2 bytes for string length number

		push bc
		push de
		call __MEM_ALLOC
		pop de
		pop bc
		ld a, h
		or l
		jr z, __EMPTY	; Return if NULL (no memory)

		dec bc
		dec bc			; Number of chars to copy (Len of slice)

		ld (hl), c
		inc hl
		ld (hl), b
		inc hl			; Stores new string length

		ex (sp), hl		; Pointer to A$ now in HL; Pointer to new string chars in Stack
		inc hl
		inc hl			; Skip string length
		add hl, de		; Were to start from A$
		pop de			; Start of new string chars
		push de			; Stores it again
		ldir			; Copies BC chars
		pop de
		dec de
		dec de			; Points to String LEN start
		ex de, hl		; Returns it in HL
		jr __FREE_ON_EXIT

__EMPTY:			; Return NULL (empty) string
		pop hl
		ld hl, 0		; Return NULL


__FREE_ON_EXIT:
		ex af, af'		; Recover original A register
		ex (sp), hl		; Original HL pointer

		or a
		call nz, __MEM_FREE

		pop hl			; Recover result
		ret

		ENDP

#line 6779 "Program.zxbas"
#line 1 "u32tofreg.asm"


__I8TOFREG:
		ld l, a
		rlca
		sbc a, a	; A = SGN(A)
		ld h, a
		ld e, a
		ld d, a

__I32TOFREG:	; Converts a 32bit signed integer (stored in DEHL)
					; to a Floating Point Number returned in (A ED CB)

		ld a, d
		or a		; Test sign

		jp p, __U32TOFREG	; It was positive, proceed as 32bit unsigned

		call __NEG32		; Convert it to positive
		call __U32TOFREG	; Convert it to Floating point

		set 7, e			; Put the sign bit (negative) in the 31bit of mantissa
		ret

__U8TOFREG:
					; Converts an unsigned 8 bit (A) to Floating point
		ld l, a
		ld h, 0
		ld e, h
		ld d, h

__U32TOFREG:	; Converts an unsigned 32 bit integer (DEHL)
					; to a Floating point number returned in A ED CB

	    PROC

	    LOCAL __U32TOFREG_END

		ld a, d
		or e
		or h
		or l
	    ld b, d
		ld c, e		; Returns 00 0000 0000 if ZERO
		ret z

		push de
		push hl

		exx
		pop de  ; Loads integer into B'C' D'E'
		pop bc
		exx

		ld l, 128	; Exponent
		ld bc, 0	; DEBC = 0
		ld d, b
		ld e, c

__U32TOFREG_LOOP: ; Also an entry point for __F16TOFREG
		exx
		ld a, d 	; B'C'D'E' == 0 ?
		or e
		or b
		or c
		jp z, __U32TOFREG_END	; We are done

		srl b ; Shift B'C' D'E' >> 1, output bit stays in Carry
		rr c
		rr d
		rr e
		exx

		rr e ; Shift EDCB >> 1, inserting the carry on the left
		rr d
		rr c
		rr b

		inc l	; Increment exponent
		jp __U32TOFREG_LOOP


__U32TOFREG_END:
		exx
	    ld a, l     ; Puts the exponent in a
		res 7, e	; Sets the sign bit to 0 (positive)

		ret
	    ENDP

#line 6780 "Program.zxbas"

ZXBASIC_USER_DATA:
	_input_LastK EQU 23560
	_counter EQU 23672
	_hiCounter EQU 23674
_currentOp:
	DEFB 00
_screenScore:
	DEFB 00, 00
_workingScore:
	DEFB 00, 00
_screenLevel:
	DEFB 00
_workingLevel:
	DEFB 00
	_udgAddress EQU 23675
_playedTetrisMusic:
	DEFB 00h
_level:
	DEFB 00
_game:
	DEFB 00
	_chars EQU 23606
_screenCells:
	DEFW __LABEL546
_screenCells.__DATA__.__PTR__:
	DEFW _screenCells.__DATA__
_screenCells.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL546:
	DEFW 0001h
	DEFW 0014h
	DEFB 01h
_workingCells:
	DEFW __LABEL547
_workingCells.__DATA__.__PTR__:
	DEFW _workingCells.__DATA__
_workingCells.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL547:
	DEFW 0001h
	DEFW 0014h
	DEFB 01h
_ops:
	DEFW __LABEL548
_ops.__DATA__.__PTR__:
	DEFW _ops.__DATA__
_ops.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL548:
	DEFW 0001h
	DEFW 00C8h
	DEFB 01h
_screenSymbol:
	DEFW __LABEL549
_screenSymbol.__DATA__.__PTR__:
	DEFW _screenSymbol.__DATA__
_screenSymbol.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL549:
	DEFW 0001h
	DEFW 0002h
	DEFB 01h
_workingSymbol:
	DEFW __LABEL550
_workingSymbol.__DATA__.__PTR__:
	DEFW _workingSymbol.__DATA__
_workingSymbol.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL550:
	DEFW 0001h
	DEFW 0002h
	DEFB 01h
_sprites:
	DEFW __LABEL551
_sprites.__DATA__.__PTR__:
	DEFW _sprites.__DATA__
_sprites.__DATA__:
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 00h
	DEFB 7Fh
	DEFB 41h
	DEFB 5Bh
	DEFB 5Bh
	DEFB 43h
	DEFB 5Fh
	DEFB 7Fh
	DEFB 00h
	DEFB 07h
	DEFB 07h
	DEFB 05h
	DEFB 05h
	DEFB 07h
	DEFB 07h
	DEFB 00h
	DEFB 00h
	DEFB 70h
	DEFB 70h
	DEFB 50h
	DEFB 50h
	DEFB 70h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 77h
	DEFB 77h
	DEFB 55h
	DEFB 55h
	DEFB 77h
	DEFB 77h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 77h
	DEFB 44h
	DEFB 24h
	DEFB 14h
	DEFB 77h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 77h
	DEFB 55h
	DEFB 56h
	DEFB 55h
	DEFB 75h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 60h
	DEFB 40h
	DEFB 60h
	DEFB 40h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 36h
	DEFB 45h
	DEFB 26h
	DEFB 14h
	DEFB 64h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 77h
	DEFB 44h
	DEFB 66h
	DEFB 44h
	DEFB 77h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0C0h
	DEFB 0A0h
	DEFB 0A0h
	DEFB 0A0h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 47h
	DEFB 44h
	DEFB 46h
	DEFB 44h
	DEFB 77h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 57h
	DEFB 54h
	DEFB 56h
	DEFB 54h
	DEFB 27h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 97h
	DEFB 0D4h
	DEFB 0B6h
	DEFB 94h
	DEFB 97h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 57h
	DEFB 22h
	DEFB 22h
	DEFB 22h
	DEFB 52h
	DEFB 00h
	DEFB 0FFh
	DEFB 0C7h
	DEFB 0BBh
	DEFB 0BBh
	DEFB 0BBh
	DEFB 0C7h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 55h
	DEFB 0AAh
	DEFB 0FFh
	DEFB 0AAh
	DEFB 55h
	DEFB 0FFh
	DEFB 00h
	DEFB 5Dh
	DEFB 6Bh
	DEFB 5Dh
	DEFB 6Bh
	DEFB 5Dh
	DEFB 6Bh
	DEFB 5Dh
	DEFB 6Bh
	DEFB 00h
	DEFB 0FFh
	DEFB 0AAh
	DEFB 55h
	DEFB 0FFh
	DEFB 55h
	DEFB 0AAh
	DEFB 0FFh
	DEFB 0D6h
	DEFB 0BAh
	DEFB 0D6h
	DEFB 0BAh
	DEFB 0D6h
	DEFB 0BAh
	DEFB 0D6h
	DEFB 0BAh
	DEFB 00h
	DEFB 36h
	DEFB 45h
	DEFB 25h
	DEFB 16h
	DEFB 14h
	DEFB 64h
	DEFB 00h
__LABEL551:
	DEFW 0001h
	DEFW 0008h
	DEFB 01h
_tetrisPieces:
	DEFW __LABEL552
_tetrisPieces.__DATA__.__PTR__:
	DEFW _tetrisPieces.__DATA__
_tetrisPieces.__DATA__:
	DEFB 0F8h
	DEFB 08h
	DEFB 08h
	DEFB 08h
	DEFB 0F8h
	DEFB 08h
	DEFB 08h
	DEFB 08h
	DEFB 0CCh
	DEFB 0CCh
	DEFB 00h
	DEFB 00h
	DEFB 0CCh
	DEFB 0CCh
	DEFB 00h
	DEFB 00h
	DEFB 8Ch
	DEFB 0E8h
	DEFB 08h
	DEFB 00h
	DEFB 0E4h
	DEFB 24h
	DEFB 0Ch
	DEFB 00h
	DEFB 28h
	DEFB 0E8h
	DEFB 0Ch
	DEFB 00h
	DEFB 0ECh
	DEFB 84h
	DEFB 04h
	DEFB 00h
	DEFB 68h
	DEFB 0CCh
	DEFB 04h
	DEFB 00h
	DEFB 68h
	DEFB 0CCh
	DEFB 04h
	DEFB 00h
	DEFB 0C4h
	DEFB 6Ch
	DEFB 08h
	DEFB 00h
	DEFB 0C4h
	DEFB 6Ch
	DEFB 08h
	DEFB 00h
	DEFB 48h
	DEFB 0ECh
	DEFB 08h
	DEFB 00h
	DEFB 0E4h
	DEFB 4Ch
	DEFB 04h
	DEFB 00h
__LABEL552:
	DEFW 0002h
	DEFW 0002h
	DEFW 0004h
	DEFB 01h
_expandedPiece:
	DEFW __LABEL553
_expandedPiece.__DATA__.__PTR__:
	DEFW _expandedPiece.__DATA__
_expandedPiece.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL553:
	DEFW 0002h
	DEFW 0004h
	DEFW 0004h
	DEFB 01h
_expandedSize:
	DEFW __LABEL554
_expandedSize.__DATA__.__PTR__:
	DEFW _expandedSize.__DATA__
_expandedSize.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL554:
	DEFW 0001h
	DEFW 0002h
	DEFB 01h
_dead:
	DEFW __LABEL555
_dead.__DATA__.__PTR__:
	DEFW _dead.__DATA__
_dead.__DATA__:
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 01h
__LABEL555:
	DEFW 0001h
	DEFW 000Ah
	DEFB 01h
_win:
	DEFW __LABEL556
_win.__DATA__.__PTR__:
	DEFW _win.__DATA__
_win.__DATA__:
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 00h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 01h
__LABEL556:
	DEFW 0001h
	DEFW 000Ah
	DEFB 01h
__LABEL534:
	DEFB 0FFh
__LABEL535:
	DEFB 01h
__LABEL544:
	DEFB 01h
__LABEL545:
	DEFB 01h
ZXBASIC_MEM_HEAP:
	; Defines DATA END
ZXBASIC_USER_DATA_END EQU ZXBASIC_MEM_HEAP + ZXBASIC_HEAP_SIZE
	; Defines USER DATA Length in bytes
ZXBASIC_USER_DATA_LEN EQU ZXBASIC_USER_DATA_END - ZXBASIC_USER_DATA
	END
