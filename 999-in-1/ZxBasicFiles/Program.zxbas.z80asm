	.zxbasic
	org 32768
	; Defines HEAP SIZE
ZXBASIC_HEAP_SIZE EQU 128
__START_PROGRAM:
	di
	push ix
	push iy
	exx
	push hl
	exx
	ld hl, 0
	add hl, sp
	ld (__CALL_BACK__), hl
	ei
	call __MEM_INIT
	call __PRINT_INIT
__LABEL__start:
#line 1
		.org 24576
introScreenData:
		DEFW 0000h, 018Ch, 0252h, 0252h, 01CEh, 0042h, 039Ch, 0000h, 00C6h, 0129h, 00E7h, 0021h, 01CEh, 0000h, 0292h, 02D6h, 02B2h, 0292h, 0007h, 0000h
deathScreenData:
		DEFW 00000h, 00078h, 00084h, 00084h, 00102h, 0014Ah, 00102h, 00132h, 00084h, 00048h, 0017Ah, 00303h, 00084h, 00048h, 00030h, 00030h, 00048h, 00084h, 00303h, 00102h
winScreenData:
		DEFW 00000h, 00000h, 00000h, 000FCh, 003FFh, 002FDh, 002FDh, 002FDh, 001FEh, 00078h, 00030h, 00030h, 00030h, 00030h, 00030h, 00078h, 000FCh, 00000h, 00000h, 00000h
tetrisScreenData:
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 01FEh, 01FEh, 00CCh, 0124h, 02AAh
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 02AAh, 0349h, 0224h, 01FEh, 019Ah
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 02AAh, 00CCh, 0224h, 02AAh, 0124h
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 0349h, 019Ah, 0224h, 0124h, 0048h
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 0155h, 01B6h, 014Ah, 0224h, 019Ah
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 018Ch, 03B7h, 0349h, 02CDh, 01CEh
		DEFW 0000h, 0000h, 0000h, 0000h, 02AAh, 02AAh, 01DFh, 02AAh, 01DFh, 02AAh
		DEFW 0000h, 0000h, 02B5h, 0333h, 017Ah, 015Ah, 02AAh, 036Dh, 02DBh, 037Bh
		DEFW 0000h, 0084h, 02AAh, 0155h, 037Bh, 00CCh, 01FEh, 02AAh, 00CCh, 037Bh
arkaScreenData:
		DEFW 0000h, 0000h, 03FFh, 03FFh, 03FFh, 03FFh, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h
		DEFW 0000h, 0200h, 0300h, 0380h, 03C0h, 03E0h, 03F0h, 03F8h, 03FCh, 03FEh, 03FFh, 0000h
		DEFW 03FFh, 03FFh, 0000h, 0000h, 03FFh, 03FFh, 0000h, 0000h, 03FFh, 03FFh, 0000h, 0000h
		DEFW 0000h, 03CFh, 03CFh, 03CFh, 03CFh, 03CFh, 03CFh, 03CFh, 03CFh, 03CFh, 03CFh, 0000h
		DEFW 0084h, 0048h, 0048h, 00FCh, 01BAh, 01BAh, 03FFh, 02FDh, 0285h, 0249h, 0048h, 0000h
		DEFW 0000h, 037Bh, 03FFh, 03FFh, 037Bh, 03FFh, 03FFh, 037Bh, 03FFh, 03FFh, 037Bh, 0000h
		DEFW 0030h, 0078h, 00FCh, 01FEh, 03FFh, 03FFh, 01FEh, 00FCh, 0078h, 0030h, 0000h, 0000h
		DEFW 0030h, 0078h, 01FEh, 03FFh, 03FFh, 02B5h, 0030h, 0030h, 0330h, 0360h, 00C0h, 0000h
		DEFW 0333h, 00CCh, 0333h, 00CCh, 03FFh, 03FFh, 00CCh, 0333h, 00CCh, 0333h, 0000h, 0000h
		DEFW 03FFh, 0279h, 0279h, 0279h, 03FFh, 03FFh, 03FFh, 03FFh, 0279h, 0279h, 0279h, 03FFh
snakeScreenData:
		DEFW 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h
		DEFW 0000h, 0000h, 0000h, 0000h, 00C0h, 0040h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0008h, 000Ch, 0000h, 0000h, 0000h, 0000h
		DEFW 0000h, 0000h, 0000h, 0006h, 0000h, 01C0h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 000Eh, 0000h, 0180h, 0000h, 0000h, 0000h
		DEFW 0000h, 000Ch, 0000h, 0060h, 0000h, 0300h, 0000h, 0000h, 0000h, 0000h, 0201h, 0000h, 0000h, 0000h, 0003h, 0000h, 0018h, 0000h, 00C0h, 0000h
		DEFW 0070h, 0000h, 0000h, 0000h, 0000h, 0285h, 0285h, 0201h, 0201h, 0201h, 0201h, 0201h, 0201h, 0285h, 0285h, 0000h, 0000h, 0000h, 0000h, 0070h
		DEFW 0303h, 0303h, 0000h, 0000h, 00C0h, 00CCh, 000Ch, 0000h, 0000h, 0303h, 0303h, 0000h, 0000h, 000Ch, 00CCh, 00C0h, 0000h, 0000h, 0303h, 0303h
		DEFW 0000h, 00FCh, 00FCh, 0030h, 0030h, 00CCh, 00CCh, 0000h, 0000h, 0000h, 0000h, 0000h, 0000h, 00CCh, 00CCh, 0030h, 0030h, 00FCh, 00FCh, 0000h
		DEFW 0303h, 0000h, 00FCh, 0000h, 0333h, 0000h, 00CCh, 0000h, 0000h, 0084h, 0084h, 0000h, 0000h, 00CCh, 0000h, 0333h, 0000h, 00FCh, 0000h, 0303h
		DEFW 0231h, 0000h, 0048h, 0000h, 0333h, 0000h, 0000h, 0000h, 0000h, 0084h, 0084h, 0000h, 0000h, 0000h, 0000h, 0333h, 0000h, 0048h, 0000h, 0231h
		DEFW 0387h, 0000h, 0084h, 0201h, 0231h, 0000h, 0084h, 0084h, 0285h, 0285h, 0285h, 0285h, 0084h, 0084h, 0000h, 0231h, 0201h, 0084h, 0000h, 0387h
bigGhostData:
		DEFW 0078h, 01FEh, 017Ah, 03B7h, 03FFh, 0333h, 0279h, 0333h, 03FFh, 0333h, 0201h, 0201h, 0201h, 034Bh, 03FFh, 03FFh, 03FFh, 03FFh, 02F7h, 0262h
deathMusicData:
		DEFW 0033h, 02A1h, 0030h, 02CBh, 002Dh, 02F7h, 002Ah, 0326h, 0030h, 02CBh, 002Dh, 02F7h, 002Ah, 0326h, 0028h, 0358h, 002Dh, 02F7h, 002Ah, 0326h, 0028h, 0358h, 0026h, 038Ch, 002Ah, 0326h, 0028h, 0358h, 0026h, 038Ch, 0024h, 03C4h, 0028h, 0358h, 0026h, 038Ch, 0024h, 03C4h, 0021h, 03FFh, 001Eh, 0480h, 001Ch, 04C7h, 0149h, 0511h
winMusicData:
		DEFW 0057h, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 0020h, 0511h, 001Ch, 05B4h, 0020h, 0511h, 0057h, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 0030h, 0358h, 0036h, 02F7h, 0030h, 0358h, 0057h, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 0030h, 0358h, 002Bh, 03C4h, 0029h, 03FFh, 002Bh, 03C4h, 0030h, 0358h, 0036h, 02F7h, 0030h, 0358h, 0036h, 02F7h, 0030h, 0358h, 0000h, 0005h, 002Eh, 038Ch, 0030h, 0358h, 0074h, 02CBh, 003Ah, 02CBh, 003Ah, 02CBh, 003Ah, 02CBh, 002Bh, 03C4h, 0026h, 043Eh, 002Bh, 03C4h, 0074h, 02CBh, 003Ah, 02CBh, 003Ah, 02CBh, 003Ah, 02CBh, 0041h, 027Ah, 0049h, 0231h, 0041h, 027Ah, 0074h, 02CBh, 003Ah, 02CBh, 0036h, 02F7h, 0062h, 0358h, 0030h, 0358h, 002Bh, 03C4h, 0029h, 03FFh, 002Bh, 03C4h, 0029h, 03FFh, 002Bh, 03C4h, 0029h, 03FFh, 0000h, 0005h, 0024h, 0480h, 0029h, 03FFh, 0057h, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 0020h, 0511h, 001Ch, 05B4h, 0020h, 0511h, 0057h, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 0030h, 0358h, 0036h, 02F7h, 0030h, 0358h, 0057h, 03C4h, 002Bh, 03C4h, 002Bh, 03C4h, 0030h, 0358h, 002Bh, 03C4h, 0029h, 03FFh, 002Bh, 03C4h, 0030h, 0358h, 0036h, 02F7h, 0030h, 0358h, 0036h, 02F7h, 0030h, 0358h, 0000h, 0005h, 002Eh, 038Ch, 0030h, 0358h, 0083h, 027Ah, 0041h, 027Ah, 0041h, 027Ah, 0041h, 027Ah, 003Ah, 02CBh, 0033h, 0326h, 003Ah, 02CBh, 0083h, 027Ah, 0041h, 027Ah, 0041h, 027Ah, 0041h, 027Ah, 003Ah, 02CBh, 0033h, 0326h, 003Ah, 02CBh, 0041h, 027Ah, 0000h, 0005h, 0020h, 0511h, 0024h, 0480h, 0052h, 03FFh, 0020h, 0511h, 0036h, 02F7h, 0093h, 0358h, 0000h, 0005h, 00AFh, 03C4h
tetrisIntroMusicData:
		DEFW 00CDh, 02CBh, 0000h, 0002h, 01A2h, 0326h, 0000h, 0002h, 0048h, 03C4h, 0000h, 0002h, 0056h, 0326h, 0000h, 0002h, 0054h, 038Ch, 0000h, 0002h, 001Ch, 03C4h, 0000h, 0002h, 0019h, 043Eh, 0000h, 0002h, 0085h, 04C7h, 0000h, 0002h, 005Fh, 066Ah, 0000h, 0002h, 0048h, 03C4h, 0000h, 0002h, 005Fh, 0326h, 0000h, 0002h, 0040h, 043Eh, 0000h, 0002h, 0048h, 03C4h, 0000h, 0002h, 0085h, 04C7h, 0000h, 0002h, 0063h, 066Ah, 0000h, 0002h, 006Bh, 05B4h, 0000h, 0002h, 0035h, 05B4h, 0000h, 0002h, 0036h, 0511h, 0000h, 0002h, 0040h, 043Eh, 0000h, 0002h, 0039h, 04C7h, 0000h, 0002h, 003Bh, 0511h, 0000h, 0002h, 0030h, 05B4h, 0000h, 0002h, 0063h, 066Ah, 0000h, 0002h, 005Fh, 066Ah, 0000h, 0002h, 0063h, 066Ah, 0000h, 001Eh
tetrisLevelMusicData:
		DEFW 0010h, 06CEh, 0000h, 0002h, 000Fh, 0511h, 0000h, 0003h, 000Bh, 0480h, 0000h, 0003h, 008Bh, 0358h, 0000h, 0002h, 001Ah, 0511h, 0000h, 0002h, 000Eh, 03C4h, 0000h, 0003h, 0014h, 03FFh, 0000h, 0003h, 009Ch, 02F7h, 0000h, 0002h, 000Eh, 03C4h, 0000h, 0003h, 001Bh, 02F7h, 0000h, 0003h, 0018h, 0358h, 0000h, 0003h, 001Eh, 02A1h, 0000h, 0003h, 001Bh, 02F7h, 0000h, 0003h, 0018h, 0358h, 0000h, 0004h, 00DBh, 027Ah, 0000h, 0019h
arkaIntroMusicData:
		DEFW 0008h, 066Ah, 0033h, 066Ah, 0008h, 066Ah, 0011h, 066Ah, 000Ch, 043Eh, 004Dh, 043Eh, 0000h, 000Ah, 000Fh, 1152h, 0000h, 000Ah, 0015h, 0CF2h, 0000h, 000Ah, 000Bh, 0480h, 001Eh, 0480h, 000Ch, 043Eh, 0020h, 043Eh, 000Eh, 03C4h, 001Ch, 03C4h, 000Ch, 043Eh, 004Dh, 043Eh, 0000h, 000Ah, 000Fh, 1152h, 0000h, 000Ah, 0015h, 0CF2h, 0000h, 0002h, 000Fh, 1152h, 0000h, 0002h, 0010h, 1058h, 0000h, 0002h, 0014h, 0DB9h, 0008h, 066Ah, 0033h, 066Ah, 0008h, 066Ah, 0011h, 066Ah, 000Ch, 043Eh, 004Dh, 043Eh, 0000h, 000Ah, 0015h, 0CF2h, 0000h, 000Ah, 000Eh, 03C4h, 0015h, 03C4h, 000Ch, 043Eh, 0013h, 043Eh, 000Bh, 0480h, 0011h, 0480h, 000Eh, 03C4h, 0015h, 03C4h, 000Ch, 043Eh, 0075h, 043Eh
arkaDeathMusicData:
		DEFW 003Dh, 038Ch, 0030h, 0480h, 0033h, 043Eh, 0026h, 05B4h, 002Dh, 04C7h, 0024h, 060Ch, 0026h, 05B4h, 001Eh, 0737h, 0019h, 089Ah, 0019h, 089Ah, 0019h, 089Ah, 0019h, 089Ah
raceIntroMusicData:
		DEFW 000Dh, 149Fh, 000Dh, 149Fh, 001Bh, 0A40h, 000Dh, 149Fh, 000Dh, 149Fh, 0018h, 0B85h, 000Dh, 149Fh, 001Bh, 0A40h, 000Dh, 149Fh, 000Dh, 149Fh, 0018h, 0B85h, 000Dh, 149Fh, 0016h, 0C37h, 000Dh, 149Fh, 0012h, 0F6Bh, 0014h, 0DB9h, 001Ch, 149Fh, 0000h, 0012h, 001Ch, 149Fh, 0000h, 0009h, 0038h, 0A40h
raceLevelMusicData:
		DEFW 004Ch, 02CBh, 008Ah, 0326h, 007Bh, 038Ch, 0074h, 03C4h, 0067h, 043Eh, 002Dh, 04C7h, 0032h, 043Eh
snakeIntriMusicData:
		DEFW 0027h, 0CF2h, 0000h, 000Fh, 0036h, 0A40h, 0000h, 000Dh, 003Dh, 089Ah, 0000h, 0007h, 0044h, 06CEh, 0000h, 0009h, 003Ch, 066Ah, 0000h, 0003h, 003Ah, 0CF2h, 0000h, 0008h, 004Fh, 0A40h, 0000h, 0006h, 0043h, 089Ah, 0000h, 0005h, 003Bh, 06CEh, 0000h, 000Ah, 0042h, 05B4h, 0000h, 0004h
snakeLevelMusicData:
		DEFW 004Ch, 02CBh, 008Ah, 0326h, 007Bh, 038Ch, 0074h, 03C4h, 0067h, 043Eh, 002Dh, 04C7h, 0032h, 043Eh
destroyerIntroMusicData:
		DEFW 018Bh, 0254h, 0000h, 0007h, 004Ah, 0326h, 0063h, 0254h, 007Dh, 01D3h, 0095h, 0184h, 007Dh, 01D3h, 0000h, 0007h, 0063h, 0254h, 006Fh, 0210h, 0000h, 0007h, 006Fh, 0210h, 006Fh, 0210h, 0000h, 0007h, 00FBh, 02CBh, 006Fh, 0210h, 0063h, 0254h, 0000h, 0007h, 005Dh, 027Ah, 018Bh, 0254h, 0000h, 0007h, 004Ah, 0326h, 0063h, 0254h, 007Dh, 01D3h, 0095h, 0184h, 007Dh, 01D3h, 0000h, 0007h, 0063h, 0254h, 0069h, 0231h, 0000h, 0007h, 0069h, 0231h, 0069h, 0231h, 0000h, 0007h, 02B9h, 0254h
destroyerLevelMusicData:
		DEFW 0190h, 0511h, 004Ah, 02F7h, 0042h, 0358h, 003Ah, 03C4h, 0042h, 0358h, 0000h, 0007h, 0042h, 0358h, 010Ah, 027Ah, 0000h, 0007h, 0084h, 019Dh, 0084h, 019Dh, 0215h, 012Eh, 0190h, 0511h, 004Ah, 02F7h, 0042h, 0358h, 003Ah, 03C4h, 0042h, 0358h, 0000h, 0007h, 0042h, 0358h, 010Ah, 027Ah, 0000h, 0007h, 0084h, 019Dh, 0084h, 019Dh, 0084h, 019Dh, 0000h, 0007h, 00B1h, 012Eh, 0333h, 012Eh
ghostIntroMusicData:
		DEFW 0037h, 0326h, 0037h, 0326h, 0046h, 027Ah, 0000h, 0005h, 006Fh, 0326h, 007Ah, 02CBh, 0063h, 038Ch, 0000h, 002Ah, 0037h, 0326h, 0037h, 0326h, 0035h, 0326h, 0037h, 0326h, 0063h, 038Ch, 006Dh, 0326h, 0000h, 0020h, 0037h, 0326h, 0035h, 0326h, 0046h, 027Ah, 0000h, 0005h, 006Fh, 0326h, 007Ah, 02CBh, 0063h, 038Ch, 0000h, 002Ah, 0037h, 0326h, 0035h, 0326h, 0037h, 0326h, 0037h, 0326h, 0061h, 038Ch, 007Dh, 02CBh, 006Dh, 0326h
ghostScarySoundData:
		DEFW 0005h, 016Ch, 0005h, 0156h, 0005h, 0141h, 0006h, 012Eh, 0006h, 011Bh, 0006h, 0109h, 0006h, 011Bh, 0006h, 012Eh, 0005h, 0141h, 0005h, 0156h, 0005h, 016Ch, 0005h, 016Ch, 0005h, 0156h, 0005h, 0141h, 0006h, 012Eh, 0006h, 011Bh, 0006h, 0109h, 0006h, 011Bh, 0006h, 012Eh, 0005h, 0141h, 0005h, 0156h, 0005h, 016Ch, 0005h, 016Ch, 0005h, 0156h, 0005h, 0141h, 0006h, 012Eh, 0006h, 011Bh, 0006h, 0109h, 0006h, 011Bh, 0006h, 012Eh, 0005h, 0141h, 0005h, 0156h, 0005h, 016Ch
ghostLevelMusicData:
		DEFW 003Fh, 02A1h, 0042h, 02A1h, 0042h, 02A1h, 0042h, 02A1h, 006Dh, 0326h, 0000h, 0020h, 014Bh, 0210h, 00A4h, 0210h, 006Fh, 0326h
constructorIntroMusicData:
		DEFW 0009h, 081Dh, 000Ah, 07A7h, 000Bh, 0737h, 000Bh, 06CEh, 000Ch, 066Ah, 000Dh, 060Ch, 000Eh, 05B4h, 000Fh, 0560h, 000Fh, 0511h, 0010h, 04C7h, 0011h, 0480h, 0013h, 043Eh, 0029h, 03FFh, 0000h, 0005h, 0022h, 04C7h, 007Ch, 03FFh, 0022h, 04C7h, 0000h, 0005h, 001Bh, 060Ch, 0068h, 04C7h, 0030h, 0358h, 0000h, 0005h, 0029h, 03FFh, 0093h, 0358h, 000Fh, 0A40h, 000Fh, 0A40h, 0014h, 081Dh, 0049h, 06CEh, 0036h, 02F7h, 0000h, 0005h, 002Eh, 038Ch, 00A5h, 02F7h, 002Eh, 038Ch, 0000h, 0005h, 0024h, 0480h, 008Bh, 038Ch, 003Dh, 02A1h, 0000h, 0005h, 0033h, 0326h, 00BAh, 02A1h, 0019h, 066Ah, 001Bh, 060Ch, 001Eh, 0560h, 007Ch, 03FFh
constructorLevelMusicData:
		DEFW 0093h, 0231h, 008Bh, 0254h, 006Eh, 02F7h, 0000h, 000Ah, 0093h, 0231h, 0045h, 0254h, 006Eh, 02F7h, 0000h, 000Fh, 0093h, 0231h, 008Bh, 0254h, 006Eh, 02F7h, 0000h, 000Ah, 0093h, 0231h, 0045h, 0254h, 006Eh, 02F7h, 0000h, 000Fh, 007Bh, 02A1h, 003Dh, 02A1h, 003Dh, 02A1h, 0000h, 0005h, 007Bh, 02A1h, 001Eh, 02A1h, 0000h, 0003h, 0062h, 0358h, 0030h, 0358h, 0030h, 0358h, 0000h, 0005h, 0062h, 0358h, 0018h, 0358h, 0000h, 0003h, 007Bh, 02A1h, 003Dh, 02A1h, 003Dh, 02A1h, 0000h, 0005h, 007Bh, 02A1h, 001Eh, 02A1h, 0000h, 0003h, 0093h, 0231h, 0049h, 0231h, 0049h, 0231h, 0000h, 0005h, 0093h, 0231h, 0024h, 0231h
matchIntroMusicData:
		DEFW 0062h, 027Ah, 0000h, 0008h, 0062h, 027Ah, 0062h, 027Ah, 0068h, 0254h, 0062h, 027Ah, 0068h, 0254h, 0062h, 027Ah, 0057h, 02CBh, 0000h, 0008h, 0068h, 0254h, 0000h, 0008h, 0041h, 03C4h, 00C5h, 012Eh, 009Ch, 0184h, 0075h, 0210h, 0057h, 02CBh, 0000h, 0008h, 0057h, 02CBh, 0057h, 02CBh, 0062h, 027Ah, 0057h, 02CBh, 0062h, 027Ah, 0057h, 02CBh, 004Dh, 0326h, 0000h, 0008h, 0062h, 027Ah, 0000h, 0008h, 003Ah, 043Eh, 00D1h, 011Bh, 00C5h, 012Eh, 00AFh, 0156h, 0062h, 027Ah, 0000h, 0008h, 0062h, 027Ah, 0062h, 027Ah, 0068h, 0254h, 0062h, 027Ah, 0068h, 0254h, 0062h, 027Ah, 0057h, 02CBh, 0000h, 0008h, 0068h, 0254h, 0000h, 0008h, 0083h, 01D3h, 00D1h, 011Bh, 00C5h, 012Eh, 009Ch, 0184h, 0075h, 0210h, 0083h, 01D3h, 0068h, 0254h, 0075h, 0210h, 0062h, 027Ah, 0068h, 0254h, 0057h, 02CBh, 0062h, 027Ah, 0068h, 0254h, 0041h, 03C4h, 0049h, 0358h, 0057h, 02CBh, 00EAh, 0326h
matchLevelMusicData:
		DEFW 0026h, 043Eh, 0000h, 0005h, 001Ch, 05B4h, 0026h, 043Eh, 0030h, 0358h, 0026h, 043Eh, 0030h, 0358h, 003Ah, 02CBh, 003Dh, 02A1h, 0000h, 0005h, 0029h, 03FFh, 003Dh, 02A1h, 0045h, 0254h, 0000h, 0005h, 002Eh, 038Ch, 0045h, 0254h, 03ACh, 0210h
tetrisPieces:
		DEFB 0F8h, 008h, 008h, 008h
		DEFB 0F8h, 008h, 008h, 008h
		DEFB 0CCh, 0CCh, 000h, 000h
		DEFB 0CCh, 0CCh, 000h, 000h
		DEFB 08Ch, 0E8h, 008h, 000h
		DEFB 0E4h, 024h, 00Ch, 000h
		DEFB 028h, 0E8h, 00Ch, 000h
		DEFB 0ECh, 084h, 004h, 000h
		DEFB 068h, 0CCh, 004h, 000h
		DEFB 068h, 0CCh, 004h, 000h
		DEFB 0C4h, 06Ch, 008h, 000h
		DEFB 0C4h, 06Ch, 008h, 000h
		DEFB 048h, 0ECh, 008h, 000h
		DEFB 0E4h, 04Ch, 004h, 000h
#line 96
#line 6
		.org 32790
		ld hl, ZXBASIC_USER_DATA_END
#line 8
	ld de, 0
	ld hl, 0
	call RANDOMIZE
	call _InitScreen
	call _InitIntro
	ld hl, 50
	call __PAUSE
__LABEL0:
	call _SelectGame
	or a
	jp z, __LABEL2
	call _ShowCurtain
	call _ShowWin
	jp __LABEL3
__LABEL2:
	call _ShowCurtain
	call _ShowDeath
__LABEL3:
	jp __LABEL0
__END_PROGRAM:
	di
	ld hl, (__CALL_BACK__)
	ld sp, hl
	exx
	pop hl
	pop iy
	pop ix
	exx
	ei
	ret
__CALL_BACK__:
	DEFW 0
_MultiKeys:
#line 41
		ld a, h
		in a, (0FEh)
		cpl
		and l
#line 45
_MultiKeys__leave:
	ret
_Frames:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, (_counter)
_Frames__leave:
	ld sp, ix
	pop ix
	ret
_ResetFrameCounter:
	push ix
	ld ix, 0
	add ix, sp
#line 21
		di
#line 22
	ld hl, 0
	ld (_counter), hl
	xor a
	ld (_hiCounter), a
#line 30
		ei
#line 31
_ResetFrameCounter__leave:
	ld sp, ix
	pop ix
	ret
_PlayMusic:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
__LABEL4:
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	ld l, (ix+6)
	ld h, (ix+7)
	ex de, hl
	pop hl
	or a
	sbc hl, de
	jp nc, __LABEL5
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	push ix
	pop hl
	ld de, 4
	add hl, de
	call __ARRAY_PTR
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (_musParamA), hl
	ld l, (ix-2)
	ld h, (ix-1)
	inc hl
	ld (ix-2), l
	ld (ix-1), h
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	push ix
	pop hl
	ld de, 4
	add hl, de
	call __ARRAY_PTR
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (_musParamB), hl
	ld l, (ix-2)
	ld h, (ix-1)
	inc hl
	ld (ix-2), l
	ld (ix-1), h
	ld de, 0
	ld hl, (_musParamA)
	or a
	sbc hl, de
	jp nz, __LABEL6
	ld hl, (_musParamB)
	call __PAUSE
	jp __LABEL7
__LABEL6:
#line 47
		push hl
		ld hl, (_musParamB)
		push hl
		ld hl, (_musParamA)
		call __BEEPER
		pop hl
#line 53
__LABEL7:
	jp __LABEL4
__LABEL5:
_PlayMusic__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_getPaddedText:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld l, (ix+4)
	ld h, (ix+5)
	call __STRLEN
	ld a, l
	ld (ix-1), a
	sub (ix+9)
	ccf
	jp nc, __LABEL9
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	ld hl, 0
	push hl
	ld a, (ix+9)
	ld l, a
	ld h, 0
	dec hl
	push hl
	xor a
	call __STRSLICE
	jp _getPaddedText__leave
__LABEL9:
	ld l, (ix+4)
	ld h, (ix+5)
	ld d, h
	ld e, l
	ld bc, -4
	call __PSTORE_STR
	ld (ix-2), 1
	jp __LABEL10
__LABEL13:
	ld l, (ix+6)
	ld h, (ix+7)
	push hl
	ld l, (ix-4)
	ld h, (ix-3)
	ex de, hl
	pop hl
	call __ADDSTR
	ld d, h
	ld e, l
	ld bc, -4
	call __PSTORE_STR2
	inc (ix-2)
__LABEL10:
	ld h, (ix-2)
	ld a, (ix+9)
	sub (ix-1)
	cp h
	jp nc, __LABEL13
	ld l, (ix-4)
	ld h, (ix-3)
	call __LOADSTR
_getPaddedText__leave:
	ex af, af'
	exx
	ld l, (ix+4)
	ld h, (ix+5)
	call __MEM_FREE
	ld l, (ix+6)
	ld h, (ix+7)
	call __MEM_FREE
	ld l, (ix-4)
	ld h, (ix-3)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_InitScreen:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld hl, _sprites.__DATA__
	ld (_udgAddress), hl
	ld a, 7
	call INK
	call COPY_ATTR
	xor a
	call PAPER
	call COPY_ATTR
	ld a, 1
	call BRIGHT
	call COPY_ATTR
	xor a
	call BORDER
	xor a
	push af
	ld a, 10
	call PRINT_AT
	ld hl, __LABEL15
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 4
	call INK
	call COPY_ATTR
	xor a
	call PAPER
	call COPY_ATTR
	xor a
	call BRIGHT
	call COPY_ATTR
	ld a, 2
	push af
	ld a, 7
	call PRINT_AT
	ld hl, __LABEL16
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld (ix-1), 1
	jp __LABEL17
__LABEL20:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	inc hl
	inc hl
	ld a, l
	push af
	ld a, 7
	call PRINT_AT
	ld hl, __LABEL22
	xor a
	call __PRINTSTR
	ld a, 7
	call PAPER_TMP
	ld hl, __LABEL23
	xor a
	call __PRINTSTR
	xor a
	call PAPER_TMP
	ld hl, __LABEL24
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, (ix-1)
	ld l, a
	ld h, 0
	inc hl
	inc hl
	ld a, l
	push af
	ld a, 18
	call PRINT_AT
	ld a, 7
	call PAPER_TMP
	ld hl, __LABEL25
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	inc (ix-1)
__LABEL17:
	ld a, 20
	cp (ix-1)
	jp nc, __LABEL20
	xor a
	ld (_sprites.__DATA__ + 0), a
	xor a
	ld (_sprites.__DATA__ + 1), a
	xor a
	ld (_sprites.__DATA__ + 2), a
	xor a
	ld (_sprites.__DATA__ + 3), a
	xor a
	ld (_sprites.__DATA__ + 4), a
	xor a
	ld (_sprites.__DATA__ + 5), a
	xor a
	ld (_sprites.__DATA__ + 6), a
	xor a
	ld (_sprites.__DATA__ + 7), a
	ld a, 23
	push af
	ld a, 7
	call PRINT_AT
	ld hl, __LABEL26
	xor a
	call __PRINTSTR
	call PRINT_EOL
	xor a
	call INK
	call COPY_ATTR
	ld a, 7
	call PAPER
	call COPY_ATTR
	xor a
	call BRIGHT
	call COPY_ATTR
	ld a, 3
	push af
	ld a, 19
	call PRINT_AT
	ld hl, __LABEL27
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 7
	push af
	ld a, 19
	call PRINT_AT
	ld hl, __LABEL28
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 12
	push af
	ld a, 19
	call PRINT_AT
	ld hl, __LABEL29
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld hl, 9999
	ld (_workingScore), hl
	ld a, 99
	ld (_workingLevel), a
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 15
	push af
	ld a, 15
	push af
	call _SetSymbol
	ld hl, 1
	call __PAUSE
	call _UpdateScreen
	ld hl, 0
	ld (_workingScore), hl
	ld a, 1
	ld (_workingLevel), a
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	xor a
	push af
	xor a
	push af
	call _SetSymbol
	ld hl, 50
	call __PAUSE
	ld hl, 856
	push hl
	ld hl, 48
	call __BEEPER
	ld hl, 715
	push hl
	ld hl, 58
	call __BEEPER
	call _UpdateScreen
_InitScreen__leave:
	ld sp, ix
	pop ix
	ret
_InvertRect:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL30
__LABEL33:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL35
__LABEL38:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp nz, __LABEL40
	ld a, 1
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
	jp __LABEL41
__LABEL40:
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
__LABEL41:
	inc (ix-1)
__LABEL35:
	ld a, (ix+7)
	cp (ix-1)
	jp nc, __LABEL38
	inc (ix-2)
__LABEL30:
	ld a, (ix+11)
	cp (ix-2)
	jp nc, __LABEL33
_InvertRect__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_MoveRect:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld a, (ix+13)
	ld h, a
	xor a
	call __LTI8
	or a
	jp z, __LABEL42
	xor a
	push af
	ld a, (ix+11)
	push af
	ld a, (ix+9)
	push af
	ld a, (ix+5)
	push af
	ld a, (ix+13)
	dec a
	ld h, a
	pop af
	add a, h
	push af
	ld a, (ix+5)
	push af
	call _FillRect
	jp __LABEL43
__LABEL42:
	ld a, (ix+13)
	ld h, 0
	call __LTI8
	or a
	jp z, __LABEL44
	xor a
	push af
	ld a, (ix+11)
	push af
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+13)
	inc a
	ld h, a
	pop af
	add a, h
	push af
	call _FillRect
	jp __LABEL45
__LABEL44:
	ld a, (ix+15)
	ld h, a
	xor a
	call __LTI8
	or a
	jp z, __LABEL46
	xor a
	push af
	ld a, (ix+9)
	push af
	ld a, (ix+15)
	dec a
	ld h, a
	pop af
	add a, h
	push af
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	call _FillRect
	jp __LABEL47
__LABEL46:
	ld a, (ix+15)
	ld h, 0
	call __LTI8
	or a
	jp z, __LABEL49
	xor a
	push af
	ld a, (ix+11)
	push af
	ld a, (ix+11)
	push af
	ld a, (ix+15)
	inc a
	ld h, a
	pop af
	add a, h
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	call _FillRect
__LABEL49:
__LABEL47:
__LABEL45:
__LABEL43:
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL50
__LABEL53:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL55
__LABEL58:
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	push af
	ld a, (ix-2)
	add a, (ix+15)
	push af
	ld a, (ix-1)
	add a, (ix+13)
	push af
	call _SetCell
	inc (ix-1)
__LABEL55:
	ld h, (ix-1)
	ld a, (ix+7)
	call __LTI8
	or a
	jp z, __LABEL58
	inc (ix-2)
__LABEL50:
	ld h, (ix-2)
	ld a, (ix+11)
	call __LTI8
	or a
	jp z, __LABEL53
_MoveRect__leave:
	exx
	ld hl, 12
__EXIT_FUNCTION:
	ld sp, ix
	pop ix
	pop de
	add hl, sp
	ld sp, hl
	push de
	exx
	ret
_FillRect:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld a, (ix+9)
	ld (ix-2), a
	jp __LABEL60
__LABEL63:
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL65
__LABEL68:
	ld a, (ix+13)
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
	inc (ix-1)
__LABEL65:
	ld a, (ix+7)
	cp (ix-1)
	jp nc, __LABEL68
	inc (ix-2)
__LABEL60:
	ld a, (ix+11)
	cp (ix-2)
	jp nc, __LABEL63
_FillRect__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_SetCell:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _workingCells
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	or a
	jp z, __LABEL70
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	sub (hl)
	jp z, __LABEL72
	ld a, (ix+5)
	push af
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _ops
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL73
__LABEL72:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _ops
	call __ARRAY
	ld (hl), 0
__LABEL73:
	jp __LABEL71
__LABEL70:
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	sub (ix+9)
	jp z, __LABEL75
	ld hl, _currentOp
	inc (hl)
	ld a, (ix+5)
	push af
	ld a, (_currentOp)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _ops
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix+7)
	push af
	ld a, (_currentOp)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _ops
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix+9)
	push af
	ld a, (_currentOp)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _ops
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix+7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _workingCells
	call __ARRAY
	ld a, (_currentOp)
	ld (hl), a
__LABEL75:
__LABEL71:
_SetCell__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_SetSymbol:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld a, (ix+5)
	and 3
	ld (ix-1), a
	or a
	jp nz, __LABEL76
	xor a
	ld (_workingSymbol.__DATA__ + 2), a
	jp __LABEL77
__LABEL76:
	ld a, (ix-1)
	inc a
	ld (_workingSymbol.__DATA__ + 2), a
__LABEL77:
	ld a, (ix+5)
	srl a
	srl a
	and 3
	ld (ix-1), a
	or a
	jp nz, __LABEL78
	xor a
	ld (_workingSymbol.__DATA__ + 0), a
	jp __LABEL79
__LABEL78:
	ld a, (ix-1)
	inc a
	ld (_workingSymbol.__DATA__ + 0), a
__LABEL79:
	ld a, (ix+7)
	and 3
	ld (ix-1), a
	or a
	jp nz, __LABEL80
	xor a
	ld (_workingSymbol.__DATA__ + 3), a
	jp __LABEL81
__LABEL80:
	ld a, (ix-1)
	inc a
	ld (_workingSymbol.__DATA__ + 3), a
__LABEL81:
	ld a, (ix+7)
	srl a
	srl a
	and 3
	ld (ix-1), a
	or a
	jp nz, __LABEL82
	xor a
	ld (_workingSymbol.__DATA__ + 1), a
	jp __LABEL83
__LABEL82:
	ld a, (ix-1)
	inc a
	ld (_workingSymbol.__DATA__ + 1), a
__LABEL83:
_SetSymbol__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_SetLevel:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+5)
	ld (_workingLevel), a
_SetLevel__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_SetScore:
	push ix
	ld ix, 0
	add ix, sp
	ld l, (ix+4)
	ld h, (ix+5)
	ld (_workingScore), hl
_SetScore__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_SetLifes:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld a, 4
	cp (ix+5)
	jp nc, __LABEL84
	ld (ix-1), 15
	ld a, (ix+5)
	sub 4
	ld (ix+5), a
	ld (ix-3), 1
	jp __LABEL86
__LABEL89:
	ld a, (ix+5)
	sub (ix-3)
	ccf
	jp nc, __LABEL92
	ld a, (ix-2)
	push af
	ld a, (ix-3)
	dec a
	ld h, 1
	or a
	ld b, a
	ld a, h
	jr z, __LABEL1250
__LABEL1249:
	add a, a
	djnz __LABEL1249
__LABEL1250:
	pop de
	or d
	ld (ix-2), a
__LABEL92:
	inc (ix-3)
__LABEL86:
	ld a, 4
	cp (ix-3)
	jp nc, __LABEL89
	jp __LABEL85
__LABEL84:
	ld (ix-3), 1
	jp __LABEL93
__LABEL96:
	ld a, (ix+5)
	sub (ix-3)
	ccf
	jp nc, __LABEL99
	ld a, (ix-1)
	push af
	ld a, (ix-3)
	dec a
	ld h, 1
	or a
	ld b, a
	ld a, h
	jr z, __LABEL1252
__LABEL1251:
	add a, a
	djnz __LABEL1251
__LABEL1252:
	pop de
	or d
	ld (ix-1), a
__LABEL99:
	inc (ix-3)
__LABEL93:
	ld a, 4
	cp (ix-3)
	jp nc, __LABEL96
__LABEL85:
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetSymbol
_SetLifes__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_HideNextTitle:
	push ix
	ld ix, 0
	add ix, sp
	ld a, 7
	push af
	ld a, 19
	call PRINT_AT
	ld hl, __LABEL100
	xor a
	call __PRINTSTR
	call PRINT_EOL
_HideNextTitle__leave:
	ld sp, ix
	pop ix
	ret
_ShowNextTitle:
	push ix
	ld ix, 0
	add ix, sp
	ld a, 7
	push af
	ld a, 19
	call PRINT_AT
	ld hl, __LABEL28
	xor a
	call __PRINTSTR
	call PRINT_EOL
_ShowNextTitle__leave:
	ld sp, ix
	pop ix
	ret
_UpdateScreen:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	xor a
	ld hl, (_currentOp - 1)
	cp h
	jp nc, __LABEL102
	ld (ix-3), 1
	jp __LABEL103
__LABEL106:
	ld a, (ix-3)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _ops
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	or a
	jp z, __LABEL109
	ld a, (ix-3)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _ops
	call __ARRAY
	ld a, (hl)
	ld (ix-2), a
	ld a, (ix-3)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _ops
	call __ARRAY
	ld a, (hl)
	ld (ix-5), a
	push af
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-2)
	ld l, a
	ld h, 0
	inc hl
	inc hl
	ld a, l
	push af
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ld de, 7
	add hl, de
	ld a, l
	call PRINT_AT
	ld a, (ix-5)
	add a, 144
	push af
	ld hl, 1
	call CHR
	ld a, 1
	call __PRINTSTR
	call PRINT_EOL
__LABEL109:
	inc (ix-3)
__LABEL103:
	ld a, (_currentOp)
	cp (ix-3)
	jp nc, __LABEL106
__LABEL102:
	ld (ix-2), 1
	jp __LABEL110
__LABEL113:
	ld (ix-1), 1
	jp __LABEL115
__LABEL118:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenSymbol
	call __ARRAY
	ld a, (hl)
	ld (ix-4), a
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _workingSymbol
	call __ARRAY
	ld a, (hl)
	ld (ix-5), a
	ld a, (ix-4)
	sub (ix-5)
	jp z, __LABEL121
	ld a, (ix-5)
	push af
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenSymbol
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-2)
	ld l, a
	ld h, 0
	ld de, 8
	add hl, de
	ld a, l
	push af
	ld a, (ix-1)
	ld l, a
	ld h, 0
	ld de, 18
	add hl, de
	ld a, l
	call PRINT_AT
	ld a, (ix-5)
	add a, 144
	push af
	ld hl, 1
	call CHR
	ld a, 1
	call __PRINTSTR
	call PRINT_EOL
__LABEL121:
	inc (ix-1)
__LABEL115:
	ld a, 4
	cp (ix-1)
	jp nc, __LABEL118
	inc (ix-2)
__LABEL110:
	ld a, 2
	cp (ix-2)
	jp nc, __LABEL113
	ld de, (_screenScore)
	ld hl, (_workingScore)
	or a
	sbc hl, de
	ld a, h
	or l
	jp z, __LABEL123
	ld hl, (_workingScore)
	ld (_screenScore), hl
	ld a, 5
	push af
	ld a, 19
	call PRINT_AT
	ld a, 4
	push af
	ld hl, __LABEL124
	call __LOADSTR
	push hl
	ld hl, (_screenScore)
	ld de, 0
	call __U32TOFREG
	call __STR_FAST
	push hl
	call _getPaddedText
	ld a, 1
	call __PRINTSTR
	call PRINT_EOL
__LABEL123:
	ld hl, (_workingLevel - 1)
	ld a, (_screenLevel)
	sub h
	jp z, __LABEL126
	ld a, (_workingLevel)
	ld (_screenLevel), a
	ld a, 14
	push af
	ld a, 19
	call PRINT_AT
	ld a, 2
	push af
	ld hl, __LABEL124
	call __LOADSTR
	push hl
	ld a, (_screenLevel)
	call __U8TOFREG
	call __STR_FAST
	push hl
	call _getPaddedText
	ld a, 1
	call __PRINTSTR
	call PRINT_EOL
__LABEL126:
	xor a
	ld (_currentOp), a
#line 402
		di
		ld de, _workingCells.__DATA__
		ld a, 0
		ld (de), a
		inc de
		ld hl, _workingCells.__DATA__
		ld bc, 199
		ldir
		ei
#line 411
_UpdateScreen__leave:
	ld sp, ix
	pop ix
	ret
_ShowCurtain:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld (ix-2), 1
	jp __LABEL127
__LABEL130:
	ld (ix-1), 1
	jp __LABEL132
__LABEL135:
	ld a, 1
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
	inc (ix-1)
__LABEL132:
	ld a, 10
	cp (ix-1)
	jp nc, __LABEL135
	call _UpdateScreen
	ld hl, 11888
	push hl
	ld hl, 0
	call __BEEPER
	inc (ix-2)
__LABEL127:
	ld a, 20
	cp (ix-2)
	jp nc, __LABEL130
_ShowCurtain__leave:
	ld sp, ix
	pop ix
	ret
_FillLine:
	push ix
	ld ix, 0
	add ix, sp
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 512
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL138
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 1
	push af
	call _SetCell
__LABEL138:
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 256
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL140
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 2
	push af
	call _SetCell
__LABEL140:
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 128
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL142
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 3
	push af
	call _SetCell
__LABEL142:
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 64
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL144
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL144:
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 32
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL146
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 5
	push af
	call _SetCell
__LABEL146:
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 16
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL148
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 6
	push af
	call _SetCell
__LABEL148:
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 8
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL150
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 7
	push af
	call _SetCell
__LABEL150:
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 4
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL152
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 8
	push af
	call _SetCell
__LABEL152:
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 2
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL154
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL154:
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 1
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL156
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL156:
_FillLine__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_ShowDeath:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL157
__LABEL160:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _deadPic
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	push hl
	ld a, (ix-1)
	push af
	call _FillLine
	inc (ix-1)
__LABEL157:
	ld a, 20
	cp (ix-1)
	jp nc, __LABEL160
	call _UpdateScreen
	ld hl, 46
	push hl
	ld hl, _deathMusic
	push hl
	call _PlayMusic
_ShowDeath__leave:
	ld sp, ix
	pop ix
	ret
_ShowWin:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL162
__LABEL165:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _winPic
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	push hl
	ld a, (ix-1)
	push af
	call _FillLine
	inc (ix-1)
__LABEL162:
	ld a, 20
	cp (ix-1)
	jp nc, __LABEL165
	call _UpdateScreen
	ld hl, 220
	push hl
	ld hl, _winMusic
	push hl
	call _PlayMusic
_ShowWin__leave:
	ld sp, ix
	pop ix
	ret
_min:
	push ix
	ld ix, 0
	add ix, sp
	ld h, (ix+5)
	ld a, (ix+7)
	call __LTI8
	or a
	jp z, __LABEL167
	ld a, (ix+7)
	jp _min__leave
__LABEL167:
	ld a, (ix+5)
_min__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_max:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+5)
	ld h, (ix+7)
	call __LTI8
	or a
	jp z, __LABEL169
	ld a, (ix+7)
	jp _max__leave
__LABEL169:
	ld a, (ix+5)
_max__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_Explode:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	ld a, (ix+5)
	ld (ix-1), a
	ld a, (ix+7)
	ld (ix-3), a
	ld a, (ix+5)
	ld (ix-2), a
	ld a, (ix+7)
	ld (ix-4), a
	ld (ix-5), 1
	jp __LABEL171
__LABEL174:
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	inc a
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-3)
	dec a
	push af
	call _max
	push af
	ld a, 10
	push af
	ld a, (ix-2)
	inc a
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-1)
	dec a
	push af
	call _max
	push af
	call _FillRect
	xor a
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-3)
	push af
	call _max
	push af
	ld a, 10
	push af
	ld a, (ix-2)
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	call _max
	push af
	call _FillRect
	dec (ix-1)
	inc (ix-2)
	dec (ix-3)
	inc (ix-4)
	call _UpdateScreen
	ld hl, 12597
	push hl
	ld hl, 1
	call __BEEPER
	inc (ix-5)
__LABEL171:
	ld h, (ix-5)
	ld a, 3
	call __LTI8
	or a
	jp z, __LABEL174
	ld a, (ix-1)
	ld (ix-5), a
	jp __LABEL176
__LABEL179:
	ld a, (ix-5)
	ld h, 1
	call __LTI8
	push af
	ld h, (ix-5)
	ld a, 10
	call __LTI8
	pop de
	or d
	jp nz, __LABEL180
	ld a, (ix-5)
	and 1
	jp nz, __LABEL183
	ld a, (ix-3)
	ld h, 1
	call __LTI8
	or a
	jp nz, __LABEL180
	xor a
	push af
	ld a, (ix-3)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	jp __LABEL184
__LABEL183:
	ld h, (ix-4)
	ld a, 20
	call __LTI8
	or a
	jp nz, __LABEL180
	xor a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
__LABEL184:
__LABEL180:
	inc (ix-5)
__LABEL176:
	ld h, (ix-5)
	ld a, (ix-2)
	call __LTI8
	or a
	jp z, __LABEL179
	ld a, (ix-3)
	ld (ix-6), a
	jp __LABEL189
__LABEL192:
	ld a, (ix-6)
	ld h, 1
	call __LTI8
	push af
	ld h, (ix-6)
	ld a, 20
	call __LTI8
	pop de
	or d
	jp nz, __LABEL193
	ld a, (ix-6)
	and 1
	jp nz, __LABEL196
	ld a, (ix-1)
	ld h, 1
	call __LTI8
	or a
	jp nz, __LABEL193
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
	jp __LABEL197
__LABEL196:
	ld h, (ix-2)
	ld a, 10
	call __LTI8
	or a
	jp nz, __LABEL193
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-2)
	push af
	call _SetCell
__LABEL197:
__LABEL193:
	inc (ix-6)
__LABEL189:
	ld h, (ix-6)
	ld a, (ix-4)
	call __LTI8
	or a
	jp z, __LABEL192
	call _UpdateScreen
	ld hl, 5
	call __PAUSE
	ld a, (ix+9)
	or a
	jp nz, __LABEL203
	ld (ix-5), 1
	jp __LABEL204
__LABEL207:
	ld a, 20
	push af
	ld a, (ix-4)
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-3)
	push af
	call _max
	push af
	ld a, 10
	push af
	ld a, (ix-2)
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	call _max
	push af
	call _InvertRect
	xor a
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	dec a
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-3)
	inc a
	push af
	call _max
	push af
	ld a, 10
	push af
	ld a, (ix-2)
	dec a
	push af
	call _min
	push af
	ld a, 1
	push af
	ld a, (ix-1)
	inc a
	push af
	call _max
	push af
	call _FillRect
	call _UpdateScreen
	ld hl, 1
	call __PAUSE
	inc (ix-5)
__LABEL204:
	ld h, (ix-5)
	ld a, 10
	call __LTI8
	or a
	jp z, __LABEL207
__LABEL203:
_Explode__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_InitIntro:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL209
__LABEL212:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _introScreen
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (ix-3), l
	ld (ix-2), h
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 512
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL215
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 1
	push af
	call _SetCell
__LABEL215:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 256
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL217
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 2
	push af
	call _SetCell
__LABEL217:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 128
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL219
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 3
	push af
	call _SetCell
__LABEL219:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 64
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL221
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL221:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 32
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL223
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 5
	push af
	call _SetCell
__LABEL223:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 16
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL225
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 6
	push af
	call _SetCell
__LABEL225:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 8
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL227
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 7
	push af
	call _SetCell
__LABEL227:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 4
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL229
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 8
	push af
	call _SetCell
__LABEL229:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 2
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL231
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL231:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 1
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL233
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL233:
	inc (ix-1)
__LABEL209:
	ld a, 20
	cp (ix-1)
	jp nc, __LABEL212
	call _UpdateScreen
_InitIntro__leave:
	ld sp, ix
	pop ix
	ret
_LoadTetrisScreen:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld (ix-1), 1
	jp __LABEL234
__LABEL237:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tetrisScreens
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (ix-3), l
	ld (ix-2), h
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 512
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL240
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 1
	push af
	call _SetCell
__LABEL240:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 256
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL242
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 2
	push af
	call _SetCell
__LABEL242:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 128
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL244
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 3
	push af
	call _SetCell
__LABEL244:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 64
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL246
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL246:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 32
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL248
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 5
	push af
	call _SetCell
__LABEL248:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 16
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL250
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 6
	push af
	call _SetCell
__LABEL250:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 8
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL252
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 7
	push af
	call _SetCell
__LABEL252:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 4
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL254
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 8
	push af
	call _SetCell
__LABEL254:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 2
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL256
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL256:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 1
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL258
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL258:
	inc (ix-1)
__LABEL234:
	ld a, 10
	cp (ix-1)
	jp nc, __LABEL237
	call _UpdateScreen
_LoadTetrisScreen__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_ExpandPiece:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld (ix-2), 1
	jp __LABEL259
__LABEL262:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tetrisPieces
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	and 128
	push af
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 64
	push af
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 32
	push af
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 16
	push af
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 3
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 8
	push af
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 4
	push af
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 2
	push af
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 1
	push af
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 3
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tetrisPieces
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	and 128
	push af
	ld hl, 2
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 64
	push af
	ld hl, 2
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 32
	push af
	ld hl, 2
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 16
	push af
	ld hl, 2
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 3
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 8
	push af
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 4
	push af
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 1
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 2
	push af
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 2
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	and 1
	push af
	ld hl, 3
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 3
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop af
	ld (hl), a
	ld hl, 0
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld (hl), 0
	ld hl, 1
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld (hl), 0
	inc (ix-2)
__LABEL259:
	ld a, 4
	cp (ix-2)
	jp nc, __LABEL262
	ld (ix-4), 1
	jp __LABEL264
__LABEL267:
	ld (ix-2), 1
	jp __LABEL269
__LABEL272:
	ld (ix-3), 1
	jp __LABEL274
__LABEL277:
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-3)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL280
	ld hl, 0
	push hl
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld a, (hl)
	ld h, (ix-2)
	call __LTI8
	or a
	jp z, __LABEL282
	ld a, (ix-2)
	push af
	ld hl, 0
	push hl
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	pop af
	ld (hl), a
__LABEL282:
	ld hl, 1
	push hl
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld a, (hl)
	ld h, (ix-3)
	call __LTI8
	or a
	jp z, __LABEL284
	ld a, (ix-3)
	push af
	ld hl, 1
	push hl
	ld a, (ix-4)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	pop af
	ld (hl), a
__LABEL284:
__LABEL280:
	inc (ix-3)
__LABEL274:
	ld a, 4
	cp (ix-3)
	jp nc, __LABEL277
	inc (ix-2)
__LABEL269:
	ld a, 4
	cp (ix-2)
	jp nc, __LABEL272
	inc (ix-4)
__LABEL264:
	ld a, 4
	cp (ix-4)
	jp nc, __LABEL267
_ExpandPiece__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_WillCollide:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	ld a, (ix+9)
	or a
	jp z, __LABEL286
	ld a, (ix+5)
	add a, (ix+9)
	ld (ix-1), a
	ld h, 1
	call __LTI8
	push af
	ld a, (ix-1)
	push af
	ld hl, 1
	push hl
	ld a, (ix+13)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _expandedSize
	call __ARRAY
	ld a, 11
	sub (hl)
	pop hl
	call __LTI8
	pop de
	or d
	jp z, __LABEL288
	ld a, 1
	jp _WillCollide__leave
__LABEL288:
__LABEL286:
	ld (ix-2), 1
	jp __LABEL289
__LABEL292:
	ld a, (ix-2)
	add a, (ix+7)
	add a, (ix+11)
	dec a
	ld (ix-5), a
	ld h, 1
	call __LTI8
	or a
	jp nz, __LABEL293
	ld a, (ix-2)
	add a, (ix+11)
	ld (ix-4), a
	ld (ix-1), 1
	jp __LABEL296
__LABEL299:
	ld a, (ix-1)
	add a, (ix+5)
	add a, (ix+9)
	dec a
	ld (ix-6), a
	ld a, (ix-1)
	add a, (ix+9)
	ld (ix-3), a
	ld a, (ix+15)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	ld a, (hl)
	push af
	ld a, (ix-3)
	ld h, 1
	call __LTI8
	push af
	ld h, (ix-3)
	ld a, 4
	call __LTI8
	pop de
	or d
	push af
	ld a, (ix-4)
	ld h, 1
	call __LTI8
	pop de
	or d
	push af
	ld h, (ix-4)
	ld a, 4
	call __LTI8
	pop de
	or d
	push af
	ld a, (ix+13)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-4)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-3)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	pop de
	ld a, (hl)
	sub 1
	sbc a, a
	or d
	ld h, a
	pop af
	or a
	jr z, __LABEL1253
	ld a, h
__LABEL1253:
	or a
	jp z, __LABEL302
	ld a, (ix-6)
	ld h, 1
	call __LTI8
	push af
	ld h, (ix-6)
	ld a, 10
	call __LTI8
	pop de
	or d
	push af
	ld h, (ix-5)
	ld a, 20
	call __LTI8
	pop de
	or d
	push af
	ld a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	or (hl)
	jp z, __LABEL304
	ld a, 1
	jp _WillCollide__leave
__LABEL304:
__LABEL302:
	inc (ix-1)
__LABEL296:
	ld h, (ix-1)
	ld a, 4
	call __LTI8
	or a
	jp z, __LABEL299
__LABEL293:
	inc (ix-2)
__LABEL289:
	ld h, (ix-2)
	ld a, 4
	call __LTI8
	or a
	jp z, __LABEL292
	xor a
_WillCollide__leave:
	exx
	ld hl, 12
	jp __EXIT_FUNCTION
_DrawFigure:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld (ix-2), 1
	jp __LABEL305
__LABEL308:
	ld a, (ix-2)
	add a, (ix+7)
	dec a
	ld (ix-4), a
	ld h, 1
	call __LTI8
	or a
	jp nz, __LABEL309
	ld (ix-1), 1
	jp __LABEL312
__LABEL315:
	ld a, (ix-1)
	add a, (ix+5)
	dec a
	ld (ix-3), a
	ld h, 1
	call __LTI8
	or a
	jp nz, __LABEL316
	ld a, (ix+9)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _expandedPiece
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL320
	ld a, (ix+11)
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-3)
	push af
	call _SetCell
__LABEL320:
__LABEL316:
	inc (ix-1)
__LABEL312:
	ld a, 4
	cp (ix-1)
	jp nc, __LABEL315
__LABEL309:
	inc (ix-2)
__LABEL305:
	ld a, 4
	cp (ix-2)
	jp nc, __LABEL308
_DrawFigure__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_FindTop:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld (ix-1), 20
	jp __LABEL321
__LABEL324:
	ld (ix-3), 1
	ld (ix-2), 1
	jp __LABEL326
__LABEL329:
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL332
	ld (ix-3), 0
	jp __LABEL328
__LABEL332:
	inc (ix-2)
__LABEL326:
	ld h, (ix-2)
	ld a, 10
	call __LTI8
	or a
	jp z, __LABEL329
__LABEL328:
	ld a, (ix-3)
	or a
	jp z, __LABEL334
	ld a, (ix-1)
	sub 20
	jp nz, __LABEL336
	xor a
	jp _FindTop__leave
__LABEL336:
	ld a, (ix-1)
	inc a
	jp _FindTop__leave
__LABEL334:
	dec (ix-1)
__LABEL321:
	ld a, (ix-1)
	ld h, 1
	call __LTI8
	or a
	jp z, __LABEL324
	xor a
_FindTop__leave:
	ld sp, ix
	pop ix
	ret
_EraseLines:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	call _FindTop
	ld (ix-1), a
	ld (ix-4), 3
	jp __LABEL337
__LABEL340:
	ld (ix-2), 1
	ld a, (ix-4)
	add a, (ix+5)
	ld (ix-3), a
	ld h, (ix-1)
	call __LTI8
	push af
	ld h, (ix-3)
	ld a, 20
	call __LTI8
	pop de
	or d
	jp nz, __LABEL341
	ld (ix-5), 1
	jp __LABEL344
__LABEL347:
	ld a, (ix-3)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp nz, __LABEL350
	ld (ix-2), 0
	jp __LABEL346
__LABEL350:
	inc (ix-5)
__LABEL344:
	ld a, 10
	cp (ix-5)
	jp nc, __LABEL347
__LABEL346:
	ld a, (ix-2)
	or a
	jp z, __LABEL352
	inc (ix+5)
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-3)
	dec a
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _MoveRect
	call _UpdateScreen
	ld hl, 233
	push hl
	ld hl, 82
	call __BEEPER
	inc (ix-6)
__LABEL352:
__LABEL341:
	dec (ix-4)
__LABEL337:
	ld a, (ix-4)
	ld h, 0
	call __LTI8
	or a
	jp z, __LABEL340
	ld a, (ix-6)
_EraseLines__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_RunTetris:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -17
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 16
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL1254
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1255
	ld bc, 1
	ldir
	ld a, (_playedTetrisMusic)
	or a
	jp nz, __LABEL354
	ld hl, 100
	push hl
	ld hl, _tetrisIntroMusic
	push hl
	call _PlayMusic
	ld a, 1
	ld (_playedTetrisMusic), a
__LABEL354:
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	inc a
	ld h, a
	ld a, 40
	call __DIVU8_FAST
	ld (ix-1), a
	ld de, __LABEL355
	ld bc, -17
	call __PSTORE_STR
	call RND
	push bc
	push de
	push af
	ld a, 083h
	ld de, 00060h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-10), a
	call RND
	push bc
	push de
	push af
	ld a, 083h
	ld de, 00060h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-10), a
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld bc, 0
	push bc
	ld bc, 10
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-13), a
	ld hl, 908
	push hl
	ld hl, 46
	call __BEEPER
	ld hl, 806
	push hl
	ld hl, 51
	call __BEEPER
	ld hl, 673
	push hl
	ld hl, 61
	call __BEEPER
	ld hl, 596
	push hl
	ld hl, 69
	call __BEEPER
	call RND
	push bc
	push de
	push af
	ld a, 083h
	ld de, 00060h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-10), a
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	inc a
	push af
	call _LoadTetrisScreen
__LABEL356:
	ld a, (ix-2)
	or a
	jp nz, __LABEL357
	ld a, (ix-3)
	sub 255
	jp nz, __LABEL359
	ld (ix-4), 1
	ld a, (ix-10)
	ld (ix-3), a
	call RND
	push bc
	push de
	push af
	ld a, 083h
	ld de, 00060h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-10), a
	ld a, (ix-3)
	push af
	call _ExpandPiece
	ld a, (_expandedSize.__DATA__ + 0)
	neg
	ld (ix-5), a
	ld (ix-6), 4
	ld hl, 1
	push hl
	ld hl, 0
	push hl
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tetrisPieces
	call __ARRAY
	ld a, (hl)
	ld b, 4
__LABEL1256:
	srl a
	djnz __LABEL1256
	push af
	ld hl, 0
	push hl
	ld hl, 0
	push hl
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _tetrisPieces
	call __ARRAY
	ld a, (hl)
	ld b, 4
__LABEL1257:
	srl a
	djnz __LABEL1257
	push af
	call _SetSymbol
__LABEL359:
	ld a, (ix-4)
	push af
	ld a, (ix-4)
	push af
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _WillCollide
	or a
	jp z, __LABEL360
	ld a, (ix-5)
	ld h, 1
	call __LTI8
	or a
	jp z, __LABEL362
	ld (ix-2), 1
	jp __LABEL363
__LABEL362:
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	ld a, (ix-5)
	push af
	call _EraseLines
	ld (ix-7), a
	or a
	jp z, __LABEL364
	ld a, (ix-7)
	dec a
	jp nz, __LABEL366
	ld l, (ix-15)
	ld h, (ix-14)
	inc hl
	ld (ix-15), l
	ld (ix-14), h
	jp __LABEL367
__LABEL366:
	ld a, (ix-7)
	sub 2
	jp nz, __LABEL368
	ld l, (ix-15)
	ld h, (ix-14)
	inc hl
	inc hl
	inc hl
	ld (ix-15), l
	ld (ix-14), h
	jp __LABEL369
__LABEL368:
	ld a, (ix-7)
	sub 3
	jp nz, __LABEL370
	ld l, (ix-15)
	ld h, (ix-14)
	ld de, 5
	add hl, de
	ld (ix-15), l
	ld (ix-14), h
	jp __LABEL371
__LABEL370:
	ld a, (ix-7)
	sub 4
	jp nz, __LABEL373
	ld l, (ix-15)
	ld h, (ix-14)
	ld de, 10
	add hl, de
	ld (ix-15), l
	ld (ix-14), h
__LABEL373:
__LABEL371:
__LABEL369:
__LABEL367:
	ld a, (ix-12)
	add a, (ix-7)
	ld (ix-12), a
	sub (ix-13)
	ccf
	jp nc, __LABEL375
	ld a, (ix+5)
	sub 99
	jp nz, __LABEL377
	ld a, 1
	jp _RunTetris__leave
__LABEL377:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	sub 9
	jp nz, __LABEL379
	ld hl, 60
	push hl
	ld hl, _tetrisLevelMusic
	push hl
	call _PlayMusic
__LABEL379:
	call _ShowCurtain
	ld hl, 908
	push hl
	ld hl, 46
	call __BEEPER
	ld hl, 596
	push hl
	ld hl, 69
	call __BEEPER
	inc (ix+5)
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	inc a
	ld h, a
	ld a, 40
	call __DIVU8_FAST
	ld (ix-1), a
	ld (ix-12), 0
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld bc, 0
	push bc
	ld bc, 10
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-13), a
	ld l, (ix-15)
	ld h, (ix-14)
	ld de, 50
	add hl, de
	ld (ix-15), l
	ld (ix-14), h
	ld a, (ix+5)
	push af
	call _SetLevel
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	inc a
	push af
	call _LoadTetrisScreen
__LABEL375:
	ld l, (ix-15)
	ld h, (ix-14)
	push hl
	call _SetScore
	call _UpdateScreen
	jp __LABEL365
__LABEL364:
	ld hl, 2949
	push hl
	ld hl, 6
	call __BEEPER
__LABEL365:
	ld (ix-3), 255
__LABEL363:
	jp __LABEL361
__LABEL360:
	xor a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	inc (ix-5)
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL380:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL381
	call INKEY
	ld d, h
	ld e, l
	ld bc, -17
	call __PSTORE_STR2
	dec (ix-9)
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL355
	xor a
	call __STRNE
	ld h, (ix-8)
	or a
	jr z, __LABEL1258
	ld a, h
__LABEL1258:
	push af
	ld a, 1
	cp (ix-9)
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1259
	ld a, h
__LABEL1259:
	or a
	jp nz, __LABEL380
	ld (ix-8), 0
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL355
	xor a
	call __STRNE
	or a
	jp z, __LABEL385
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL386
	xor a
	call __STREQ
	or a
	jp z, __LABEL387
	ld a, (ix-4)
	push af
	ld a, (ix-4)
	push af
	xor a
	push af
	ld a, 255
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _WillCollide
	or a
	jp nz, __LABEL390
	xor a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	dec (ix-6)
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	call _UpdateScreen
	ld (ix-8), 1
	ld (ix-9), 70
__LABEL390:
	jp __LABEL388
__LABEL387:
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL391
	xor a
	call __STREQ
	or a
	jp z, __LABEL392
	ld a, (ix-4)
	push af
	ld a, (ix-4)
	push af
	xor a
	push af
	ld a, 1
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _WillCollide
	or a
	jp nz, __LABEL395
	xor a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	inc (ix-6)
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	call _UpdateScreen
	ld (ix-8), 1
	ld (ix-9), 70
__LABEL395:
	jp __LABEL393
__LABEL392:
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL396
	xor a
	call __STREQ
	or a
	jp nz, __LABEL381
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL399
	xor a
	call __STREQ
	or a
	jp z, __LABEL400
	ld a, (ix-4)
	inc a
	ld (ix-11), a
	ld h, a
	ld a, 4
	cp h
	jp nc, __LABEL403
	ld (ix-11), 1
__LABEL403:
	ld a, (ix-11)
	push af
	ld a, (ix-4)
	push af
	xor a
	push af
	xor a
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _WillCollide
	or a
	jp nz, __LABEL405
	xor a
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	ld a, (ix-11)
	ld (ix-4), a
	ld a, 1
	push af
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-6)
	push af
	call _DrawFigure
	call _UpdateScreen
	ld (ix-8), 1
	ld (ix-9), 200
__LABEL405:
	jp __LABEL401
__LABEL400:
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL406
	xor a
	call __STREQ
	or a
	jp z, __LABEL408
	xor a
	jp _RunTetris__leave
__LABEL408:
__LABEL401:
__LABEL393:
__LABEL388:
__LABEL385:
	jp __LABEL380
__LABEL381:
__LABEL361:
	jp __LABEL356
__LABEL357:
	ld hl, 2949
	push hl
	ld hl, 28
	call __BEEPER
	ld hl, 3314
	push hl
	ld hl, 25
	call __BEEPER
	ld hl, 3947
	push hl
	ld hl, 21
	call __BEEPER
	ld hl, 4434
	push hl
	ld hl, 19
	call __BEEPER
	xor a
_RunTetris__leave:
	ex af, af'
	exx
	ld l, (ix-17)
	ld h, (ix-16)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_LoadArkanoidScreen:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld (ix-1), 1
	jp __LABEL409
__LABEL412:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _arkaScreens
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (ix-4), l
	ld (ix-3), h
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 512
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL415
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 1
	push af
	call _SetCell
	inc (ix-2)
__LABEL415:
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 256
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL417
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 2
	push af
	call _SetCell
	inc (ix-2)
__LABEL417:
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 128
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL419
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 3
	push af
	call _SetCell
	inc (ix-2)
__LABEL419:
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 64
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL421
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 4
	push af
	call _SetCell
	inc (ix-2)
__LABEL421:
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 32
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL423
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 5
	push af
	call _SetCell
	inc (ix-2)
__LABEL423:
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 16
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL425
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 6
	push af
	call _SetCell
	inc (ix-2)
__LABEL425:
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 8
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL427
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 7
	push af
	call _SetCell
	inc (ix-2)
__LABEL427:
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 4
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL429
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 8
	push af
	call _SetCell
	inc (ix-2)
__LABEL429:
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 2
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL431
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 9
	push af
	call _SetCell
	inc (ix-2)
__LABEL431:
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 1
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL433
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	call _SetCell
	inc (ix-2)
__LABEL433:
	inc (ix-1)
__LABEL409:
	ld a, 12
	cp (ix-1)
	jp nc, __LABEL412
	call _UpdateScreen
	ld a, (ix-2)
_LoadArkanoidScreen__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_GetSpeedX:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld a, (ix+5)
	or a
	jp nz, __LABEL434
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld a, l
	ld (ix-1), a
	cp 20
	jp nc, __LABEL436
	ld a, 081h
	ld de, 00080h
	ld bc, 00000h
	jp _GetSpeedX__leave
__LABEL436:
	ld a, 080h
	ld de, 00080h
	ld bc, 00000h
	jp _GetSpeedX__leave
__LABEL434:
	ld a, (ix+5)
	dec a
	jp nz, __LABEL438
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld a, l
	ld (ix-1), a
	cp 10
	jp nc, __LABEL440
	ld a, 080h
	ld de, 00080h
	ld bc, 00000h
	jp _GetSpeedX__leave
__LABEL440:
	ld a, (ix-1)
	cp 20
	jp nc, __LABEL442
	ld a, 000h
	ld de, 00000h
	ld bc, 00000h
	jp _GetSpeedX__leave
__LABEL442:
	ld a, 080h
	ld de, 00000h
	ld bc, 00000h
	jp _GetSpeedX__leave
__LABEL438:
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld a, l
	ld (ix-1), a
	cp 20
	jp nc, __LABEL444
	ld a, 081h
	ld de, 00000h
	ld bc, 00000h
	jp _GetSpeedX__leave
__LABEL444:
	ld a, 080h
	ld de, 00000h
	ld bc, 00000h
_GetSpeedX__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_GetSpeedY:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld a, l
	ld (ix-1), a
	cp 20
	jp nc, __LABEL446
	ld a, 081h
	ld de, 00080h
	ld bc, 00000h
	jp _GetSpeedY__leave
__LABEL446:
	ld a, 080h
	ld de, 00080h
	ld bc, 00000h
_GetSpeedY__leave:
	ld sp, ix
	pop ix
	ret
_RunArkanoid:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -41
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 40
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL1260
	ld bc, 1
	ldir
	ld a, (_playedArkaMusic)
	or a
	jp nz, __LABEL449
	ld a, 1
	ld (_playedArkaMusic), a
	ld hl, 96
	push hl
	ld hl, _arkaIntroMusic
	push hl
	call _PlayMusic
__LABEL449:
	ld de, __LABEL355
	ld bc, -21
	call __PSTORE_STR
	call _HideNextTitle
	ld a, (ix-3)
	push af
	call _SetLifes
__LABEL450:
	ld a, (ix-1)
	or a
	jp nz, __LABEL451
	ld a, (ix-4)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL453
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL453:
	ld a, (ix-5)
	ld h, a
	xor a
	call __LTI8
	or a
	jp z, __LABEL455
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
__LABEL455:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	inc a
	push af
	call _LoadArkanoidScreen
	ld (ix-7), a
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld h, a
	ld a, 11
	sub h
	ld (ix-2), a
	ld a, (ix+5)
	push af
	call _SetLevel
__LABEL456:
	ld a, (ix-7)
	ld h, a
	xor a
	cp h
	sbc a, a
	push af
	ld a, (ix-3)
	ld h, a
	xor a
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1261
	ld a, h
__LABEL1261:
	or a
	jp z, __LABEL457
	ld (ix-4), 4
	ld a, 083h
	ld de, 00040h
	ld bc, 00000h
	ld hl, -26
	call __PSTOREF
	ld (ix-5), 6
	ld a, 085h
	ld de, 00018h
	ld bc, 00000h
	ld hl, -31
	call __PSTOREF
	ld (ix-6), 19
	ld a, 081h
	ld de, 00000h
	ld bc, 00000h
	ld hl, -36
	call __PSTOREF
	ld a, 081h
	ld de, 00080h
	ld bc, 00000h
	ld hl, -41
	call __PSTOREF
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	call _UpdateScreen
	call INKEY
	ld d, h
	ld e, l
	ld bc, -21
	call __PSTORE_STR2
__LABEL458:
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL399
	xor a
	call __STRNE
	or a
	jp z, __LABEL459
	call INKEY
	ld d, h
	ld e, l
	ld bc, -21
	call __PSTORE_STR2
	ld l, (ix-19)
	ld h, (ix-18)
	dec hl
	ld (ix-19), l
	ld (ix-18), h
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL355
	xor a
	call __STRNE
	ld h, (ix-13)
	or a
	jr z, __LABEL1262
	ld a, h
__LABEL1262:
	push af
	ld l, (ix-19)
	ld h, (ix-18)
	ex de, hl
	ld hl, 1
	or a
	sbc hl, de
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1263
	ld a, h
__LABEL1263:
	or a
	jp nz, __LABEL458
	ld (ix-13), 0
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL355
	xor a
	call __STRNE
	or a
	jp z, __LABEL463
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL386
	xor a
	call __STREQ
	or a
	jp z, __LABEL464
	ld a, 1
	cp (ix-4)
	jp nc, __LABEL467
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	dec (ix-4)
	dec (ix-5)
	ld a, (ix-5)
	call __I8TOFREG
	ld hl, -26
	call __PSTOREF
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	call _UpdateScreen
	ld (ix-19), 50
	ld (ix-18), 0
	ld (ix-13), 1
__LABEL467:
	jp __LABEL465
__LABEL464:
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL391
	xor a
	call __STREQ
	or a
	jp z, __LABEL468
	ld a, (ix-4)
	cp 8
	jp nc, __LABEL471
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	inc (ix-4)
	inc (ix-5)
	ld a, (ix-5)
	call __I8TOFREG
	ld hl, -26
	call __PSTOREF
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	call _UpdateScreen
	ld (ix-19), 50
	ld (ix-18), 0
	ld (ix-13), 1
__LABEL471:
	jp __LABEL469
__LABEL468:
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL406
	xor a
	call __STREQ
	or a
	jp z, __LABEL473
	xor a
	jp _RunArkanoid__leave
__LABEL473:
__LABEL469:
__LABEL465:
__LABEL463:
	jp __LABEL458
__LABEL459:
__LABEL474:
	ld (ix-14), 1
__LABEL476:
	ld a, (ix-14)
	or a
	jp z, __LABEL477
	ld (ix-14), 0
	push ix
	pop hl
	ld de, -26
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __ADDF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ld e, h
	ld d, h
	call __SUB32
	ld a, l
	ld (ix-8), a
	push ix
	pop hl
	ld de, -31
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __ADDF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	ld e, h
	ld d, h
	call __SUB32
	ld a, l
	ld (ix-9), a
	ld a, (ix-6)
	add a, (ix-9)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	add a, (ix-8)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	push af
	ld a, (ix-8)
	ld h, 0
	call __LTI8
	push af
	ld a, (ix-9)
	ld h, 0
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1264
	ld a, h
__LABEL1264:
	push af
	ld h, (ix-5)
	ld a, 1
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1265
	ld a, h
__LABEL1265:
	push af
	ld h, (ix-6)
	ld a, 1
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1266
	ld a, h
__LABEL1266:
	push af
	ld a, (ix-8)
	ld h, a
	xor a
	call __LTI8
	push af
	ld a, (ix-9)
	ld h, 0
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1267
	ld a, h
__LABEL1267:
	push af
	ld a, (ix-5)
	ld h, 10
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1268
	ld a, h
__LABEL1268:
	push af
	ld h, (ix-6)
	ld a, 1
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1269
	ld a, h
__LABEL1269:
	pop de
	or d
	push af
	ld a, (ix-8)
	ld h, 0
	call __LTI8
	push af
	ld a, (ix-9)
	ld h, a
	xor a
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1270
	ld a, h
__LABEL1270:
	push af
	ld h, (ix-5)
	ld a, 1
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1271
	ld a, h
__LABEL1271:
	push af
	ld a, (ix-6)
	ld h, 12
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1272
	ld a, h
__LABEL1272:
	pop de
	or d
	push af
	ld a, (ix-8)
	ld h, a
	xor a
	call __LTI8
	push af
	ld a, (ix-9)
	ld h, a
	xor a
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1273
	ld a, h
__LABEL1273:
	push af
	ld a, (ix-5)
	ld h, 10
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1274
	ld a, h
__LABEL1274:
	push af
	ld a, (ix-6)
	ld h, 12
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1275
	ld a, h
__LABEL1275:
	pop de
	or d
	ld h, a
	pop af
	or a
	jr z, __LABEL1276
	ld a, h
__LABEL1276:
	or a
	jp z, __LABEL478
	ld a, (ix-6)
	add a, (ix-9)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL481
	xor a
	push af
	ld a, (ix-6)
	add a, (ix-9)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -41
	call __PSTOREF
	ld (ix-14), 1
__LABEL481:
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	add a, (ix-8)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL483
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	add a, (ix-8)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
	ld (ix-14), 1
__LABEL483:
	ld a, (ix-14)
	or a
	jp nz, __LABEL485
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	ld a, l
	ld (ix-15), a
	cp 10
	jp nc, __LABEL486
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -41
	call __PSTOREF
	jp __LABEL487
__LABEL486:
	ld a, (ix-15)
	cp 20
	jp nc, __LABEL488
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
	jp __LABEL489
__LABEL488:
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -41
	call __PSTOREF
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
__LABEL489:
__LABEL487:
	xor a
	push af
	ld a, (ix-6)
	add a, (ix-9)
	push af
	ld a, (ix-5)
	add a, (ix-8)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
	ld (ix-14), 1
__LABEL485:
	jp __LABEL479
__LABEL478:
	ld a, (ix-9)
	ld h, 0
	call __LTI8
	or a
	jp z, __LABEL490
	ld a, (ix-6)
	dec a
	jp nz, __LABEL492
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -41
	call __PSTOREF
	ld (ix-14), 1
	jp __LABEL493
__LABEL492:
	ld a, (ix-6)
	add a, (ix-9)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL495
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -41
	call __PSTOREF
	ld (ix-14), 1
	xor a
	push af
	ld a, (ix-6)
	add a, (ix-9)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
__LABEL495:
__LABEL493:
	jp __LABEL491
__LABEL490:
	ld a, (ix-9)
	ld h, a
	xor a
	call __LTI8
	or a
	jp z, __LABEL497
	ld a, (ix-6)
	sub 19
	jp nz, __LABEL498
	ld h, (ix-5)
	ld a, (ix-4)
	call __LEI8
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-4)
	add a, 3
	ld h, a
	pop af
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1277
	ld a, h
__LABEL1277:
	or a
	jp z, __LABEL500
	ld a, (ix-5)
	sub (ix-4)
	push af
	call _GetSpeedX
	ld hl, -36
	call __PSTOREF
	call _GetSpeedY
	ld hl, -41
	call __PSTOREF
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	res 7, e
	push bc
	push de
	push af
	ld a, 081h
	ld de, 00000h
	ld bc, 00000h
	call __LTF
	push af
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	res 7, e
	push bc
	push de
	push af
	ld a, 081h
	ld de, 00000h
	ld bc, 00000h
	call __LTF
	ld h, a
	pop af
	or a
	jr z, __LABEL1278
	ld a, h
__LABEL1278:
	or a
	jp z, __LABEL503
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	ld a, 082h
	ld de, 00000h
	ld bc, 00000h
	call __MULF
	ld hl, -41
	call __PSTOREF
__LABEL503:
	ld a, (ix-5)
	sub 10
	sub 1
	sbc a, a
	push af
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	ld a, 000h
	ld de, 00000h
	ld bc, 00000h
	call __GTF
	ld h, a
	pop af
	or a
	jr z, __LABEL1279
	ld a, h
__LABEL1279:
	or a
	jp z, __LABEL505
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
__LABEL505:
	ld a, (ix-5)
	dec a
	sub 1
	sbc a, a
	push af
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	ld a, 000h
	ld de, 00000h
	ld bc, 00000h
	call __LTF
	ld h, a
	pop af
	or a
	jr z, __LABEL1280
	ld a, h
__LABEL1280:
	or a
	jp z, __LABEL507
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
__LABEL507:
	ld (ix-11), 1
	jp __LABEL501
__LABEL500:
	ld (ix-12), 1
__LABEL501:
	jp __LABEL499
__LABEL498:
	ld a, (ix-6)
	add a, (ix-9)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL509
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -41
	call __PSTOREF
	ld (ix-14), 1
	xor a
	push af
	ld a, (ix-6)
	add a, (ix-9)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
__LABEL509:
__LABEL499:
__LABEL497:
__LABEL491:
	ld a, (ix-8)
	ld h, 0
	call __LTI8
	or a
	jp z, __LABEL510
	ld a, (ix-5)
	dec a
	jp nz, __LABEL512
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
	ld (ix-14), 1
	jp __LABEL513
__LABEL512:
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	add a, (ix-8)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL515
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
	ld (ix-14), 1
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	add a, (ix-8)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
__LABEL515:
__LABEL513:
	jp __LABEL511
__LABEL510:
	ld a, (ix-8)
	ld h, a
	xor a
	call __LTI8
	or a
	jp z, __LABEL517
	ld a, (ix-5)
	sub 10
	jp nz, __LABEL518
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
	ld (ix-14), 1
	jp __LABEL519
__LABEL518:
	ld a, (ix-6)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-5)
	add a, (ix-8)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL521
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __NEGF
	ld hl, -36
	call __PSTOREF
	ld (ix-14), 1
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	add a, (ix-8)
	push af
	call _SetCell
	dec (ix-7)
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	ld (ix-10), 1
__LABEL521:
__LABEL519:
__LABEL517:
__LABEL511:
__LABEL479:
	ld a, (ix-14)
	or a
	jp z, __LABEL523
	call _UpdateScreen
__LABEL523:
	jp __LABEL476
__LABEL477:
	ld a, (ix-7)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL524
	ld a, (ix-12)
	or a
	jp z, __LABEL526
	ld (ix-12), 0
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	call _UpdateScreen
	ld hl, 24
	push hl
	ld hl, _arkaDeathMusic
	push hl
	call _PlayMusic
	dec (ix-3)
	ld a, (ix-3)
	or a
	jp z, __LABEL475
	ld a, (ix-3)
	push af
	call _SetLifes
	xor a
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	call _UpdateScreen
	jp __LABEL475
__LABEL526:
	ld a, (ix-11)
	or a
	jp z, __LABEL530
	ld (ix-11), 0
	ld (ix-10), 0
	ld hl, 3314
	push hl
	ld hl, 0
	call __BEEPER
	jp __LABEL531
__LABEL530:
	ld a, (ix-10)
	or a
	jp z, __LABEL533
	ld (ix-11), 0
	ld (ix-10), 0
	ld hl, 806
	push hl
	ld hl, 4
	call __BEEPER
__LABEL533:
__LABEL531:
	xor a
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	push ix
	pop hl
	ld de, -26
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	push ix
	pop hl
	ld de, -36
	add hl, de
	call __PLOADF
	call __ADDF
	ld hl, -26
	call __PSTOREF
	push ix
	pop hl
	ld de, -31
	add hl, de
	call __PLOADF
	push bc
	push de
	push af
	push ix
	pop hl
	ld de, -41
	add hl, de
	call __PLOADF
	call __ADDF
	ld hl, -31
	call __PSTOREF
	push ix
	pop hl
	ld de, -26
	add hl, de
	call __PLOADF
	call __FTOU32REG
	ld a, l
	ld (ix-5), a
	push ix
	pop hl
	ld de, -31
	add hl, de
	call __PLOADF
	call __FTOU32REG
	ld a, l
	ld (ix-6), a
	ld a, 1
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-5)
	push af
	call _SetCell
	call _UpdateScreen
	call _ResetFrameCounter
	ld (ix-13), 0
__LABEL534:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL535
	call INKEY
	ld d, h
	ld e, l
	ld bc, -21
	call __PSTORE_STR2
	ld l, (ix-19)
	ld h, (ix-18)
	dec hl
	ld (ix-19), l
	ld (ix-18), h
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL355
	xor a
	call __STRNE
	ld h, (ix-13)
	or a
	jr z, __LABEL1281
	ld a, h
__LABEL1281:
	push af
	ld l, (ix-19)
	ld h, (ix-18)
	ex de, hl
	ld hl, 1
	or a
	sbc hl, de
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1282
	ld a, h
__LABEL1282:
	or a
	jp nz, __LABEL534
	ld (ix-13), 0
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL355
	xor a
	call __STRNE
	or a
	jp z, __LABEL539
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL386
	xor a
	call __STREQ
	or a
	jp z, __LABEL540
	ld a, 1
	cp (ix-4)
	jp nc, __LABEL543
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	dec (ix-4)
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	call _UpdateScreen
	ld (ix-19), 50
	ld (ix-18), 0
	ld (ix-13), 1
__LABEL543:
	jp __LABEL541
__LABEL540:
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL391
	xor a
	call __STREQ
	or a
	jp z, __LABEL544
	ld a, (ix-4)
	cp 8
	jp nc, __LABEL547
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	inc (ix-4)
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-4)
	add a, 2
	push af
	ld a, (ix-4)
	push af
	call _FillRect
	call _UpdateScreen
	ld (ix-19), 50
	ld (ix-18), 0
	ld (ix-13), 1
__LABEL547:
	jp __LABEL545
__LABEL544:
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL399
	xor a
	call __STREQ
	or a
	jp nz, __LABEL535
	ld l, (ix-21)
	ld h, (ix-20)
	ld de, __LABEL406
	xor a
	call __STREQ
	or a
	jp z, __LABEL551
	xor a
	jp _RunArkanoid__leave
__LABEL551:
__LABEL545:
__LABEL541:
__LABEL539:
	jp __LABEL534
__LABEL535:
	jp __LABEL525
__LABEL524:
	jp __LABEL475
__LABEL525:
	jp __LABEL474
__LABEL475:
	jp __LABEL456
__LABEL457:
	ld a, (ix-3)
	or a
	jp nz, __LABEL552
	ld (ix-1), 1
	jp __LABEL553
__LABEL552:
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, 50
	add hl, de
	ld (ix-17), l
	ld (ix-16), h
	ld l, (ix-17)
	ld h, (ix-16)
	push hl
	call _SetScore
	inc (ix+5)
	ld a, 99
	cp (ix+5)
	jp nc, __LABEL555
	ld a, 1
	jp _RunArkanoid__leave
__LABEL555:
	call _ShowCurtain
__LABEL553:
	jp __LABEL450
__LABEL451:
	xor a
_RunArkanoid__leave:
	ex af, af'
	exx
	ld l, (ix-21)
	ld h, (ix-20)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_RunRacing:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -19
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 18
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -1
	add hl, bc
	ex de, hl
	ld hl, __LABEL1283
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -9
	add hl, bc
	ex de, hl
	ld hl, __LABEL1284
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -10
	add hl, bc
	ex de, hl
	ld hl, __LABEL1285
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -12
	add hl, bc
	ex de, hl
	ld hl, __LABEL1286
	ld bc, 1
	ldir
	ld a, (_playedRacingMusic)
	or a
	jp nz, __LABEL557
	ld a, 1
	ld (_playedRacingMusic), a
	ld hl, 42
	push hl
	ld hl, _raceIntroMusic
	push hl
	call _PlayMusic
__LABEL557:
	call _HideNextTitle
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	call _SetScore
__LABEL558:
	ld a, (ix-12)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL559
	ld (ix-3), 0
	ld (ix-6), 0
	ld (ix-9), 20
	ld (ix-10), 3
	ld (ix-1), 1
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld a, l
	ld (ix-13), a
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	ld h, a
	ld a, 10
	sub h
	ld (ix-14), a
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld bc, 0
	push bc
	ld bc, 10
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-15), a
	ld a, (ix-12)
	push af
	call _SetLifes
	ld a, (ix+5)
	push af
	call _SetLevel
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 1
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 3
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	push af
	ld a, 18
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 17
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL560:
	ld a, (ix-11)
	or a
	jp nz, __LABEL561
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 1
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 1
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-1)
	add a, 10
	push af
	ld a, 10
	push af
	call _SetCell
	ld a, (ix-1)
	dec a
	jp nz, __LABEL562
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	call _SetCell
	jp __LABEL563
__LABEL562:
	ld a, 1
	push af
	ld a, (ix-1)
	dec a
	push af
	ld a, 1
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, (ix-1)
	dec a
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL563:
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 9
	push af
	ld a, 1
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, (ix-1)
	add a, 9
	push af
	ld a, 10
	push af
	call _SetCell
	ld a, (ix-1)
	sub 10
	jp nz, __LABEL564
	ld (ix-1), 1
	jp __LABEL565
__LABEL564:
	inc (ix-1)
__LABEL565:
	ld a, (ix-3)
	sub 1
	sbc a, a
	push af
	ld h, (ix-9)
	ld a, 6
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1287
	ld a, h
__LABEL1287:
	push af
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix-13)
	inc a
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	call __LEI32
	ld h, a
	pop af
	or a
	jr z, __LABEL1288
	ld a, h
__LABEL1288:
	or a
	jp z, __LABEL566
	ld (ix-5), 254
	call RND
	push bc
	push de
	push af
	ld a, 082h
	ld de, 00000h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	push hl
	push de
	ld de, 0
	ld hl, 3
	call __MUL32
	ld a, l
	ld (ix-4), a
	ld (ix-9), 254
	ld a, 253
	push af
	ld a, (ix-4)
	push af
	call _PlaceCar
	ld (ix-3), 1
	jp __LABEL567
__LABEL566:
	ld a, (ix-3)
	or a
	jp z, __LABEL569
	ld a, (ix-5)
	push af
	ld a, (ix-4)
	push af
	call _PlaceCar
	inc (ix-5)
	ld a, (ix-5)
	ld (ix-9), a
	ld h, (ix-5)
	ld a, 20
	call __LTI8
	or a
	jp z, __LABEL571
	ld (ix-3), 0
	dec (ix-15)
	ld l, (ix-19)
	ld h, (ix-18)
	inc hl
	ld (ix-19), l
	ld (ix-18), h
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	call _SetScore
	ld a, (ix-15)
	or a
	jp z, __LABEL561
__LABEL571:
	ld a, (ix-3)
	push af
	ld h, (ix-5)
	ld a, 4
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1289
	ld a, h
__LABEL1289:
	push af
	ld a, (ix-5)
	ld h, 12
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1290
	ld a, h
__LABEL1290:
	push af
	call RND
	push bc
	push de
	push af
	ld a, 086h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix-13)
	inc a
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	call __LEI32
	ld h, a
	pop af
	or a
	jr z, __LABEL1291
	ld a, h
__LABEL1291:
	or a
	jp z, __LABEL575
	ld a, (ix-4)
	sub 3
	jp nz, __LABEL576
	ld (ix-2), 3
	jp __LABEL577
__LABEL576:
	ld (ix-2), 253
__LABEL577:
	call _UpdateScreen
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-5)
	add a, 4
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-4)
	add a, 3
	push af
	ld a, (ix-4)
	push af
	call _MoveRect
	ld a, (ix-4)
	add a, (ix-2)
	ld (ix-4), a
__LABEL575:
__LABEL569:
__LABEL567:
	ld a, (ix-6)
	sub 1
	sbc a, a
	push af
	ld h, (ix-9)
	ld a, 6
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1292
	ld a, h
__LABEL1292:
	push af
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix-13)
	inc a
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	call __LEI32
	ld h, a
	pop af
	or a
	jr z, __LABEL1293
	ld a, h
__LABEL1293:
	or a
	jp z, __LABEL578
	call RND
	push bc
	push de
	push af
	ld a, 082h
	ld de, 00000h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	push hl
	push de
	ld de, 0
	ld hl, 3
	call __MUL32
	ld a, l
	ld (ix-7), a
	ld (ix-8), 254
	ld (ix-9), 254
	ld a, 253
	push af
	ld a, (ix-7)
	push af
	call _PlaceCar
	ld (ix-6), 1
	jp __LABEL579
__LABEL578:
	ld a, (ix-6)
	or a
	jp z, __LABEL581
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _PlaceCar
	inc (ix-8)
	ld a, (ix-8)
	ld h, (ix-9)
	call __LTI8
	ld d, a
	ld a, (ix-3)
	sub 1
	sbc a, a
	or d
	jp z, __LABEL583
	ld a, (ix-8)
	ld (ix-9), a
__LABEL583:
	ld h, (ix-8)
	ld a, 20
	call __LTI8
	or a
	jp z, __LABEL585
	ld (ix-6), 0
	dec (ix-15)
	ld l, (ix-19)
	ld h, (ix-18)
	inc hl
	ld (ix-19), l
	ld (ix-18), h
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	call _SetScore
	ld a, (ix-15)
	or a
	jp z, __LABEL561
__LABEL585:
	ld a, (ix-6)
	push af
	ld h, (ix-8)
	ld a, 4
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1294
	ld a, h
__LABEL1294:
	push af
	ld a, (ix-8)
	ld h, 12
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1295
	ld a, h
__LABEL1295:
	push af
	call RND
	push bc
	push de
	push af
	ld a, 086h
	ld de, 00070h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix-13)
	inc a
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	call __LEI32
	ld h, a
	pop af
	or a
	jr z, __LABEL1296
	ld a, h
__LABEL1296:
	or a
	jp z, __LABEL589
	ld a, (ix-7)
	sub 3
	jp nz, __LABEL590
	ld (ix-2), 3
	jp __LABEL591
__LABEL590:
	ld (ix-2), 253
__LABEL591:
	call _UpdateScreen
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-8)
	add a, 4
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	add a, 3
	push af
	ld a, (ix-7)
	push af
	call _MoveRect
	ld a, (ix-7)
	add a, (ix-2)
	ld (ix-7), a
__LABEL589:
__LABEL581:
__LABEL579:
	ld a, (ix-3)
	push af
	ld h, (ix-5)
	ld a, 13
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1297
	ld a, h
__LABEL1297:
	push af
	ld a, (ix-4)
	sub (ix-10)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1298
	ld a, h
__LABEL1298:
	push af
	ld a, (ix-6)
	push af
	ld h, (ix-8)
	ld a, 13
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1299
	ld a, h
__LABEL1299:
	push af
	ld a, (ix-7)
	sub (ix-10)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1300
	ld a, h
__LABEL1300:
	pop de
	or d
	jp z, __LABEL593
	ld (ix-11), 1
	jp __LABEL561
__LABEL593:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL594:
	ld a, (ix-14)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL595
	call INKEY
	ld d, h
	ld e, l
	ld bc, -17
	call __PSTORE_STR2
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL386
	xor a
	call __STREQ
	or a
	jp z, __LABEL596
	ld a, (ix-10)
	sub 6
	jp nz, __LABEL599
	xor a
	push af
	ld a, 253
	push af
	ld a, 20
	push af
	ld a, 17
	push af
	ld a, 8
	push af
	ld a, 6
	push af
	call _MoveRect
	call _UpdateScreen
	ld (ix-10), 3
	ld a, (ix-3)
	push af
	ld h, (ix-5)
	ld a, 13
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1301
	ld a, h
__LABEL1301:
	push af
	ld a, (ix-4)
	sub (ix-10)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1302
	ld a, h
__LABEL1302:
	push af
	ld a, (ix-6)
	push af
	ld h, (ix-8)
	ld a, 13
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1303
	ld a, h
__LABEL1303:
	push af
	ld a, (ix-7)
	sub (ix-10)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1304
	ld a, h
__LABEL1304:
	pop de
	or d
	jp z, __LABEL601
	ld (ix-11), 1
	jp __LABEL595
__LABEL601:
__LABEL599:
	jp __LABEL597
__LABEL596:
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL391
	xor a
	call __STREQ
	or a
	jp z, __LABEL602
	ld a, (ix-10)
	sub 3
	jp nz, __LABEL605
	xor a
	push af
	ld a, 3
	push af
	ld a, 20
	push af
	ld a, 17
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _MoveRect
	call _UpdateScreen
	ld (ix-10), 6
	ld a, (ix-3)
	push af
	ld h, (ix-5)
	ld a, 13
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1305
	ld a, h
__LABEL1305:
	push af
	ld a, (ix-4)
	sub (ix-10)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1306
	ld a, h
__LABEL1306:
	push af
	ld a, (ix-6)
	push af
	ld h, (ix-8)
	ld a, 13
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL1307
	ld a, h
__LABEL1307:
	push af
	ld a, (ix-7)
	sub (ix-10)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1308
	ld a, h
__LABEL1308:
	pop de
	or d
	jp z, __LABEL607
	ld (ix-11), 1
	jp __LABEL595
__LABEL607:
__LABEL605:
	jp __LABEL603
__LABEL602:
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL608
	xor a
	call __STREQ
	or a
	jp nz, __LABEL595
	ld l, (ix-17)
	ld h, (ix-16)
	ld de, __LABEL406
	xor a
	call __STREQ
	or a
	jp z, __LABEL612
	xor a
	jp _RunRacing__leave
__LABEL612:
__LABEL603:
__LABEL597:
	jp __LABEL594
__LABEL595:
	jp __LABEL560
__LABEL561:
	ld a, (ix-11)
	or a
	jp z, __LABEL613
	dec (ix-12)
	xor a
	push af
	ld a, 18
	push af
	ld a, (ix-10)
	inc a
	push af
	call _Explode
	call _ShowCurtain
	ld (ix-11), 0
	jp __LABEL614
__LABEL613:
	inc (ix+5)
	ld a, 99
	cp (ix+5)
	jp nc, __LABEL616
	ld a, 1
	jp _RunRacing__leave
__LABEL616:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	or a
	jp nz, __LABEL618
	ld hl, 14
	push hl
	ld hl, _raceLevelMusic
	push hl
	call _PlayMusic
__LABEL618:
	ld l, (ix-19)
	ld h, (ix-18)
	ld de, 10
	add hl, de
	ld (ix-19), l
	ld (ix-18), h
	ld l, (ix-19)
	ld h, (ix-18)
	push hl
	call _SetScore
	call _ShowCurtain
__LABEL614:
	jp __LABEL558
__LABEL559:
	xor a
_RunRacing__leave:
	ex af, af'
	exx
	ld l, (ix-17)
	ld h, (ix-16)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_PlaceCar:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+7)
	ld h, 1
	call __LTI8
	or a
	jp z, __LABEL619
	xor a
	push af
	ld a, (ix+7)
	add a, 3
	push af
	ld a, 1
	push af
	ld a, (ix+5)
	add a, 3
	push af
	ld a, (ix+5)
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, (ix+7)
	add a, 4
	push af
	ld a, (ix+5)
	inc a
	push af
	call _SetCell
	ld h, (ix+7)
	ld a, 253
	call __LTI8
	or a
	jp z, __LABEL622
	ld a, 1
	push af
	ld a, (ix+7)
	add a, 3
	push af
	ld a, (ix+5)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, (ix+7)
	add a, 3
	push af
	ld a, (ix+5)
	inc a
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, (ix+7)
	add a, 3
	push af
	ld a, (ix+5)
	add a, 2
	push af
	call _SetCell
__LABEL622:
	ld h, (ix+7)
	ld a, 254
	call __LTI8
	or a
	jp z, __LABEL624
	ld a, 1
	push af
	ld a, (ix+7)
	add a, 2
	push af
	ld a, (ix+5)
	inc a
	push af
	call _SetCell
__LABEL624:
	ld a, (ix+7)
	or a
	jp nz, __LABEL626
	ld a, 1
	push af
	ld a, (ix+7)
	inc a
	push af
	ld a, (ix+5)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, (ix+7)
	inc a
	push af
	ld a, (ix+5)
	add a, 2
	push af
	call _SetCell
__LABEL626:
	jp __LABEL620
__LABEL619:
	ld h, (ix+7)
	ld a, 16
	call __LTI8
	or a
	jp z, __LABEL627
	ld a, (ix+7)
	sub 20
	jp nz, __LABEL629
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix+5)
	add a, 2
	push af
	ld a, (ix+5)
	push af
	call _FillRect
	jp __LABEL630
__LABEL629:
	ld a, 1
	push af
	xor a
	push af
	ld a, 19
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	add a, 2
	push af
	ld a, (ix+5)
	push af
	call _MoveRect
__LABEL630:
	jp __LABEL628
__LABEL627:
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix+7)
	add a, 3
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	add a, 2
	push af
	ld a, (ix+5)
	push af
	call _MoveRect
__LABEL628:
__LABEL620:
_PlaceCar__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_LoadSnakeScreen:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld (ix-1), 1
	jp __LABEL631
__LABEL634:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _snakeScreens
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (ix-3), l
	ld (ix-2), h
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 512
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL637
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 1
	push af
	call _SetCell
__LABEL637:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 256
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL639
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 2
	push af
	call _SetCell
__LABEL639:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 128
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL641
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 3
	push af
	call _SetCell
__LABEL641:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 64
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL643
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL643:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 32
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL645
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 5
	push af
	call _SetCell
__LABEL645:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 16
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL647
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 6
	push af
	call _SetCell
__LABEL647:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 8
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL649
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 7
	push af
	call _SetCell
__LABEL649:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 4
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL651
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 8
	push af
	call _SetCell
__LABEL651:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 2
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL653
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL653:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 1
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL655
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL655:
	inc (ix-1)
__LABEL631:
	ld a, 20
	cp (ix-1)
	jp nc, __LABEL634
_LoadSnakeScreen__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_RunSnake:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -22
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 21
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL1309
	ld bc, 1
	ldir
	ld hl, -22
	ld de, __LABEL1310
	ld bc, 40
	call __ALLOC_LOCAL_ARRAY
	push ix
	pop hl
	ld bc, -9
	add hl, bc
	ex de, hl
	ld hl, __LABEL1311
	ld bc, 1
	ldir
	ld a, (_playedSnakeMusic)
	or a
	jp nz, __LABEL657
	ld a, 1
	ld (_playedSnakeMusic), a
	ld hl, 40
	push hl
	ld hl, _snakeIntroMusic
	push hl
	call _PlayMusic
__LABEL657:
	call _HideNextTitle
	ld l, (ix-18)
	ld h, (ix-17)
	push hl
	call _SetScore
__LABEL658:
	ld a, (ix-3)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL659
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 6
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-13), a
	ld (ix-12), 0
	ld (ix-5), 4
	ld (ix-6), 0
	ld l, (ix-20)
	ld h, (ix-19)
	ld a, 5
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	inc hl
	ld a, 10
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	inc hl
	inc hl
	ld a, 5
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	inc hl
	inc hl
	inc hl
	ld a, 11
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	ld de, 4
	add hl, de
	ld a, 5
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	ld de, 5
	add hl, de
	ld a, 12
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	ld de, 6
	add hl, de
	ld a, 5
	ld (hl), a
	ld l, (ix-20)
	ld h, (ix-19)
	ld de, 7
	add hl, de
	ld a, 13
	ld (hl), a
	ld a, (ix+5)
	push af
	call _SetLevel
	ld a, (ix-3)
	push af
	call _SetLifes
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	inc a
	push af
	call _LoadSnakeScreen
	call _UpdateScreen
	ld (ix-9), 1
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld bc, 0
	push bc
	ld bc, 12
	push bc
	call __SUB32
	ld a, l
	ld (ix-4), a
	ld (ix-14), 10
__LABEL660:
	ld a, (ix-2)
	or a
	jp nz, __LABEL661
	ld hl, 0
	push hl
	ld a, (ix-5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	ld (ix-7), a
	ld hl, 1
	push hl
	ld a, (ix-5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	ld (ix-8), a
	ld a, (ix-5)
	ld (ix-1), a
	jp __LABEL662
__LABEL665:
	ld a, (ix-1)
	sub (ix-5)
	jp nz, __LABEL667
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	ld (ix-7), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	ld (ix-8), a
	xor a
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	ld hl, 0
	push hl
	ld a, (ix-1)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-9)
	or a
	jp z, __LABEL670
	ld a, 1
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	call _SetCell
__LABEL670:
	jp __LABEL668
__LABEL667:
	ld a, (ix-1)
	dec a
	jp nz, __LABEL671
	ld a, (ix-6)
	or a
	jp nz, __LABEL673
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	dec a
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL674
__LABEL673:
	ld a, (ix-6)
	dec a
	jp nz, __LABEL675
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	inc a
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL676
__LABEL675:
	ld a, (ix-6)
	sub 2
	jp nz, __LABEL677
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	dec a
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	jp __LABEL678
__LABEL677:
	ld a, (ix-6)
	sub 3
	jp nz, __LABEL680
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	inc a
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
__LABEL680:
__LABEL678:
__LABEL676:
__LABEL674:
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, 10
	cp (hl)
	sbc a, a
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop de
	ld a, (hl)
	cp 1
	sbc a, a
	or d
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop de
	ld a, 20
	cp (hl)
	sbc a, a
	or d
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop de
	ld a, (hl)
	cp 1
	sbc a, a
	or d
	jp z, __LABEL682
	ld (ix-2), 1
	jp __LABEL661
__LABEL682:
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL684
	ld a, (ix-12)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	sub (ix-10)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1312
	ld a, h
__LABEL1312:
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	sub (ix-11)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1313
	ld a, h
__LABEL1313:
	or a
	jp z, __LABEL685
	ld hl, 388
	push hl
	ld hl, 25
	call __BEEPER
	ld l, (ix-18)
	ld h, (ix-17)
	inc hl
	ld (ix-18), l
	ld (ix-17), h
	dec (ix-13)
	ld a, (ix-13)
	or a
	jp z, __LABEL661
	inc (ix-5)
	ld a, (ix-7)
	push af
	ld hl, 0
	push hl
	ld a, (ix-5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-8)
	push af
	ld hl, 1
	push hl
	ld a, (ix-5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld l, (ix-18)
	ld h, (ix-17)
	push hl
	call _SetScore
	ld a, 1
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	ld (ix-12), 0
	jp __LABEL686
__LABEL685:
	ld (ix-2), 1
	jp __LABEL661
__LABEL686:
__LABEL684:
	ld a, 1
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	call _SetCell
	jp __LABEL672
__LABEL671:
	ld hl, 0
	push hl
	ld a, (ix-1)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld hl, 1
	push hl
	ld a, (ix-1)
	dec a
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-9)
	or a
	jp z, __LABEL690
	ld a, 1
	push af
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	push ix
	pop hl
	ld de, -22
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	call _SetCell
__LABEL690:
__LABEL672:
__LABEL668:
	dec (ix-1)
__LABEL662:
	ld a, (ix-1)
	ld h, 1
	call __LTI8
	or a
	jp z, __LABEL665
	call _UpdateScreen
	ld a, (ix-12)
	or a
	jp nz, __LABEL692
	ld a, (ix-14)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL693
	dec (ix-14)
	jp __LABEL694
__LABEL693:
	call RND
	push bc
	push de
	push af
	ld a, 087h
	ld de, 00048h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	push hl
	ld de, 0
	ld hl, 10
	call __MUL32
	call __LEI32
	or a
	jp nz, __LABEL696
__LABEL697:
	call RND
	push bc
	push de
	push af
	ld a, 084h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-10), a
	call RND
	push bc
	push de
	push af
	ld a, 085h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-11), a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp nz, __LABEL697
	ld (ix-12), 1
	ld a, 1
	push af
	ld a, (ix-11)
	push af
	ld a, (ix-10)
	push af
	call _SetCell
	call _UpdateScreen
__LABEL696:
__LABEL694:
__LABEL692:
	call _ResetFrameCounter
__LABEL700:
	ld a, (ix-4)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL701
	call INKEY
	ld d, h
	ld e, l
	ld bc, -16
	call __PSTORE_STR2
	ld l, (ix-16)
	ld h, (ix-15)
	ld de, __LABEL386
	xor a
	call __STREQ
	or a
	jp z, __LABEL702
	ld (ix-6), 2
	jp __LABEL703
__LABEL702:
	ld l, (ix-16)
	ld h, (ix-15)
	ld de, __LABEL391
	xor a
	call __STREQ
	or a
	jp z, __LABEL704
	ld (ix-6), 3
	jp __LABEL705
__LABEL704:
	ld l, (ix-16)
	ld h, (ix-15)
	ld de, __LABEL608
	xor a
	call __STREQ
	or a
	jp z, __LABEL706
	ld (ix-6), 0
	jp __LABEL707
__LABEL706:
	ld l, (ix-16)
	ld h, (ix-15)
	ld de, __LABEL396
	xor a
	call __STREQ
	or a
	jp z, __LABEL708
	ld (ix-6), 1
	jp __LABEL709
__LABEL708:
	ld l, (ix-16)
	ld h, (ix-15)
	ld de, __LABEL406
	xor a
	call __STREQ
	or a
	jp z, __LABEL711
	xor a
	jp _RunSnake__leave
__LABEL711:
__LABEL709:
__LABEL707:
__LABEL705:
__LABEL703:
	jp __LABEL700
__LABEL701:
	jp __LABEL660
__LABEL661:
	ld a, (ix-2)
	or a
	jp z, __LABEL712
	dec (ix-3)
	xor a
	push af
	ld l, (ix-20)
	ld h, (ix-19)
	inc hl
	ld a, (hl)
	push af
	ld l, (ix-20)
	ld h, (ix-19)
	ld a, (hl)
	push af
	call _Explode
	call _ShowCurtain
	ld (ix-2), 0
	jp __LABEL713
__LABEL712:
	inc (ix+5)
	ld a, 99
	cp (ix+5)
	jp nc, __LABEL715
	ld a, 1
	jp _RunSnake__leave
__LABEL715:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	or a
	jp nz, __LABEL717
	ld hl, 14
	push hl
	ld hl, _snakeLevelMusic
	push hl
	call _PlayMusic
__LABEL717:
	ld l, (ix-18)
	ld h, (ix-17)
	ld de, 10
	add hl, de
	ld (ix-18), l
	ld (ix-17), h
	ld l, (ix-18)
	ld h, (ix-17)
	push hl
	call _SetScore
	call _ShowCurtain
__LABEL713:
	jp __LABEL658
__LABEL659:
	xor a
_RunSnake__leave:
	ex af, af'
	exx
	ld l, (ix-16)
	ld h, (ix-15)
	call __MEM_FREE
	ld l, (ix-20)
	ld h, (ix-19)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_FindBottom:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL718
__LABEL721:
	ld (ix-2), 1
	jp __LABEL723
__LABEL726:
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL729
	ld a, (ix-1)
	ld (ix-3), a
	jp __LABEL725
__LABEL729:
	inc (ix-2)
__LABEL723:
	ld h, (ix-2)
	ld a, 10
	call __LTI8
	or a
	jp z, __LABEL726
__LABEL725:
	inc (ix-1)
__LABEL718:
	ld h, (ix-1)
	ld a, 17
	call __LTI8
	or a
	jp z, __LABEL721
	ld a, (ix-3)
_FindBottom__leave:
	ld sp, ix
	pop ix
	ret
_RunDestroyer:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -16
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 15
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1314
	ld bc, 1
	ldir
	ld a, (_playedDestroyerMusic)
	or a
	jp nz, __LABEL731
	ld a, 1
	ld (_playedDestroyerMusic), a
	ld hl, 68
	push hl
	ld hl, _destroyerIntroMusic
	push hl
	call _PlayMusic
__LABEL731:
	call _HideNextTitle
	ld l, (ix-14)
	ld h, (ix-13)
	push hl
	call _SetScore
__LABEL732:
	ld a, (ix-4)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL733
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	push hl
	push de
	ld de, 0
	ld hl, 5
	call __MUL32
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 50
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-10), a
	ld (ix-9), 0
	ld (ix-6), 5
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, (ix+5)
	push af
	call _SetLevel
	ld a, (ix-4)
	push af
	call _SetLifes
	call _UpdateScreen
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	push hl
	ld de, 0
	ld hl, 2
	call __MUL32
	ld bc, 0
	push bc
	ld bc, 60
	push bc
	call __SUB32
	ld a, l
	ld (ix-5), a
__LABEL734:
	ld a, (ix-3)
	sub 1
	sbc a, a
	push af
	ld a, (ix-10)
	ld h, a
	xor a
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1315
	ld a, h
__LABEL1315:
	or a
	jp z, __LABEL735
	ld a, (ix-9)
	or a
	jp z, __LABEL737
	xor a
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	call _UpdateScreen
__LABEL737:
	call _FindBottom
	ld (ix-2), a
	ld h, a
	ld a, 16
	call __LTI8
	or a
	jp z, __LABEL738
	ld (ix-3), 1
	jp __LABEL735
__LABEL738:
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _MoveRect
	ld (ix-1), 1
	jp __LABEL740
__LABEL743:
	ld a, 1
	push af
	ld a, 1
	push af
	call RND
	push bc
	push de
	push af
	ld a, 084h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	push af
	call _SetCell
	inc (ix-1)
__LABEL740:
	ld a, (ix-1)
	push af
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld bc, 0
	push bc
	ld bc, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	pop hl
	call __LTI8
	or a
	jp z, __LABEL743
	ld a, (ix-9)
	or a
	jp z, __LABEL746
	ld a, 1
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
__LABEL746:
	ld (ix-16), 0
	ld (ix-15), 0
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL747:
	ld a, (ix-5)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL748
	ld a, (ix-9)
	or a
	jp z, __LABEL750
	ld a, 1
	cp (ix-8)
	sbc a, a
	push af
	ld a, (ix-8)
	dec a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	ld h, (hl)
	or a
	jr z, __LABEL1316
	ld a, h
__LABEL1316:
	or a
	jp z, __LABEL751
	ld hl, 5279
	push hl
	ld hl, 1
	call __BEEPER
	ld (ix-9), 0
	xor a
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-8)
	dec a
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	ld l, (ix-14)
	ld h, (ix-13)
	inc hl
	ld (ix-14), l
	ld (ix-13), h
	ld l, (ix-14)
	ld h, (ix-13)
	push hl
	call _SetScore
	dec (ix-10)
	ld a, (ix-10)
	or a
	jp z, __LABEL748
	jp __LABEL752
__LABEL751:
	ld a, (ix-8)
	dec a
	jp nz, __LABEL755
	ld (ix-9), 0
	xor a
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	jp __LABEL756
__LABEL755:
	xor a
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	dec (ix-8)
	ld a, 1
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
__LABEL756:
__LABEL752:
	call _UpdateScreen
__LABEL750:
	ld l, (ix-16)
	ld h, (ix-15)
	ld de, 0
	call __EQ16
	push af
	ld l, (ix-16)
	ld h, (ix-15)
	push hl
	call _Frames
	ex de, hl
	pop hl
	or a
	sbc hl, de
	pop de
	sbc a, a
	or d
	jp z, __LABEL758
	ld hl, 57090
	call _MultiKeys
	or a
	jp z, __LABEL759
	ld a, (ix-6)
	sub 2
	jp nz, __LABEL761
	xor a
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	dec (ix-6)
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	inc a
	push af
	call _SetCell
	ld (ix-11), 1
	jp __LABEL762
__LABEL761:
	ld a, (ix-6)
	sub 10
	jp nz, __LABEL763
	xor a
	push af
	ld a, 255
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-6)
	dec a
	push af
	call _MoveRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	dec (ix-6)
	ld (ix-11), 1
	jp __LABEL764
__LABEL763:
	ld a, 2
	cp (ix-6)
	jp nc, __LABEL766
	xor a
	push af
	ld a, 255
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _MoveRect
	dec (ix-6)
	ld (ix-11), 1
__LABEL766:
__LABEL764:
__LABEL762:
	jp __LABEL760
__LABEL759:
	ld hl, 57089
	call _MultiKeys
	or a
	jp z, __LABEL767
	ld a, (ix-6)
	sub 9
	jp nz, __LABEL769
	xor a
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	inc (ix-6)
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	dec a
	push af
	call _SetCell
	ld (ix-11), 1
	jp __LABEL770
__LABEL769:
	ld a, (ix-6)
	dec a
	jp nz, __LABEL771
	xor a
	push af
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	push af
	call _MoveRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	inc (ix-6)
	ld (ix-11), 1
	jp __LABEL772
__LABEL771:
	ld a, (ix-6)
	cp 9
	jp nc, __LABEL774
	xor a
	push af
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _MoveRect
	inc (ix-6)
	ld (ix-11), 1
__LABEL774:
__LABEL772:
__LABEL770:
	jp __LABEL768
__LABEL767:
	ld hl, 48912
	call _MultiKeys
	or a
	jp z, __LABEL776
	xor a
	jp _RunDestroyer__leave
__LABEL776:
__LABEL768:
__LABEL760:
	ld hl, 32513
	call _MultiKeys
	or a
	jp z, __LABEL777
	ld a, (ix-9)
	sub 1
	sbc a, a
	push af
	ld a, (ix-12)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1317
	ld a, h
__LABEL1317:
	or a
	jp z, __LABEL780
	ld (ix-9), 1
	ld (ix-12), 1
	ld a, (ix-6)
	ld (ix-7), a
	ld (ix-8), 18
	ld a, 1
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	call _UpdateScreen
__LABEL780:
	jp __LABEL778
__LABEL777:
	ld a, (ix-12)
	or a
	jp z, __LABEL782
	ld (ix-12), 0
__LABEL782:
__LABEL778:
	ld a, (ix-11)
	or a
	jp z, __LABEL784
	ld (ix-11), 0
	call _Frames
	ld de, 4
	add hl, de
	ld (ix-16), l
	ld (ix-15), h
	call _UpdateScreen
__LABEL784:
__LABEL758:
	jp __LABEL747
__LABEL748:
	jp __LABEL734
__LABEL735:
	ld a, (ix-3)
	or a
	jp z, __LABEL785
	dec (ix-4)
	xor a
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _Explode
	call _ShowCurtain
	ld (ix-3), 0
	jp __LABEL786
__LABEL785:
	inc (ix+5)
	ld a, 99
	cp (ix+5)
	jp nc, __LABEL788
	ld a, 1
	jp _RunDestroyer__leave
__LABEL788:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	or a
	jp nz, __LABEL790
	ld hl, 54
	push hl
	ld hl, _destroyerLevelMusic
	push hl
	call _PlayMusic
__LABEL790:
	ld l, (ix-14)
	ld h, (ix-13)
	ld de, 10
	add hl, de
	ld (ix-14), l
	ld (ix-13), h
	ld l, (ix-14)
	ld h, (ix-13)
	push hl
	call _SetScore
	call _ShowCurtain
__LABEL786:
	jp __LABEL732
__LABEL733:
	xor a
_RunDestroyer__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_RunGhostHunter:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -10
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 9
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -2
	add hl, bc
	ex de, hl
	ld hl, __LABEL1318
	ld bc, 1
	ldir
	ld a, (_playedGhostMusic)
	or a
	jp nz, __LABEL792
	ld a, 1
	ld (_playedGhostMusic), a
	ld hl, 60
	push hl
	ld hl, _ghostIntroMusic
	push hl
	call _PlayMusic
__LABEL792:
	call _HideNextTitle
	ld l, (ix-10)
	ld h, (ix-9)
	push hl
	call _SetScore
__LABEL793:
	ld a, (ix-2)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL794
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	push hl
	ld b, d
	ld c, e
	ld de, 0
	ld hl, 5
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-6), a
	ld (ix-4), 0
	ld a, (ix+5)
	push af
	call _SetLevel
	ld a, (ix-2)
	push af
	call _SetLifes
	call _UpdateScreen
__LABEL795:
	ld a, (ix-1)
	sub 1
	sbc a, a
	push af
	ld a, (ix-6)
	ld h, a
	xor a
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1319
	ld a, h
__LABEL1319:
	or a
	jp z, __LABEL796
__LABEL797:
	ld a, (ix-4)
	or a
	jp nz, __LABEL798
	call INKEY
	ld de, __LABEL355
	ld a, 1
	call __STRNE
	or a
	jp z, __LABEL800
	call INKEY
	ld de, __LABEL406
	ld a, 1
	call __STREQ
	or a
	jp z, __LABEL802
	xor a
	jp _RunGhostHunter__leave
__LABEL802:
	ld (ix-1), 1
	jp __LABEL798
__LABEL800:
	call RND
	push bc
	push de
	push af
	ld a, 08Dh
	ld de, 0401Ch
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	push hl
	push de
	ld de, 0
	ld hl, 10
	call __MUL32
	call __LTI32
	or a
	jp z, __LABEL804
	call RND
	push bc
	push de
	push af
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	inc a
	call __U8TOFREG
	call __MULF
	call __FTOU32REG
	push de
	push hl
	ld de, 0
	ld hl, 2
	call __SWAP32
	call __DIVI32
	ld a, l
	ld (ix-3), a
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	push hl
	ld de, 0
	ld hl, 3
	call __MUL32
	ld bc, 0
	push bc
	ld bc, 47
	push bc
	call __SUB32
	ld a, l
	ld (ix-5), a
	ld a, (ix-3)
	push af
	call _DrawGhost
	ld (ix-4), 1
__LABEL804:
	jp __LABEL797
__LABEL798:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL805:
	ld a, (ix-4)
	push af
	ld a, (ix-5)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1320
	ld a, h
__LABEL1320:
	push af
	ld a, (ix-1)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1321
	ld a, h
__LABEL1321:
	or a
	jp z, __LABEL806
	call INKEY
	ld d, h
	ld e, l
	ld bc, -8
	call __PSTORE_STR2
	ld l, (ix-8)
	ld h, (ix-7)
	ld de, __LABEL386
	xor a
	call __STREQ
	push af
	ld a, (ix-3)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1322
	ld a, h
__LABEL1322:
	push af
	ld l, (ix-8)
	ld h, (ix-7)
	ld de, __LABEL391
	xor a
	call __STREQ
	push af
	ld a, (ix-3)
	dec a
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1323
	ld a, h
__LABEL1323:
	pop de
	or d
	push af
	ld l, (ix-8)
	ld h, (ix-7)
	ld de, __LABEL608
	xor a
	call __STREQ
	push af
	ld a, (ix-3)
	sub 2
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1324
	ld a, h
__LABEL1324:
	pop de
	or d
	push af
	ld l, (ix-8)
	ld h, (ix-7)
	ld de, __LABEL396
	xor a
	call __STREQ
	push af
	ld a, (ix-3)
	sub 3
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1325
	ld a, h
__LABEL1325:
	pop de
	or d
	push af
	ld l, (ix-8)
	ld h, (ix-7)
	ld de, __LABEL399
	xor a
	call __STREQ
	push af
	ld a, (ix-3)
	sub 4
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1326
	ld a, h
__LABEL1326:
	pop de
	or d
	jp z, __LABEL807
	ld (ix-4), 0
	dec (ix-6)
	ld l, (ix-10)
	ld h, (ix-9)
	inc hl
	ld (ix-10), l
	ld (ix-9), h
	ld a, (ix-3)
	push af
	call _KillGhost
	ld l, (ix-10)
	ld h, (ix-9)
	push hl
	call _SetScore
	call _UpdateScreen
__LABEL809:
	call INKEY
	ld de, __LABEL355
	ld a, 1
	call __STRNE
	or a
	jp nz, __LABEL809
	jp __LABEL808
__LABEL807:
	ld l, (ix-8)
	ld h, (ix-7)
	ld de, __LABEL406
	xor a
	call __STREQ
	or a
	jp z, __LABEL811
	xor a
	jp _RunGhostHunter__leave
__LABEL811:
	ld l, (ix-8)
	ld h, (ix-7)
	ld de, __LABEL355
	xor a
	call __STRNE
	or a
	jp z, __LABEL814
	ld (ix-1), 1
	ld (ix-4), 0
__LABEL814:
__LABEL808:
	jp __LABEL805
__LABEL806:
	ld a, (ix-4)
	or a
	jp z, __LABEL816
	ld (ix-1), 1
__LABEL816:
	ld (ix-4), 0
	jp __LABEL795
__LABEL796:
	ld a, (ix-1)
	or a
	jp z, __LABEL817
	dec (ix-2)
	call _ShowBigGhost
	call _ShowCurtain
	ld (ix-1), 0
	jp __LABEL818
__LABEL817:
	inc (ix+5)
	ld a, 99
	cp (ix+5)
	jp nc, __LABEL820
	ld a, 1
	jp _RunGhostHunter__leave
__LABEL820:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	or a
	jp nz, __LABEL822
	ld hl, 18
	push hl
	ld hl, _ghostLevelMusic
	push hl
	call _PlayMusic
__LABEL822:
	ld l, (ix-10)
	ld h, (ix-9)
	ld de, 10
	add hl, de
	ld (ix-10), l
	ld (ix-9), h
	ld l, (ix-10)
	ld h, (ix-9)
	push hl
	call _SetScore
	call _ShowCurtain
__LABEL818:
	jp __LABEL793
__LABEL794:
	xor a
_RunGhostHunter__leave:
	ex af, af'
	exx
	ld l, (ix-8)
	ld h, (ix-7)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_ShowBigGhost:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld (ix-1), 1
	jp __LABEL823
__LABEL826:
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _bigGhost
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (ix-3), l
	ld (ix-2), h
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 512
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL829
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 1
	push af
	call _SetCell
__LABEL829:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 256
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL831
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 2
	push af
	call _SetCell
__LABEL831:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 128
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL833
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 3
	push af
	call _SetCell
__LABEL833:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 64
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL835
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL835:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 32
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL837
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 5
	push af
	call _SetCell
__LABEL837:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 16
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL839
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 6
	push af
	call _SetCell
__LABEL839:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 8
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL841
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 7
	push af
	call _SetCell
__LABEL841:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 4
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL843
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 8
	push af
	call _SetCell
__LABEL843:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 2
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL845
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL845:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 1
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL847
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	ld a, 10
	push af
	call _SetCell
__LABEL847:
	inc (ix-1)
__LABEL823:
	ld a, 20
	cp (ix-1)
	jp nc, __LABEL826
	call _UpdateScreen
	ld hl, 1
	call __PAUSE
	ld hl, 66
	push hl
	ld hl, _ghostScarySound
	push hl
	call _PlayMusic
	ld hl, 66
	push hl
	ld hl, _ghostScarySound
	push hl
	call _PlayMusic
__LABEL848:
	call INKEY
	ld de, __LABEL355
	ld a, 1
	call __STRNE
	or a
	jp nz, __LABEL848
	ld hl, 80
	call __PAUSE
_ShowBigGhost__leave:
	ld sp, ix
	pop ix
	ret
_DrawGhost:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld a, (ix+5)
	or a
	jp nz, __LABEL850
	ld (ix-1), 1
	ld (ix-2), 7
	jp __LABEL851
__LABEL850:
	ld a, (ix+5)
	dec a
	jp nz, __LABEL852
	ld (ix-1), 6
	ld (ix-2), 7
	jp __LABEL853
__LABEL852:
	ld a, (ix+5)
	sub 2
	jp nz, __LABEL854
	ld (ix-1), 3
	ld (ix-2), 1
	jp __LABEL855
__LABEL854:
	ld a, (ix+5)
	sub 3
	jp nz, __LABEL856
	ld (ix-1), 4
	ld (ix-2), 15
	jp __LABEL857
__LABEL856:
	ld (ix-1), 4
	ld (ix-2), 7
__LABEL857:
__LABEL855:
__LABEL853:
__LABEL851:
	ld a, 1
	push af
	ld a, (ix-2)
	add a, 5
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	add a, 4
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	add a, 4
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-2)
	inc a
	push af
	ld a, (ix-1)
	inc a
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-2)
	inc a
	push af
	ld a, (ix-1)
	add a, 3
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-2)
	add a, 3
	push af
	ld a, (ix-2)
	add a, 3
	push af
	ld a, (ix-1)
	add a, 3
	push af
	ld a, (ix-1)
	inc a
	push af
	call _FillRect
	xor a
	push af
	ld a, (ix-2)
	add a, 5
	push af
	ld a, (ix-1)
	inc a
	push af
	call _SetCell
	xor a
	push af
	ld a, (ix-2)
	add a, 5
	push af
	ld a, (ix-1)
	add a, 3
	push af
	call _SetCell
_DrawGhost__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_KillGhost:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld a, (ix+5)
	or a
	jp nz, __LABEL858
	ld (ix-1), 1
	ld (ix-2), 7
	jp __LABEL859
__LABEL858:
	ld a, (ix+5)
	dec a
	jp nz, __LABEL860
	ld (ix-1), 6
	ld (ix-2), 7
	jp __LABEL861
__LABEL860:
	ld a, (ix+5)
	sub 2
	jp nz, __LABEL862
	ld (ix-1), 3
	ld (ix-2), 1
	jp __LABEL863
__LABEL862:
	ld a, (ix+5)
	sub 3
	jp nz, __LABEL864
	ld (ix-1), 4
	ld (ix-2), 15
	jp __LABEL865
__LABEL864:
	ld (ix-1), 4
	ld (ix-2), 7
__LABEL865:
__LABEL863:
__LABEL861:
__LABEL859:
	ld (ix-3), 0
	jp __LABEL866
__LABEL869:
	xor a
	push af
	ld a, (ix-2)
	add a, (ix-3)
	push af
	ld a, (ix-2)
	add a, (ix-3)
	push af
	ld a, (ix-1)
	add a, 4
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	call _UpdateScreen
	ld hl, 233
	push hl
	ld hl, 7
	call __BEEPER
	inc (ix-3)
__LABEL866:
	ld a, 5
	cp (ix-3)
	jp nc, __LABEL869
_KillGhost__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_FindConstructorBottom:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld a, (ix+5)
	ld (ix-1), a
	jp __LABEL871
__LABEL874:
	ld (ix-2), 1
	jp __LABEL876
__LABEL879:
	ld a, (ix-1)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld a, (ix-2)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp z, __LABEL882
	ld a, (ix-1)
	ld (ix-3), a
	jp __LABEL878
__LABEL882:
	inc (ix-2)
__LABEL876:
	ld h, (ix-2)
	ld a, 10
	call __LTI8
	or a
	jp z, __LABEL879
__LABEL878:
	inc (ix-1)
__LABEL871:
	ld h, (ix-1)
	ld a, 18
	call __LTI8
	or a
	jp z, __LABEL874
	ld a, (ix-3)
_FindConstructorBottom__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_CheckLine:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL883
__LABEL886:
	ld a, (ix+5)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-1)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	ld a, (hl)
	or a
	jp nz, __LABEL889
	xor a
	jp _CheckLine__leave
__LABEL889:
	inc (ix-1)
__LABEL883:
	ld a, 10
	cp (ix-1)
	jp nc, __LABEL886
	xor a
	push af
	ld a, (ix+5)
	push af
	ld a, (ix+5)
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, (ix+5)
	inc a
	push af
	call _FindConstructorBottom
	ld (ix-1), a
	ld h, a
	xor a
	cp h
	jp nc, __LABEL891
	ld a, 255
	push af
	xor a
	push af
	ld a, (ix-1)
	push af
	ld a, (ix+5)
	inc a
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _MoveRect
	ld hl, 5279
	push hl
	ld hl, 3
	call __BEEPER
	ld hl, 497
	push hl
	ld hl, 41
	call __BEEPER
__LABEL891:
	ld a, 1
_CheckLine__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_RunConstructor:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -16
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 15
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1327
	ld bc, 1
	ldir
	ld a, (_playedConstructorMusic)
	or a
	jp nz, __LABEL893
	ld a, 1
	ld (_playedConstructorMusic), a
	ld hl, 88
	push hl
	ld hl, _constructorIntroMusic
	push hl
	call _PlayMusic
__LABEL893:
	call _HideNextTitle
	ld l, (ix-14)
	ld h, (ix-13)
	push hl
	call _SetScore
__LABEL894:
	ld a, (ix-4)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL895
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 5
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-11), a
	ld (ix-9), 0
	ld (ix-6), 5
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, (ix+5)
	push af
	call _SetLevel
	ld a, (ix-4)
	push af
	call _SetLifes
	call _UpdateScreen
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	push hl
	ld de, 0
	ld hl, 10
	call __MUL32
	ld bc, 0
	push bc
	ld bc, 150
	push bc
	call __SUB32
	ld a, l
	ld (ix-5), a
__LABEL896:
	ld a, (ix-3)
	sub 1
	sbc a, a
	push af
	ld a, (ix-11)
	ld h, a
	xor a
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1328
	ld a, h
__LABEL1328:
	or a
	jp z, __LABEL897
	ld a, (ix-9)
	or a
	jp z, __LABEL899
	xor a
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	call _UpdateScreen
__LABEL899:
	ld a, 1
	push af
	call _FindConstructorBottom
	ld (ix-2), a
	ld h, a
	ld a, 16
	call __LTI8
	or a
	jp z, __LABEL900
	ld (ix-3), 1
	jp __LABEL897
__LABEL900:
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-2)
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _MoveRect
	ld (ix-1), 1
	jp __LABEL902
__LABEL905:
	ld a, 1
	push af
	ld a, 1
	push af
	call RND
	push bc
	push de
	push af
	ld a, 084h
	ld de, 00020h
	ld bc, 00000h
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	push af
	call _SetCell
	inc (ix-1)
__LABEL902:
	ld a, (ix-1)
	push af
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld bc, 0
	push bc
	ld bc, 10
	push bc
	call __SUB32
	ld a, l
	pop hl
	call __LTI8
	or a
	jp z, __LABEL905
	ld a, (ix-9)
	or a
	jp z, __LABEL908
	ld a, 1
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
__LABEL908:
	ld (ix-16), 0
	ld (ix-15), 0
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL909:
	ld a, (ix-5)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL910
	ld a, (ix-9)
	or a
	jp z, __LABEL912
	ld a, (ix-8)
	dec a
	sub 1
	sbc a, a
	push af
	ld a, (ix-8)
	dec a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld a, (ix-7)
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _screenCells
	call __ARRAY
	pop af
	or (hl)
	jp z, __LABEL913
	ld (ix-9), 0
	ld a, (ix-8)
	push af
	call _CheckLine
	or a
	jp z, __LABEL916
	ld l, (ix-14)
	ld h, (ix-13)
	inc hl
	ld (ix-14), l
	ld (ix-13), h
	ld l, (ix-14)
	ld h, (ix-13)
	push hl
	call _SetScore
	dec (ix-11)
	ld a, (ix-11)
	or a
	jp z, __LABEL910
__LABEL916:
	jp __LABEL914
__LABEL913:
	xor a
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	dec (ix-8)
	ld a, 1
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
__LABEL914:
	call _UpdateScreen
__LABEL912:
	ld l, (ix-16)
	ld h, (ix-15)
	ld de, 0
	call __EQ16
	push af
	ld l, (ix-16)
	ld h, (ix-15)
	push hl
	call _Frames
	ex de, hl
	pop hl
	or a
	sbc hl, de
	pop de
	sbc a, a
	or d
	jp z, __LABEL920
	ld hl, 57090
	call _MultiKeys
	or a
	jp z, __LABEL921
	ld a, (ix-6)
	sub 2
	jp nz, __LABEL923
	xor a
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	dec (ix-6)
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	inc a
	push af
	call _SetCell
	ld (ix-12), 1
	jp __LABEL924
__LABEL923:
	ld a, (ix-6)
	sub 10
	jp nz, __LABEL925
	xor a
	push af
	ld a, 255
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	ld a, (ix-6)
	dec a
	push af
	call _MoveRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	dec (ix-6)
	ld (ix-12), 1
	jp __LABEL926
__LABEL925:
	ld a, 2
	cp (ix-6)
	jp nc, __LABEL928
	xor a
	push af
	ld a, 255
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _MoveRect
	dec (ix-6)
	ld (ix-12), 1
__LABEL928:
__LABEL926:
__LABEL924:
	jp __LABEL922
__LABEL921:
	ld hl, 57089
	call _MultiKeys
	or a
	jp z, __LABEL929
	ld a, (ix-6)
	sub 9
	jp nz, __LABEL931
	xor a
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	inc (ix-6)
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	dec a
	push af
	call _SetCell
	ld (ix-12), 1
	jp __LABEL932
__LABEL931:
	ld a, (ix-6)
	dec a
	jp nz, __LABEL933
	xor a
	push af
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	push af
	call _MoveRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	inc (ix-6)
	ld (ix-12), 1
	jp __LABEL934
__LABEL933:
	ld a, (ix-6)
	cp 9
	jp nc, __LABEL936
	xor a
	push af
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _MoveRect
	inc (ix-6)
	ld (ix-12), 1
__LABEL936:
__LABEL934:
__LABEL932:
	jp __LABEL930
__LABEL929:
	ld hl, 48912
	call _MultiKeys
	or a
	jp z, __LABEL938
	xor a
	jp _RunConstructor__leave
__LABEL938:
__LABEL930:
__LABEL922:
	ld hl, 32513
	call _MultiKeys
	or a
	jp z, __LABEL939
	ld a, (ix-9)
	sub 1
	sbc a, a
	push af
	ld a, (ix-10)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1329
	ld a, h
__LABEL1329:
	or a
	jp z, __LABEL942
	ld (ix-9), 1
	ld (ix-10), 1
	ld a, (ix-6)
	ld (ix-7), a
	ld (ix-8), 18
	ld a, 1
	push af
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	push af
	call _SetCell
	call _UpdateScreen
__LABEL942:
	jp __LABEL940
__LABEL939:
	ld a, (ix-10)
	or a
	jp z, __LABEL944
	ld (ix-10), 0
__LABEL944:
__LABEL940:
	ld a, (ix-12)
	or a
	jp z, __LABEL946
	ld (ix-12), 0
	call _Frames
	ld de, 4
	add hl, de
	ld (ix-16), l
	ld (ix-15), h
	call _UpdateScreen
__LABEL946:
__LABEL920:
	jp __LABEL909
__LABEL910:
	jp __LABEL896
__LABEL897:
	ld a, (ix-3)
	or a
	jp z, __LABEL947
	dec (ix-4)
	xor a
	push af
	ld a, 19
	push af
	ld a, (ix-6)
	push af
	call _Explode
	call _ShowCurtain
	ld (ix-3), 0
	jp __LABEL948
__LABEL947:
	inc (ix+5)
	ld a, 99
	cp (ix+5)
	jp nc, __LABEL950
	ld a, 1
	jp _RunConstructor__leave
__LABEL950:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	or a
	jp nz, __LABEL952
	ld hl, 86
	push hl
	ld hl, _constructorLevelMusic
	push hl
	call _PlayMusic
__LABEL952:
	ld l, (ix-14)
	ld h, (ix-13)
	ld de, 10
	add hl, de
	ld (ix-14), l
	ld (ix-13), h
	ld l, (ix-14)
	ld h, (ix-13)
	push hl
	call _SetScore
	call _ShowCurtain
__LABEL948:
	jp __LABEL894
__LABEL895:
	xor a
_RunConstructor__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_ShowFigure:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+9)
	and 1
	jp z, __LABEL953
	ld a, 1
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	call _SetCell
	jp __LABEL954
__LABEL953:
	xor a
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	call _SetCell
__LABEL954:
	ld a, (ix+9)
	and 2
	jp z, __LABEL955
	ld a, 1
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	inc a
	push af
	call _SetCell
	jp __LABEL956
__LABEL955:
	xor a
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	inc a
	push af
	call _SetCell
__LABEL956:
	ld a, (ix+9)
	and 4
	jp z, __LABEL957
	ld a, 1
	push af
	ld a, (ix+7)
	inc a
	push af
	ld a, (ix+5)
	push af
	call _SetCell
	jp __LABEL958
__LABEL957:
	xor a
	push af
	ld a, (ix+7)
	inc a
	push af
	ld a, (ix+5)
	push af
	call _SetCell
__LABEL958:
	ld a, (ix+9)
	and 8
	jp z, __LABEL959
	ld a, 1
	push af
	ld a, (ix+7)
	inc a
	push af
	ld a, (ix+5)
	inc a
	push af
	call _SetCell
	jp __LABEL960
__LABEL959:
	xor a
	push af
	ld a, (ix+7)
	inc a
	push af
	ld a, (ix+5)
	inc a
	push af
	call _SetCell
__LABEL960:
_ShowFigure__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_RunMatch:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -19
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 18
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL1330
	ld bc, 1
	ldir
	ld hl, -19
	ld de, __LABEL1331
	ld bc, 3
	call __ALLOC_LOCAL_ARRAY
	push ix
	pop hl
	ld bc, -10
	add hl, bc
	ex de, hl
	ld hl, __LABEL1332
	ld bc, 1
	ldir
	ld a, (_playedMatchMusic)
	or a
	jp nz, __LABEL962
	ld a, 1
	ld (_playedMatchMusic), a
	ld hl, 122
	push hl
	ld hl, _matchIntroMusic
	push hl
	call _PlayMusic
__LABEL962:
	call _HideNextTitle
	ld l, (ix-15)
	ld h, (ix-14)
	push hl
	call _SetScore
__LABEL963:
	ld a, (ix-3)
	ld h, a
	xor a
	cp h
	jp nc, __LABEL964
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 14
	push af
	ld a, 13
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, (ix-3)
	push af
	call _SetLifes
	ld a, (ix+5)
	push af
	call _SetLevel
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	ld a, l
	ld (ix-1), a
	add a, 10
	ld (ix-11), a
	ld a, (ix-1)
	add a, 6
	ld (ix-9), a
	ld a, (ix+5)
	ld h, 10
	call __DIVU8_FAST
	ld l, a
	ld h, 0
	ld e, h
	ld d, h
	push de
	push hl
	ld de, 0
	ld hl, 5
	call __MUL32
	ld bc, 0
	push bc
	ld bc, 100
	push bc
	call __SUB32
	ld a, l
	ld (ix-4), a
	ld l, (ix-17)
	ld h, (ix-16)
	ld a, 1
	ld (hl), a
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld a, 1
	ld (hl), a
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	inc hl
	ld a, 1
	ld (hl), a
	call RND
	push bc
	push de
	push af
	ld a, (ix-9)
	call __U8TOFREG
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-5), a
	call RND
	push bc
	push de
	push af
	ld a, (ix-9)
	call __U8TOFREG
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-6), a
	call RND
	push bc
	push de
	push af
	ld a, (ix-9)
	call __U8TOFREG
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-7), a
	ld l, (ix-17)
	ld h, (ix-16)
	ld a, (hl)
	push af
	ld a, 16
	push af
	ld a, 2
	push af
	call _ShowFigure
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld a, (hl)
	push af
	ld a, 16
	push af
	ld a, 5
	push af
	call _ShowFigure
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	inc hl
	ld a, (hl)
	push af
	ld a, 16
	push af
	ld a, 8
	push af
	call _ShowFigure
	ld a, (ix-10)
	dec a
	ld h, 3
	call __MUL8_FAST
	add a, 2
	ld (ix-1), a
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 19
	push af
	ld a, (ix-1)
	inc a
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	ld (ix-8), 0
__LABEL965:
	ld a, (ix-2)
	sub 1
	sbc a, a
	push af
	ld a, (ix-11)
	ld h, a
	xor a
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL1333
	ld a, h
__LABEL1333:
	or a
	jp z, __LABEL966
	ld a, (ix-8)
	sub 10
	jp nz, __LABEL967
	ld l, (ix-17)
	ld h, (ix-16)
	ld a, (hl)
	sub (ix-5)
	ld d, a
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	ld a, (hl)
	sub (ix-6)
	or d
	ld d, a
	ld l, (ix-17)
	ld h, (ix-16)
	inc hl
	inc hl
	ld a, (hl)
	sub (ix-7)
	or d
	jp z, __LABEL969
	ld (ix-2), 1
	jp __LABEL966
__LABEL969:
	ld hl, 321
	push hl
	ld hl, 5
	call __BEEPER
	ld hl, 302
	push hl
	ld hl, 6
	call __BEEPER
	ld hl, 283
	push hl
	ld hl, 6
	call __BEEPER
	ld hl, 265
	push hl
	ld hl, 6
	call __BEEPER
	ld hl, 249
	push hl
	ld hl, 7
	call __BEEPER
	ld hl, 233
	push hl
	ld hl, 7
	call __BEEPER
	ld l, (ix-15)
	ld h, (ix-14)
	inc hl
	ld (ix-15), l
	ld (ix-14), h
	ld l, (ix-15)
	ld h, (ix-14)
	push hl
	call _SetScore
	dec (ix-11)
	ld a, (ix-11)
	cp 1
	jp c, __LABEL966
	xor a
	push af
	ld a, (ix-8)
	inc a
	push af
	ld a, (ix-8)
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld (ix-8), 0
	call RND
	push bc
	push de
	push af
	ld a, (ix-9)
	call __U8TOFREG
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-5), a
	call RND
	push bc
	push de
	push af
	ld a, (ix-9)
	call __U8TOFREG
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-6), a
	call RND
	push bc
	push de
	push af
	ld a, (ix-9)
	call __U8TOFREG
	call __MULF
	call __FTOU32REG
	push de
	ld b, h
	ld c, l
	ld de, 0
	ld hl, 1
	add hl, bc
	pop bc
	ex de, hl
	adc hl, bc
	ex de, hl
	ld a, l
	ld (ix-7), a
	jp __LABEL968
__LABEL967:
	ld a, (ix-8)
	or a
	jp z, __LABEL974
	xor a
	push af
	ld a, (ix-8)
	inc a
	push af
	ld a, (ix-8)
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL974:
__LABEL968:
	inc (ix-8)
	ld a, (ix-5)
	push af
	ld a, (ix-8)
	push af
	ld a, 2
	push af
	call _ShowFigure
	ld a, (ix-6)
	push af
	ld a, (ix-8)
	push af
	ld a, 5
	push af
	call _ShowFigure
	ld a, (ix-7)
	push af
	ld a, (ix-8)
	push af
	ld a, 8
	push af
	call _ShowFigure
	ld (ix-13), 0
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL975:
	ld a, (ix-4)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	pop de
	or a
	sbc hl, de
	jp nc, __LABEL976
	ld a, (ix-13)
	sub 1
	sbc a, a
	push af
	ld a, (ix-13)
	ld l, a
	ld h, 0
	push hl
	call _Frames
	ex de, hl
	pop hl
	or a
	sbc hl, de
	pop de
	sbc a, a
	or d
	jp z, __LABEL978
	ld hl, 64257
	call _MultiKeys
	or a
	jp z, __LABEL979
	ld a, (ix-10)
	dec a
	ld h, 3
	call __MUL8_FAST
	add a, 2
	ld (ix-1), a
	xor a
	push af
	ld a, 17
	push af
	ld a, 16
	push af
	ld a, (ix-1)
	inc a
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	ld a, (hl)
	inc a
	push af
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	ld a, (ix-9)
	cp (hl)
	jp nc, __LABEL982
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	ld (hl), 1
__LABEL982:
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 16
	push af
	ld a, (ix-1)
	push af
	call _ShowFigure
	ld (ix-12), 1
	jp __LABEL980
__LABEL979:
	ld hl, 64769
	call _MultiKeys
	or a
	jp z, __LABEL983
	ld a, (ix-10)
	dec a
	ld h, 3
	call __MUL8_FAST
	add a, 2
	ld (ix-1), a
	xor a
	push af
	ld a, 17
	push af
	ld a, 16
	push af
	ld a, (ix-1)
	inc a
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	ld a, (hl)
	dec a
	push af
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	ld a, (hl)
	cp 1
	jp nc, __LABEL986
	ld a, (ix-9)
	push af
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	pop af
	ld (hl), a
__LABEL986:
	ld a, (ix-10)
	ld l, a
	ld h, 0
	dec hl
	push hl
	push ix
	pop hl
	ld de, -19
	add hl, de
	call __ARRAY
	ld a, (hl)
	push af
	ld a, 16
	push af
	ld a, (ix-1)
	push af
	call _ShowFigure
	ld (ix-12), 1
	jp __LABEL984
__LABEL983:
	ld hl, 57090
	call _MultiKeys
	or a
	jp z, __LABEL987
	ld a, (ix-10)
	dec a
	ld h, 3
	call __MUL8_FAST
	add a, 2
	ld (ix-1), a
	xor a
	push af
	ld a, 19
	push af
	ld a, 19
	push af
	ld a, (ix-1)
	inc a
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	dec (ix-10)
	ld a, (ix-10)
	cp 1
	jp nc, __LABEL990
	ld (ix-10), 3
__LABEL990:
	ld a, (ix-10)
	dec a
	ld h, 3
	call __MUL8_FAST
	add a, 2
	ld (ix-1), a
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 19
	push af
	ld a, (ix-1)
	inc a
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	ld (ix-12), 1
	jp __LABEL988
__LABEL987:
	ld hl, 57089
	call _MultiKeys
	or a
	jp z, __LABEL991
	ld a, (ix-10)
	dec a
	ld h, 3
	call __MUL8_FAST
	add a, 2
	ld (ix-1), a
	xor a
	push af
	ld a, 19
	push af
	ld a, 19
	push af
	ld a, (ix-1)
	inc a
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	inc (ix-10)
	ld a, 3
	cp (ix-10)
	jp nc, __LABEL994
	ld (ix-10), 1
__LABEL994:
	ld a, (ix-10)
	dec a
	ld h, 3
	call __MUL8_FAST
	add a, 2
	ld (ix-1), a
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 19
	push af
	ld a, (ix-1)
	inc a
	push af
	ld a, (ix-1)
	push af
	call _FillRect
	ld (ix-12), 1
	jp __LABEL992
__LABEL991:
	ld hl, 48912
	call _MultiKeys
	or a
	jp z, __LABEL996
	xor a
	jp _RunMatch__leave
__LABEL996:
__LABEL992:
__LABEL988:
__LABEL984:
__LABEL980:
	ld a, (ix-12)
	or a
	jp z, __LABEL998
	ld (ix-12), 0
	call _Frames
	ld de, 10
	add hl, de
	ld a, l
	ld (ix-13), a
	call _UpdateScreen
__LABEL998:
__LABEL978:
	ld hl, 32513
	call _MultiKeys
	or a
	jp z, __LABEL975
__LABEL976:
	jp __LABEL965
__LABEL966:
	ld a, (ix-2)
	or a
	jp z, __LABEL1001
	dec (ix-3)
	ld a, 1
	push af
	ld a, 16
	push af
	ld a, 2
	push af
	call _Explode
	ld a, 1
	push af
	ld a, 16
	push af
	ld a, 5
	push af
	call _Explode
	ld a, 1
	push af
	ld a, 16
	push af
	ld a, 8
	push af
	call _Explode
	call _ShowCurtain
	ld (ix-2), 0
	jp __LABEL1002
__LABEL1001:
	inc (ix+5)
	ld a, 99
	cp (ix+5)
	jp nc, __LABEL1004
	ld a, 1
	jp _RunMatch__leave
__LABEL1004:
	ld a, (ix+5)
	ld h, 10
	call __MODU8_FAST
	or a
	jp nz, __LABEL1006
	ld hl, 86
	push hl
	ld hl, _matchLevelMusic
	push hl
	call _PlayMusic
__LABEL1006:
	ld l, (ix-15)
	ld h, (ix-14)
	ld de, 10
	add hl, de
	ld (ix-15), l
	ld (ix-14), h
	ld l, (ix-15)
	ld h, (ix-14)
	push hl
	call _SetScore
	call _ShowCurtain
__LABEL1002:
	jp __LABEL963
__LABEL964:
	xor a
_RunMatch__leave:
	ex af, af'
	exx
	ld l, (ix-17)
	ld h, (ix-16)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_ShowChar:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -8
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 7
	ld d, h
	ld e, l
	inc de
	ldir
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	ld hl, 0
	push hl
	ld hl, 0
	push hl
	xor a
	call __STRSLICE
	ld a, 1
	call __ASC
	ld l, a
	ld h, 0
	ld (ix-8), l
	ld (ix-7), h
	ld l, (ix-8)
	ld h, (ix-7)
	add hl, hl
	add hl, hl
	add hl, hl
	ex de, hl
	ld hl, (_chars)
	add hl, de
	ld (ix-8), l
	ld (ix-7), h
	xor a
	push af
	ld a, 8
	push af
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 2
	push af
	call _FillRect
	ld a, (ix+7)
	cp 5
	jp nc, __LABEL1007
	ld a, (ix+7)
	add a, a
	ld h, a
	ld a, 10
	sub h
	ld (ix-1), a
	ld a, (ix+7)
	ld (ix-2), a
	ld (ix-5), 1
	jp __LABEL1009
__LABEL1012:
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld a, (ix-5)
	dec a
	ld l, a
	ld h, 0
	ex de, hl
	pop hl
	add hl, de
	ld a, (hl)
	ld (ix-6), a
	ld a, (ix-2)
	ld (ix-4), a
	jp __LABEL1014
__LABEL1017:
	ld a, 8
	sub (ix-4)
	ld h, 1
	or a
	ld b, a
	ld a, h
	jr z, __LABEL1335
__LABEL1334:
	add a, a
	djnz __LABEL1334
__LABEL1335:
	ld (ix-3), a
	ld a, (ix-6)
	and (ix-3)
	jp z, __LABEL1020
	ld a, 1
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-4)
	inc a
	push af
	call _SetCell
__LABEL1020:
	inc (ix-4)
__LABEL1014:
	ld h, (ix-4)
	ld a, (ix-2)
	add a, (ix-1)
	dec a
	cp h
	jp nc, __LABEL1017
	inc (ix-5)
__LABEL1009:
	ld a, 8
	cp (ix-5)
	jp nc, __LABEL1012
	jp __LABEL1008
__LABEL1007:
	ld a, 5
	cp (ix+7)
	jp nc, __LABEL1022
	ld a, 10
	sub (ix+7)
	ld (ix+7), a
	add a, a
	ld h, a
	ld a, 10
	sub h
	ld (ix-1), a
	ld a, (ix+7)
	ld (ix-2), a
	ld (ix-5), 1
	jp __LABEL1023
__LABEL1026:
	ld l, (ix-8)
	ld h, (ix-7)
	push hl
	ld a, (ix-5)
	dec a
	ld l, a
	ld h, 0
	ex de, hl
	pop hl
	add hl, de
	ld a, (hl)
	ld (ix-6), a
	ld a, (ix-2)
	add a, (ix-1)
	dec a
	ld (ix-4), a
	jp __LABEL1028
__LABEL1031:
	ld a, (ix-4)
	dec a
	ld h, 1
	or a
	ld b, a
	ld a, h
	jr z, __LABEL1337
__LABEL1336:
	add a, a
	djnz __LABEL1336
__LABEL1337:
	ld (ix-3), a
	ld a, (ix-6)
	and (ix-3)
	jp z, __LABEL1034
	ld a, 1
	push af
	ld a, (ix-5)
	push af
	ld a, (ix-4)
	inc a
	push af
	call _SetCell
__LABEL1034:
	dec (ix-4)
__LABEL1028:
	ld a, (ix-4)
	cp (ix-2)
	jp nc, __LABEL1031
	inc (ix-5)
__LABEL1023:
	ld a, 8
	cp (ix-5)
	jp nc, __LABEL1026
__LABEL1022:
__LABEL1008:
	ld hl, 2
	call __PAUSE
_ShowChar__leave:
	ex af, af'
	exx
	ld l, (ix+4)
	ld h, (ix+5)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_ScanKeyb:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	call INKEY
	ld d, h
	ld e, l
	ld bc, -3
	call __PSTORE_STR2
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, __LABEL355
	xor a
	call __STRNE
	or a
	jp z, __LABEL1036
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, __LABEL608
	xor a
	call __STREQ
	or a
	jp z, __LABEL1037
	ld hl, _level
	inc (hl)
	ld a, 99
	ld hl, (_level - 1)
	call __LTI8
	or a
	jp z, __LABEL1040
	xor a
	ld (_level), a
__LABEL1040:
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
	jp __LABEL1038
__LABEL1037:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, __LABEL396
	xor a
	call __STREQ
	or a
	jp z, __LABEL1041
	ld hl, _level
	dec (hl)
	ld h, 0
	ld a, (_level)
	call __LTI8
	or a
	jp z, __LABEL1044
	ld a, 99
	ld (_level), a
__LABEL1044:
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
	jp __LABEL1042
__LABEL1041:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, __LABEL386
	xor a
	call __STREQ
	or a
	jp z, __LABEL1045
	ld (ix-1), 2
	jp __LABEL1046
__LABEL1045:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, __LABEL391
	xor a
	call __STREQ
	or a
	jp z, __LABEL1047
	ld (ix-1), 1
	jp __LABEL1048
__LABEL1047:
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, __LABEL399
	xor a
	call __STREQ
	or a
	jp z, __LABEL1050
	ld (ix-1), 3
__LABEL1050:
__LABEL1048:
__LABEL1046:
__LABEL1042:
__LABEL1038:
__LABEL1036:
	ld a, (ix-1)
_ScanKeyb__leave:
	ex af, af'
	exx
	ld l, (ix-3)
	ld h, (ix-2)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	ret
_ShowTetris:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1338
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -5
	add hl, bc
	ex de, hl
	ld hl, __LABEL1339
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 19
	push af
	ld a, 4
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 19
	push af
	ld a, 10
	push af
	ld a, 6
	push af
	call _FillRect
__LABEL1051:
	ld a, (ix-1)
	or a
	jp nz, __LABEL1052
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 9
	push af
	ld a, 6
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, (ix-5)
	push af
	ld hl, __LABEL1053
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1055
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1055:
	call _UpdateScreen
	ld (ix-2), 9
	jp __LABEL1056
__LABEL1059:
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-2)
	inc a
	push af
	ld a, (ix-2)
	push af
	ld a, 6
	push af
	ld a, 4
	push af
	call _MoveRect
	ld a, (ix-5)
	push af
	ld hl, __LABEL1053
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1062
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1062:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1063:
	call _Frames
	ld de, 30
	or a
	sbc hl, de
	jp nc, __LABEL1064
	ld a, (ix-5)
	push af
	ld hl, __LABEL1053
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1066
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1066:
	call _UpdateScreen
	call _ScanKeyb
	ld (ix-3), a
	or a
	jp z, __LABEL1068
	ld a, (ix-3)
	jp _ShowTetris__leave
__LABEL1068:
	jp __LABEL1063
__LABEL1064:
	inc (ix-2)
__LABEL1056:
	ld a, 16
	cp (ix-2)
	jp nc, __LABEL1059
	xor a
	push af
	ld a, 18
	push af
	ld a, 17
	push af
	ld a, 6
	push af
	ld a, 4
	push af
	call _FillRect
	jp __LABEL1051
__LABEL1052:
_ShowTetris__leave:
	ld sp, ix
	pop ix
	ret
_ShowArkanoid:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -7
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 6
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1340
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -5
	add hl, bc
	ex de, hl
	ld hl, __LABEL1341
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 11
	push af
	ld a, 9
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL1069:
	ld a, (ix-1)
	or a
	jp nz, __LABEL1070
	ld (ix-6), 2
	ld (ix-7), 19
	ld a, 1
	push af
	ld a, (ix-7)
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	ld a, (ix-5)
	push af
	ld hl, __LABEL1071
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1073
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1073:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1074:
	call _Frames
	ld de, 30
	or a
	sbc hl, de
	jp c, __LABEL1074
	ld (ix-2), 9
	jp __LABEL1076
__LABEL1079:
	xor a
	push af
	ld a, (ix-7)
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	inc (ix-6)
	dec (ix-7)
	ld a, 1
	push af
	ld a, (ix-7)
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	ld a, (ix-5)
	push af
	ld hl, __LABEL1071
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1082
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1082:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1083:
	call _Frames
	ld de, 30
	or a
	sbc hl, de
	jp nc, __LABEL1084
	ld a, (ix-5)
	push af
	ld hl, __LABEL1071
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1086
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1086:
	call _UpdateScreen
	call _ScanKeyb
	ld (ix-3), a
	or a
	jp z, __LABEL1088
	ld a, (ix-3)
	jp _ShowArkanoid__leave
__LABEL1088:
	jp __LABEL1083
__LABEL1084:
	inc (ix-2)
__LABEL1076:
	ld a, 15
	cp (ix-2)
	jp nc, __LABEL1079
	xor a
	push af
	ld a, (ix-7)
	push af
	ld a, (ix-6)
	push af
	call _SetCell
	xor a
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, (ix-6)
	inc a
	push af
	ld a, (ix-6)
	dec a
	push af
	call _FillRect
	jp __LABEL1069
__LABEL1070:
_ShowArkanoid__leave:
	ld sp, ix
	pop ix
	ret
_ShowRacing:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1342
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -5
	add hl, bc
	ex de, hl
	ld hl, __LABEL1343
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL1089:
	ld a, (ix-1)
	or a
	jp nz, __LABEL1090
	ld (ix-2), 1
	jp __LABEL1091
__LABEL1094:
	ld a, (ix-2)
	dec a
	jp nz, __LABEL1096
	xor a
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 3
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	push af
	ld a, 18
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 17
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 3
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 5
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 11
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 12
	push af
	ld a, 12
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 13
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	call _FillRect
	jp __LABEL1097
__LABEL1096:
	ld a, (ix-2)
	cp 4
	sbc a, a
	ld d, a
	ld a, 4
	cp (ix-2)
	sbc a, a
	or d
	jp z, __LABEL1098
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-2)
	add a, 11
	push af
	ld a, (ix-2)
	add a, 8
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _MoveRect
	jp __LABEL1099
__LABEL1098:
	ld a, (ix-2)
	sub 4
	jp nz, __LABEL1101
	ld a, 1
	push af
	xor a
	push af
	ld a, (ix-2)
	add a, 11
	push af
	ld a, (ix-2)
	add a, 8
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _MoveRect
	xor a
	push af
	ld a, 3
	push af
	ld a, 20
	push af
	ld a, 17
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _MoveRect
__LABEL1101:
__LABEL1099:
__LABEL1097:
	ld a, (ix-5)
	push af
	ld hl, __LABEL1102
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1104
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1104:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1105:
	call _Frames
	ld de, 30
	or a
	sbc hl, de
	jp nc, __LABEL1106
	ld a, (ix-5)
	push af
	ld hl, __LABEL1102
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1108
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1108:
	call _UpdateScreen
	call _ScanKeyb
	ld (ix-3), a
	or a
	jp z, __LABEL1110
	ld a, (ix-3)
	jp _ShowRacing__leave
__LABEL1110:
	jp __LABEL1105
__LABEL1106:
	inc (ix-2)
__LABEL1091:
	ld a, 8
	cp (ix-2)
	jp nc, __LABEL1094
	xor a
	push af
	ld a, 18
	push af
	ld a, 17
	push af
	ld a, 6
	push af
	ld a, 4
	push af
	call _FillRect
	jp __LABEL1089
__LABEL1090:
_ShowRacing__leave:
	ld sp, ix
	pop ix
	ret
_ShowSnake:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1344
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -5
	add hl, bc
	ex de, hl
	ld hl, __LABEL1345
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL1111:
	ld a, (ix-1)
	or a
	jp nz, __LABEL1112
	ld (ix-2), 0
	jp __LABEL1113
__LABEL1116:
	ld a, (ix-2)
	or a
	jp nz, __LABEL1118
	xor a
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 15
	push af
	ld a, 15
	push af
	ld a, 6
	push af
	ld a, 3
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 15
	push af
	ld a, 9
	push af
	call _SetCell
	jp __LABEL1119
__LABEL1118:
	xor a
	push af
	ld a, 1
	push af
	ld a, 15
	push af
	ld a, 15
	push af
	ld a, (ix-2)
	add a, 6
	dec a
	push af
	ld a, (ix-2)
	add a, 3
	dec a
	push af
	call _MoveRect
__LABEL1119:
	ld a, (ix-5)
	push af
	ld hl, __LABEL1120
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1122
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1122:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1123:
	call _Frames
	ld de, 30
	or a
	sbc hl, de
	jp nc, __LABEL1124
	ld a, (ix-5)
	push af
	ld hl, __LABEL1120
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1126
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1126:
	call _UpdateScreen
	call _ScanKeyb
	ld (ix-3), a
	or a
	jp z, __LABEL1128
	ld a, (ix-3)
	jp _ShowSnake__leave
__LABEL1128:
	jp __LABEL1123
__LABEL1124:
	inc (ix-2)
__LABEL1113:
	ld a, 3
	cp (ix-2)
	jp nc, __LABEL1116
	jp __LABEL1111
__LABEL1112:
_ShowSnake__leave:
	ld sp, ix
	pop ix
	ret
_ShowDestroyer:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1346
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -5
	add hl, bc
	ex de, hl
	ld hl, __LABEL1347
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL1129:
	ld a, (ix-1)
	or a
	jp nz, __LABEL1130
	ld (ix-2), 0
	jp __LABEL1131
__LABEL1134:
	ld a, (ix-2)
	or a
	jp nz, __LABEL1136
	xor a
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 11
	push af
	ld a, 9
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	push af
	ld a, 4
	push af
	call _SetCell
	jp __LABEL1137
__LABEL1136:
	xor a
	push af
	ld a, 18
	sub (ix-2)
	inc a
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	sub (ix-2)
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL1137:
	ld a, (ix-5)
	push af
	ld hl, __LABEL1138
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1140
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1140:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1141:
	call _Frames
	ld de, 20
	or a
	sbc hl, de
	jp nc, __LABEL1142
	ld a, (ix-5)
	push af
	ld hl, __LABEL1138
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1144
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1144:
	call _UpdateScreen
	call _ScanKeyb
	ld (ix-3), a
	or a
	jp z, __LABEL1146
	ld a, (ix-3)
	jp _ShowDestroyer__leave
__LABEL1146:
	jp __LABEL1141
__LABEL1142:
	inc (ix-2)
__LABEL1131:
	ld a, 8
	cp (ix-2)
	jp nc, __LABEL1134
	jp __LABEL1129
__LABEL1130:
_ShowDestroyer__leave:
	ld sp, ix
	pop ix
	ret
_ShowConstructor:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1348
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -5
	add hl, bc
	ex de, hl
	ld hl, __LABEL1349
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL1147:
	ld a, (ix-1)
	or a
	jp nz, __LABEL1148
	ld (ix-2), 0
	jp __LABEL1149
__LABEL1152:
	ld a, (ix-2)
	or a
	jp nz, __LABEL1154
	xor a
	push af
	ld a, 20
	push af
	ld a, 10
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 11
	push af
	ld a, 9
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	xor a
	push af
	ld a, 11
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 20
	push af
	ld a, 5
	push af
	ld a, 3
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 19
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	push af
	ld a, 4
	push af
	call _SetCell
	jp __LABEL1155
__LABEL1154:
	ld a, (ix-2)
	sub 8
	jp nz, __LABEL1156
	xor a
	push af
	ld a, 11
	push af
	ld a, 11
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	jp __LABEL1157
__LABEL1156:
	xor a
	push af
	ld a, 18
	sub (ix-2)
	inc a
	push af
	ld a, 4
	push af
	call _SetCell
	ld a, 1
	push af
	ld a, 18
	sub (ix-2)
	push af
	ld a, 4
	push af
	call _SetCell
__LABEL1157:
__LABEL1155:
	ld a, (ix-5)
	push af
	ld hl, __LABEL1158
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1160
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1160:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1161:
	call _Frames
	ld de, 20
	or a
	sbc hl, de
	jp nc, __LABEL1162
	ld a, (ix-5)
	push af
	ld hl, __LABEL1158
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1164
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1164:
	call _UpdateScreen
	call _ScanKeyb
	ld (ix-3), a
	or a
	jp z, __LABEL1166
	ld a, (ix-3)
	jp _ShowConstructor__leave
__LABEL1166:
	jp __LABEL1161
__LABEL1162:
	inc (ix-2)
__LABEL1149:
	ld a, 8
	cp (ix-2)
	jp nc, __LABEL1152
	jp __LABEL1147
__LABEL1148:
_ShowConstructor__leave:
	ld sp, ix
	pop ix
	ret
_ShowGhost:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	inc sp
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL1350
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -5
	add hl, bc
	ex de, hl
	ld hl, __LABEL1351
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 9
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 20
	push af
	ld a, 19
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL1167:
	ld a, (ix-1)
	or a
	jp nz, __LABEL1168
	ld (ix-2), 1
	jp __LABEL1169
__LABEL1172:
	ld a, (ix-2)
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-2)
	sub 3
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1174
	xor a
	push af
	ld a, 18
	push af
	ld a, 11
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	jp __LABEL1175
__LABEL1174:
	ld a, (ix-2)
	sub 2
	jp nz, __LABEL1176
	ld a, 1
	push af
	ld a, 17
	push af
	ld a, 12
	push af
	ld a, 5
	push af
	ld a, 1
	push af
	call _FillRect
	xor a
	push af
	ld a, 12
	push af
	ld a, 1
	push af
	call _SetCell
	xor a
	push af
	ld a, 12
	push af
	ld a, 5
	push af
	call _SetCell
	xor a
	push af
	ld a, 13
	push af
	ld a, 2
	push af
	call _SetCell
	xor a
	push af
	ld a, 13
	push af
	ld a, 4
	push af
	call _SetCell
	xor a
	push af
	ld a, 15
	push af
	ld a, 15
	push af
	ld a, 4
	push af
	ld a, 2
	push af
	call _FillRect
	xor a
	push af
	ld a, 17
	push af
	ld a, 2
	push af
	call _SetCell
	xor a
	push af
	ld a, 17
	push af
	ld a, 4
	push af
	call _SetCell
	jp __LABEL1177
__LABEL1176:
	ld a, (ix-2)
	sub 4
	jp nz, __LABEL1179
	ld a, 1
	push af
	ld a, 17
	push af
	ld a, 12
	push af
	ld a, 10
	push af
	ld a, 6
	push af
	call _FillRect
	xor a
	push af
	ld a, 12
	push af
	ld a, 6
	push af
	call _SetCell
	xor a
	push af
	ld a, 12
	push af
	ld a, 10
	push af
	call _SetCell
	xor a
	push af
	ld a, 13
	push af
	ld a, 7
	push af
	call _SetCell
	xor a
	push af
	ld a, 13
	push af
	ld a, 9
	push af
	call _SetCell
	xor a
	push af
	ld a, 15
	push af
	ld a, 15
	push af
	ld a, 9
	push af
	ld a, 7
	push af
	call _FillRect
	xor a
	push af
	ld a, 17
	push af
	ld a, 7
	push af
	call _SetCell
	xor a
	push af
	ld a, 17
	push af
	ld a, 9
	push af
	call _SetCell
__LABEL1179:
__LABEL1177:
__LABEL1175:
	ld a, (ix-5)
	push af
	ld hl, __LABEL1180
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1182
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1182:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1183:
	call _Frames
	ld de, 30
	or a
	sbc hl, de
	jp nc, __LABEL1184
	ld a, (ix-5)
	push af
	ld hl, __LABEL1180
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-5)
	add a, (ix-4)
	ld (ix-5), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-5)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1186
	ld a, (ix-4)
	neg
	ld (ix-4), a
__LABEL1186:
	call _UpdateScreen
	call _ScanKeyb
	ld (ix-3), a
	or a
	jp z, __LABEL1188
	ld a, (ix-3)
	jp _ShowGhost__leave
__LABEL1188:
	jp __LABEL1183
__LABEL1184:
	inc (ix-2)
__LABEL1169:
	ld a, 4
	cp (ix-2)
	jp nc, __LABEL1172
	jp __LABEL1167
__LABEL1168:
_ShowGhost__leave:
	ld sp, ix
	pop ix
	ret
_ShowMatch:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -8
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 7
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -7
	add hl, bc
	ex de, hl
	ld hl, __LABEL1352
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -8
	add hl, bc
	ex de, hl
	ld hl, __LABEL1353
	ld bc, 1
	ldir
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 9
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
__LABEL1189:
	ld a, (ix-4)
	or a
	jp nz, __LABEL1190
	ld (ix-1), 6
	ld (ix-2), 2
	ld (ix-3), 8
	ld (ix-5), 1
	jp __LABEL1191
__LABEL1194:
	ld a, (ix-1)
	push af
	ld a, 17
	push af
	ld a, 2
	push af
	call _ShowFigure
	ld a, (ix-2)
	push af
	ld a, 17
	push af
	ld a, 5
	push af
	call _ShowFigure
	ld a, (ix-3)
	push af
	ld a, 17
	push af
	ld a, 8
	push af
	call _ShowFigure
	inc (ix-1)
	inc (ix-2)
	inc (ix-3)
	ld a, (ix-8)
	push af
	ld hl, __LABEL1196
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-8)
	add a, (ix-7)
	ld (ix-8), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-8)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1198
	ld a, (ix-7)
	neg
	ld (ix-7), a
__LABEL1198:
	call _UpdateScreen
	call _ResetFrameCounter
__LABEL1199:
	call _Frames
	ld de, 30
	or a
	sbc hl, de
	jp nc, __LABEL1200
	ld a, (ix-8)
	push af
	ld hl, __LABEL1196
	call __LOADSTR
	push hl
	call _ShowChar
	ld a, (ix-8)
	add a, (ix-7)
	ld (ix-8), a
	dec a
	sub 1
	sbc a, a
	ld d, a
	ld a, (ix-8)
	sub 9
	sub 1
	sbc a, a
	or d
	jp z, __LABEL1202
	ld a, (ix-7)
	neg
	ld (ix-7), a
__LABEL1202:
	call _UpdateScreen
	call _ScanKeyb
	ld (ix-6), a
	or a
	jp z, __LABEL1204
	ld a, (ix-6)
	jp _ShowMatch__leave
__LABEL1204:
	jp __LABEL1199
__LABEL1200:
	inc (ix-5)
__LABEL1191:
	ld a, 4
	cp (ix-5)
	jp nc, __LABEL1194
	jp __LABEL1189
__LABEL1190:
_ShowMatch__leave:
	ld sp, ix
	pop ix
	ret
_SelectGame:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	call _ShowNextTitle
	xor a
	push af
	xor a
	push af
	call _SetSymbol
	ld a, (_level)
	push af
	call _SetLevel
	call _UpdateScreen
__LABEL1205:
	ld a, (ix-1)
	sub 3
	jp z, __LABEL1206
	ld a, (_game)
	or a
	jp nz, __LABEL1207
	call _ShowTetris
	ld (ix-1), a
	jp __LABEL1208
__LABEL1207:
	ld a, (_game)
	dec a
	jp nz, __LABEL1209
	call _ShowArkanoid
	ld (ix-1), a
	jp __LABEL1210
__LABEL1209:
	ld a, (_game)
	sub 2
	jp nz, __LABEL1211
	call _ShowRacing
	ld (ix-1), a
	jp __LABEL1212
__LABEL1211:
	ld a, (_game)
	sub 3
	jp nz, __LABEL1213
	call _ShowSnake
	ld (ix-1), a
	jp __LABEL1214
__LABEL1213:
	ld a, (_game)
	sub 4
	jp nz, __LABEL1215
	call _ShowDestroyer
	ld (ix-1), a
	jp __LABEL1216
__LABEL1215:
	ld a, (_game)
	sub 5
	jp nz, __LABEL1217
	call _ShowGhost
	ld (ix-1), a
	jp __LABEL1218
__LABEL1217:
	ld a, (_game)
	sub 6
	jp nz, __LABEL1219
	call _ShowConstructor
	ld (ix-1), a
	jp __LABEL1220
__LABEL1219:
	ld a, (_game)
	sub 7
	jp nz, __LABEL1222
	call _ShowMatch
	ld (ix-1), a
__LABEL1222:
__LABEL1220:
__LABEL1218:
__LABEL1216:
__LABEL1214:
__LABEL1212:
__LABEL1210:
__LABEL1208:
	ld a, (ix-1)
	dec a
	jp nz, __LABEL1223
	ld hl, _game
	inc (hl)
	ld a, 7
	ld hl, (_game - 1)
	cp h
	jp nc, __LABEL1226
	xor a
	ld (_game), a
__LABEL1226:
	jp __LABEL1224
__LABEL1223:
	ld a, (ix-1)
	sub 2
	jp nz, __LABEL1227
	ld hl, _game
	dec (hl)
	ld a, 7
	ld hl, (_game - 1)
	cp h
	jp nc, __LABEL1230
	ld a, 7
	ld (_game), a
__LABEL1230:
	jp __LABEL1228
__LABEL1227:
	ld a, (ix-1)
	sub 3
	jp nz, __LABEL1232
	xor a
	push af
	ld a, 20
	push af
	ld a, 1
	push af
	ld a, 10
	push af
	ld a, 1
	push af
	call _FillRect
	call _UpdateScreen
	ld a, (_game)
	or a
	jp nz, __LABEL1233
	ld a, (_level)
	push af
	call _RunTetris
	jp _SelectGame__leave
__LABEL1233:
	ld a, (_game)
	dec a
	jp nz, __LABEL1235
	ld a, (_level)
	push af
	call _RunArkanoid
	jp _SelectGame__leave
__LABEL1235:
	ld a, (_game)
	sub 2
	jp nz, __LABEL1237
	ld a, (_level)
	push af
	call _RunRacing
	jp _SelectGame__leave
__LABEL1237:
	ld a, (_game)
	sub 3
	jp nz, __LABEL1239
	ld a, (_level)
	push af
	call _RunSnake
	jp _SelectGame__leave
__LABEL1239:
	ld a, (_game)
	sub 4
	jp nz, __LABEL1241
	ld a, (_level)
	push af
	call _RunDestroyer
	jp _SelectGame__leave
__LABEL1241:
	ld a, (_game)
	sub 5
	jp nz, __LABEL1243
	ld a, (_level)
	push af
	call _RunGhostHunter
	jp _SelectGame__leave
__LABEL1243:
	ld a, (_game)
	sub 6
	jp nz, __LABEL1245
	ld a, (_level)
	push af
	call _RunConstructor
	jp _SelectGame__leave
__LABEL1245:
	ld a, (_game)
	sub 7
	jp nz, __LABEL1248
	ld a, (_level)
	push af
	call _RunMatch
	jp _SelectGame__leave
__LABEL1248:
__LABEL1232:
__LABEL1228:
__LABEL1224:
	jp __LABEL1205
__LABEL1206:
_SelectGame__leave:
	ld sp, ix
	pop ix
	ret
__LABEL15:
	DEFW 000Bh
	DEFB 39h
	DEFB 39h
	DEFB 39h
	DEFB 39h
	DEFB 20h
	DEFB 49h
	DEFB 4Eh
	DEFB 20h
	DEFB 4Fh
	DEFB 4Eh
	DEFB 45h
__LABEL16:
	DEFW 0011h
	DEFB 98h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 0A1h
	DEFB 9Ah
__LABEL22:
	DEFW 0001h
	DEFB 0A4h
__LABEL23:
	DEFW 000Fh
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 20h
__LABEL24:
	DEFW 0001h
	DEFB 0A2h
__LABEL25:
	DEFW 0001h
	DEFB 90h
__LABEL26:
	DEFW 0011h
	DEFB 99h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A3h
	DEFB 0A0h
__LABEL27:
	DEFW 0003h
	DEFB 95h
	DEFB 96h
	DEFB 97h
__LABEL28:
	DEFW 0002h
	DEFB 9Eh
	DEFB 9Fh
__LABEL29:
	DEFW 0003h
	DEFB 9Bh
	DEFB 9Ch
	DEFB 9Dh
__LABEL100:
	DEFW 0002h
	DEFB 20h
	DEFB 20h
__LABEL124:
	DEFW 0001h
	DEFB 30h
__LABEL355:
	DEFW 0000h
__LABEL386:
	DEFW 0001h
	DEFB 6Fh
__LABEL391:
	DEFW 0001h
	DEFB 70h
__LABEL396:
	DEFW 0001h
	DEFB 61h
__LABEL399:
	DEFW 0001h
	DEFB 20h
__LABEL406:
	DEFW 0001h
	DEFB 68h
__LABEL608:
	DEFW 0001h
	DEFB 71h
__LABEL1053:
	DEFW 0001h
	DEFB 41h
__LABEL1071:
	DEFW 0001h
	DEFB 42h
__LABEL1102:
	DEFW 0001h
	DEFB 43h
__LABEL1120:
	DEFW 0001h
	DEFB 44h
__LABEL1138:
	DEFW 0001h
	DEFB 45h
__LABEL1158:
	DEFW 0001h
	DEFB 47h
__LABEL1180:
	DEFW 0001h
	DEFB 46h
__LABEL1196:
	DEFW 0001h
	DEFB 48h
#line 1 "addf.asm"

#line 1 "stackf.asm"

	; -------------------------------------------------------------
	; Functions to manage FP-Stack of the ZX Spectrum ROM CALC
	; -------------------------------------------------------------


	__FPSTACK_PUSH EQU 2AB6h	; Stores an FP number into the ROM FP stack (A, ED CB)
	__FPSTACK_POP  EQU 2BF1h	; Pops an FP number out of the ROM FP stack (A, ED CB)

__FPSTACK_PUSH2: ; Pushes Current A ED CB registers and top of the stack on (SP + 4)
	                 ; Second argument to push into the stack calculator is popped out of the stack
	                 ; Since the caller routine also receives the parameters into the top of the stack
	                 ; four bytes must be removed from SP before pop them out

	    call __FPSTACK_PUSH ; Pushes A ED CB into the FP-STACK
	    exx
	    pop hl       ; Caller-Caller return addr
	    exx
	    pop hl       ; Caller return addr

	    pop af
	    pop de
	    pop bc

	    push hl      ; Caller return addr
	    exx
	    push hl      ; Caller-Caller return addr
	    exx

	    jp __FPSTACK_PUSH


__FPSTACK_I16:	; Pushes 16 bits integer in HL into the FP ROM STACK
					; This format is specified in the ZX 48K Manual
					; You can push a 16 bit signed integer as
					; 0 SS LL HH 0, being SS the sign and LL HH the low
					; and High byte respectively
		ld a, h
		rla			; sign to Carry
		sbc	a, a	; 0 if positive, FF if negative
		ld e, a
		ld d, l
		ld c, h
		xor a
		ld b, a
		jp __FPSTACK_PUSH
#line 2 "addf.asm"

	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)
	; All of them uses A EDCB registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order AF DE BC (F not used).
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__ADDF:	; Addition
		call __FPSTACK_PUSH2

		; ------------- ROM ADD
		rst 28h
		defb 0fh	; ADD
		defb 38h;   ; END CALC

		jp __FPSTACK_POP

#line 14282 "Program.zxbas"
#line 1 "array.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	; -------------------------------------------------------------------
	; Simple array Index routine
	; Number of total indexes dimensions - 1 at beginning of memory
	; HL = Start of array memory (First two bytes contains N-1 dimensions)
	; Dimension values on the stack, (top of the stack, highest dimension)
	; E.g. A(2, 4) -> PUSH <4>; PUSH <2>

	; For any array of N dimension A(aN-1, ..., a1, a0)
	; and dimensions D[bN-1, ..., b1, b0], the offset is calculated as
	; O = [a0 + b0 * (a1 + b1 * (a2 + ... bN-2(aN-1)))]
; What I will do here is to calculate the following sequence:
	; ((aN-1 * bN-2) + aN-2) * bN-3 + ...


#line 1 "mul16.asm"

__MUL16:	; Mutiplies HL with the last value stored into de stack
				; Works for both signed and unsigned

			PROC

			LOCAL __MUL16LOOP
	        LOCAL __MUL16NOADD

			ex de, hl
			pop hl		; Return address
			ex (sp), hl ; CALLEE caller convention

__MUL16_FAST:
	        ld b, 16
	        ld a, h
	        ld c, l
	        ld hl, 0

__MUL16LOOP:
	        add hl, hl  ; hl << 1
	        sla c
	        rla         ; a,c << 1
	        jp nc, __MUL16NOADD
	        add hl, de

__MUL16NOADD:
	        djnz __MUL16LOOP

			ret	; Result in hl (16 lower bits)

			ENDP

#line 20 "array.asm"

#line 24 "C:/zxbasic/library-asm/array.asm"

__ARRAY_PTR:   ;; computes an array offset from a pointer
	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c

__ARRAY:
		PROC

		LOCAL LOOP
		LOCAL ARRAY_END
		LOCAL RET_ADDRESS ; Stores return address
		LOCAL TMP_ARR_PTR ; Stores pointer temporarily

	    ld e, (hl)
	    inc hl
	    ld d, (hl)
	    inc hl
	    ld (TMP_ARR_PTR), hl
	    ex de, hl
		ex (sp), hl	; Return address in HL, array address in the stack
		ld (RET_ADDRESS + 1), hl ; Stores it for later

		exx
		pop hl		; Will use H'L' as the pointer
		ld c, (hl)	; Loads Number of dimensions from (hl)
		inc hl
		ld b, (hl)
		inc hl		; Ready
		exx

		ld hl, 0	; HL = Offset "accumulator"

LOOP:
#line 62 "C:/zxbasic/library-asm/array.asm"
		pop bc		; Get next index (Ai) from the stack

#line 72 "C:/zxbasic/library-asm/array.asm"

		add hl, bc	; Adds current index

		exx			; Checks if B'C' = 0
		ld a, b		; Which means we must exit (last element is not multiplied by anything)
		or c
		jr z, ARRAY_END		; if B'Ci == 0 we are done

		ld e, (hl)			; Loads next dimension into D'E'
		inc hl
		ld d, (hl)
		inc hl
		push de
		dec bc				; Decrements loop counter
		exx
		pop de				; DE = Max bound Number (i-th dimension)

	    call __FNMUL
		jp LOOP

ARRAY_END:
		ld a, (hl)
		exx

#line 101 "C:/zxbasic/library-asm/array.asm"
	    LOCAL ARRAY_SIZE_LOOP

	    ex de, hl
	    ld hl, 0
	    ld b, a
ARRAY_SIZE_LOOP:
	    add hl, de
	    djnz ARRAY_SIZE_LOOP

#line 111 "C:/zxbasic/library-asm/array.asm"

	    ex de, hl
		ld hl, (TMP_ARR_PTR)
		ld a, (hl)
		inc hl
		ld h, (hl)
		ld l, a
		add hl, de  ; Adds element start

RET_ADDRESS:
		jp 0

	    ;; Performs a faster multiply for little 16bit numbs
	    LOCAL __FNMUL, __FNMUL2

__FNMUL:
	    xor a
	    or h
	    jp nz, __MUL16_FAST
	    or l
	    ret z

	    cp 33
	    jp nc, __MUL16_FAST

	    ld b, l
	    ld l, h  ; HL = 0

__FNMUL2:
	    add hl, de
	    djnz __FNMUL2
	    ret

TMP_ARR_PTR:
	    DW 0  ; temporary storage for pointer to tables

		ENDP

#line 14283 "Program.zxbas"
#line 1 "arrayalloc.asm"


#line 1 "calloc.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the MIT license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the MIT license on the internet

#line 1 "alloc.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the MIT license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the MIT license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be freed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.

#line 1 "error.asm"

	; Simple error control routines
; vim:ts=4:et:

	ERR_NR    EQU    23610    ; Error code system variable


	; Error code definitions (as in ZX spectrum manual)

; Set error code with:
	;    ld a, ERROR_CODE
	;    ld (ERR_NR), a


	ERROR_Ok                EQU    -1
	ERROR_SubscriptWrong    EQU     2
	ERROR_OutOfMemory       EQU     3
	ERROR_OutOfScreen       EQU     4
	ERROR_NumberTooBig      EQU     5
	ERROR_InvalidArg        EQU     9
	ERROR_IntOutOfRange     EQU    10
	ERROR_NonsenseInBasic   EQU    11
	ERROR_InvalidFileName   EQU    14
	ERROR_InvalidColour     EQU    19
	ERROR_BreakIntoProgram  EQU    20
	ERROR_TapeLoadingErr    EQU    26


	; Raises error using RST #8
__ERROR:
	    ld (__ERROR_CODE), a
	    rst 8
__ERROR_CODE:
	    nop
	    ret

	; Sets the error system variable, but keeps running.
	; Usually this instruction if followed by the END intermediate instruction.
__STOP:
	    ld (ERR_NR), a
	    ret
#line 69 "alloc.asm"
#line 1 "heapinit.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.




	; ---------------------------------------------------------------------
	;  __MEM_INIT must be called to initalize this library with the
	; standard parameters
	; ---------------------------------------------------------------------
__MEM_INIT: ; Initializes the library using (RAMTOP) as start, and
	        ld hl, ZXBASIC_MEM_HEAP  ; Change this with other address of heap start
	        ld de, ZXBASIC_HEAP_SIZE ; Change this with your size

	; ---------------------------------------------------------------------
	;  __MEM_INIT2 initalizes this library
; Parameters:
;   HL : Memory address of 1st byte of the memory heap
;   DE : Length in bytes of the Memory Heap
	; ---------------------------------------------------------------------
__MEM_INIT2:
	        ; HL as TOP
	        PROC

	        dec de
	        dec de
	        dec de
	        dec de        ; DE = length - 4; HL = start
	        ; This is done, because we require 4 bytes for the empty dummy-header block

	        xor a
	        ld (hl), a
	        inc hl
        ld (hl), a ; First "free" block is a header: size=0, Pointer=&(Block) + 4
	        inc hl

	        ld b, h
	        ld c, l
	        inc bc
	        inc bc      ; BC = starts of next block

	        ld (hl), c
	        inc hl
	        ld (hl), b
	        inc hl      ; Pointer to next block

	        ld (hl), e
	        inc hl
	        ld (hl), d
	        inc hl      ; Block size (should be length - 4 at start); This block contains all the available memory

	        ld (hl), a ; NULL (0000h) ; No more blocks (a list with a single block)
	        inc hl
	        ld (hl), a

	        ld a, 201
	        ld (__MEM_INIT), a; "Pokes" with a RET so ensure this routine is not called again
	        ret

	        ENDP

#line 70 "alloc.asm"


	; ---------------------------------------------------------------------
	; MEM_ALLOC
	;  Allocates a block of memory in the heap.
	;
	; Parameters
	;  BC = Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	; ---------------------------------------------------------------------

MEM_ALLOC:
__MEM_ALLOC: ; Returns the 1st free block found of the given length (in BC)
	        PROC

	        LOCAL __MEM_LOOP
	        LOCAL __MEM_DONE
	        LOCAL __MEM_SUBTRACT
	        LOCAL __MEM_START
	        LOCAL TEMP, TEMP0

	TEMP EQU TEMP0 + 1

	        ld hl, 0
	        ld (TEMP), hl

__MEM_START:
	        ld hl, ZXBASIC_MEM_HEAP  ; This label point to the heap start
	        inc bc
	        inc bc  ; BC = BC + 2 ; block size needs 2 extra bytes for hidden pointer

__MEM_LOOP:  ; Loads lengh at (HL, HL+). If Lenght >= BC, jump to __MEM_DONE
	        ld a, h ;  HL = NULL (No memory available?)
	        or l
#line 111 "C:/zxbasic/library-asm/alloc.asm"
	        ret z ; NULL
#line 113 "C:/zxbasic/library-asm/alloc.asm"
	        ; HL = Pointer to Free block
	        ld e, (hl)
	        inc hl
	        ld d, (hl)
	        inc hl          ; DE = Block Length

	        push hl         ; HL = *pointer to -> next block
	        ex de, hl
	        or a            ; CF = 0
	        sbc hl, bc      ; FREE >= BC (Length)  (HL = BlockLength - Length)
	        jp nc, __MEM_DONE
	        pop hl
	        ld (TEMP), hl

	        ex de, hl
	        ld e, (hl)
	        inc hl
	        ld d, (hl)
	        ex de, hl
	        jp __MEM_LOOP

__MEM_DONE:  ; A free block has been found.
	             ; Check if at least 4 bytes remains free (HL >= 4)
	        push hl
	        exx  ; exx to preserve bc
	        pop hl
	        ld bc, 4
	        or a
	        sbc hl, bc
	        exx
	        jp nc, __MEM_SUBTRACT
	        ; At this point...
	        ; less than 4 bytes remains free. So we return this block entirely
	        ; We must link the previous block with the next to this one
	        ; (DE) => Pointer to next block
	        ; (TEMP) => &(previous->next)
	        pop hl     ; Discard current block pointer
	        push de
	        ex de, hl  ; DE = Previous block pointer; (HL) = Next block pointer
	        ld a, (hl)
	        inc hl
	        ld h, (hl)
	        ld l, a    ; HL = (HL)
	        ex de, hl  ; HL = Previous block pointer; DE = Next block pointer
TEMP0:
	        ld hl, 0   ; Pre-previous block pointer

	        ld (hl), e
	        inc hl
	        ld (hl), d ; LINKED
	        pop hl ; Returning block.

	        ret

__MEM_SUBTRACT:
	        ; At this point we have to store HL value (Length - BC) into (DE - 2)
	        ex de, hl
	        dec hl
	        ld (hl), d
	        dec hl
	        ld (hl), e ; Store new block length

	        add hl, de ; New length + DE => free-block start
	        pop de     ; Remove previous HL off the stack

	        ld (hl), c ; Store length on its 1st word
	        inc hl
	        ld (hl), b
	        inc hl     ; Return hl
	        ret

	        ENDP

#line 13 "calloc.asm"


	; ---------------------------------------------------------------------
	; MEM_CALLOC
	;  Allocates a block of memory in the heap, and clears it filling it
	;  with 0 bytes
	;
	; Parameters
	;  BC = Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	; ---------------------------------------------------------------------
__MEM_CALLOC:
	        push bc
	        call __MEM_ALLOC
	        pop bc
	        ld a, h
	        or l
	        ret z  ; No memory
	        ld (hl), 0
	        dec bc
	        ld a, b
	        or c
	        ret z  ; Already filled (1 byte-length block)
	        ld d, h
	        ld e, l
	        inc de
	        push hl
	        ldir
	        pop hl
	        ret
#line 3 "arrayalloc.asm"


	; ---------------------------------------------------------------------
	; __ALLOC_LOCAL_ARRAY
	;  Allocates an array element area in the heap, and clears it filling it
	;  with 0 bytes
	;
	; Parameters
	;  HL = Offset to be added to IX => HL = IX + HL
	;  BC = Length of the element area = n.elements * size(element)
	;  DE = PTR to the index table
	;
; Returns:
	;  HL = (IX + HL) + 4
	; ---------------------------------------------------------------------

__ALLOC_LOCAL_ARRAY:
	    push de
	    push ix
	    pop de
	    add hl, de  ; hl = ix + hl
	    pop de
	    ld (hl), e
	    inc hl
	    ld (hl), d
	    inc hl
	    push hl
	    call __MEM_CALLOC
	    pop de
	    ex de, hl
	    ld (hl), e
	    inc hl
	    ld (hl), d
	    ret


	; ---------------------------------------------------------------------
	; __ALLOC_INITIALIZED_LOCAL_ARRAY
	;  Allocates an array element area in the heap, and clears it filling it
	;  with 0 bytes
	;
	; Parameters
	;  HL = Offset to be added to IX => HL = IX + HL
	;  BC = Length of the element area = n.elements * size(element)
	;  DE = PTR to the index table
	;  [SP + 2] = PTR to the element area
	;
; Returns:
	;  HL = (IX + HL) + 4
	; ---------------------------------------------------------------------

__ALLOC_INITIALIZED_LOCAL_ARRAY:
	    push bc
	    call __ALLOC_LOCAL_ARRAY
	    pop bc
	    ;; Swaps [SP], [SP + 2]
	    exx
	    pop hl       ; HL <- RET address
	    ex (sp), hl  ; HL <- Data table, [SP] <- RET address
	    push hl      ; [SP] <- Data table
	    exx
	    ex (sp), hl  ; HL = Data table, (SP) = (IX + HL + 4) - start of array address lbound
	    ; HL = data table
	    ; BC = length
	    ; DE = new data area
	    ldir
	    pop hl  ; HL = addr of LBound area if used
	    ret


#line 137 "C:/zxbasic/library-asm/arrayalloc.asm"
#line 14284 "Program.zxbas"
#line 1 "asc.asm"

	; Returns the ascii code for the given str
#line 1 "free.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.



	; ---------------------------------------------------------------------
	; MEM_FREE
	;  Frees a block of memory
	;
; Parameters:
	;  HL = Pointer to the block to be freed. If HL is NULL (0) nothing
	;  is done
	; ---------------------------------------------------------------------

MEM_FREE:
__MEM_FREE: ; Frees the block pointed by HL
	            ; HL DE BC & AF modified
	        PROC

	        LOCAL __MEM_LOOP2
	        LOCAL __MEM_LINK_PREV
	        LOCAL __MEM_JOIN_TEST
	        LOCAL __MEM_BLOCK_JOIN

	        ld a, h
	        or l
	        ret z       ; Return if NULL pointer

	        dec hl
	        dec hl
	        ld b, h
	        ld c, l    ; BC = Block pointer

	        ld hl, ZXBASIC_MEM_HEAP  ; This label point to the heap start

__MEM_LOOP2:
	        inc hl
	        inc hl     ; Next block ptr

	        ld e, (hl)
	        inc hl
	        ld d, (hl) ; Block next ptr
	        ex de, hl  ; DE = &(block->next); HL = block->next

	        ld a, h    ; HL == NULL?
	        or l
	        jp z, __MEM_LINK_PREV; if so, link with previous

	        or a       ; Clear carry flag
	        sbc hl, bc ; Carry if BC > HL => This block if before
	        add hl, bc ; Restores HL, preserving Carry flag
	        jp c, __MEM_LOOP2 ; This block is before. Keep searching PASS the block

	;------ At this point current HL is PAST BC, so we must link (DE) with BC, and HL in BC->next

__MEM_LINK_PREV:    ; Link (DE) with BC, and BC->next with HL
	        ex de, hl
	        push hl
	        dec hl

	        ld (hl), c
	        inc hl
	        ld (hl), b ; (DE) <- BC

	        ld h, b    ; HL <- BC (Free block ptr)
	        ld l, c
	        inc hl     ; Skip block length (2 bytes)
	        inc hl
	        ld (hl), e ; Block->next = DE
	        inc hl
	        ld (hl), d
	        ; --- LINKED ; HL = &(BC->next) + 2

	        call __MEM_JOIN_TEST
	        pop hl

__MEM_JOIN_TEST:   ; Checks for fragmented contiguous blocks and joins them
	                   ; hl = Ptr to current block + 2
	        ld d, (hl)
	        dec hl
	        ld e, (hl)
	        dec hl
	        ld b, (hl) ; Loads block length into BC
	        dec hl
	        ld c, (hl) ;

	        push hl    ; Saves it for later
	        add hl, bc ; Adds its length. If HL == DE now, it must be joined
	        or a
	        sbc hl, de ; If Z, then HL == DE => We must join
	        pop hl
	        ret nz

__MEM_BLOCK_JOIN:  ; Joins current block (pointed by HL) with next one (pointed by DE). HL->length already in BC
	        push hl    ; Saves it for later
	        ex de, hl

	        ld e, (hl) ; DE -> block->next->length
	        inc hl
	        ld d, (hl)
	        inc hl

	        ex de, hl  ; DE = &(block->next)
	        add hl, bc ; HL = Total Length

	        ld b, h
	        ld c, l    ; BC = Total Length

	        ex de, hl
	        ld e, (hl)
	        inc hl
	        ld d, (hl) ; DE = block->next

	        pop hl     ; Recovers Pointer to block
	        ld (hl), c
	        inc hl
	        ld (hl), b ; Length Saved
	        inc hl
	        ld (hl), e
	        inc hl
	        ld (hl), d ; Next saved
	        ret

	        ENDP

#line 3 "asc.asm"

__ASC:
		PROC
		LOCAL __ASC_END

		ex af, af'	; Saves free_mem flag

		ld a, h
		or l
		ret z		; NULL? return

		ld c, (hl)
		inc hl
		ld b, (hl)

		ld a, b
		or c
		jr z, __ASC_END		; No length? return

		inc hl
		ld a, (hl)
	    dec hl

__ASC_END:
		dec hl
		ex af, af'
		or a
		call nz, __MEM_FREE	; Free memory if needed

		ex af, af'	; Recover result

		ret
		ENDP
#line 14285 "Program.zxbas"
#line 1 "band16.asm"

; vim:ts=4:et:
	; FASTCALL bitwise and16 version.
	; result in hl
; __FASTCALL__ version (operands: A, H)
	; Performs 16bit or 16bit and returns the boolean
; Input: HL, DE
; Output: HL <- HL AND DE

__BAND16:
		ld a, h
		and d
	    ld h, a

	    ld a, l
	    and e
	    ld l, a

	    ret

#line 14286 "Program.zxbas"
#line 1 "beeper.asm"

; vim:ts=4:et:sw=4:
	; This is a fast beep routine, but needs parameters
	; codified in a different way.
; See http://www.wearmouth.demon.co.uk/zx82.htm#L03F8

	; Needs pitch on top of the stack
	; HL = duration

__BEEPER:
	    ex de, hl
	    pop hl
	    ex (sp), hl ; CALLEE
	    push ix     ; BEEPER changes IX
	    call 03B5h
	    pop ix
	    ret


#line 14287 "Program.zxbas"
#line 1 "border.asm"

	; __FASTCALL__ Routine to change de border
	; Parameter (color) specified in A register

	BORDER EQU 229Bh

	; Nothing to do! (Directly from the ZX Spectrum ROM)

#line 14288 "Program.zxbas"
#line 1 "bright.asm"

	; Sets bright flag in ATTR_P permanently
; Parameter: Paper color in A register

#line 1 "const.asm"

	; Global constants

	P_FLAG	EQU 23697
	FLAGS2	EQU 23681
	ATTR_P	EQU 23693	; permanet ATTRIBUTES
	ATTR_T	EQU 23695	; temporary ATTRIBUTES
	CHARS	EQU 23606 ; Pointer to ROM/RAM Charset
	UDG	EQU 23675 ; Pointer to UDG Charset
	MEM0	EQU 5C92h ; Temporary memory buffer used by ROM chars

#line 5 "bright.asm"

BRIGHT:
		ld hl, ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

__SET_BRIGHT:
		; Another entry. This will set the bright flag at location pointer by DE
		cp 8
		jr z, IS_TR

		; # Convert to 0/1
		or a
		jr z, IS_ZERO
		ld a, 0x40

IS_ZERO:
		ld b, a	; Saves the color
		ld a, (hl)
		and 0BFh ; Clears previous value
		or b
		ld (hl), a
		inc hl
		res 6, (hl)  ;Reset bit 6 to disable transparency
		ret

IS_TR:  ; transparent
		inc hl ; Points DE to MASK_T or MASK_P
	    set 6, (hl)  ;Set bit 6 to enable transparency
		ret

	; Sets the BRIGHT flag passed in A register in the ATTR_T variable
BRIGHT_TMP:
		ld hl, ATTR_T
		jr __SET_BRIGHT
	    ENDP
#line 14289 "Program.zxbas"
#line 1 "chr.asm"

	; CHR$(x, y, x) returns the string CHR$(x) + CHR$(y) + CHR$(z)
	;



CHR:	; Returns HL = Pointer to STRING (NULL if no memory)
			; Requires alloc.asm for dynamic memory heap.
		; Parameters: HL = Number of bytes to insert (already push onto the stack)
			; STACK => parameters (16 bit, only the High byte is considered)
			; Used registers A, A', BC, DE, HL, H'L'

			PROC

			LOCAL __POPOUT
			LOCAL TMP

	TMP		EQU 23629 ; (DEST System variable)

			ld a, h
			or l
			ret z	; If Number of parameters is ZERO, return NULL STRING

			ld b, h
			ld c, l

			pop hl	; Return address
			ld (TMP), hl

			push bc
			inc bc
			inc bc	; BC = BC + 2 => (2 bytes for the length number)
			call __MEM_ALLOC
			pop bc

			ld d, h
			ld e, l			; Saves HL in DE

			ld a, h
			or l
			jr z, __POPOUT	; No Memory, return

			ld (hl), c
			inc hl
			ld (hl), b
			inc hl

__POPOUT:	; Removes out of the stack every byte and return
				; If Zero Flag is set, don't store bytes in memory
			ex af, af' ; Save Zero Flag

			ld a, b
			or c
			jr z, __CHR_END

			dec bc
			pop af 	   ; Next byte

			ex af, af' ; Recovers Zero flag
			jr z, __POPOUT

			ex af, af' ; Saves Zero flag
			ld (hl), a
			inc hl
	        ex af, af' ; Recovers Zero Flag

			jp __POPOUT

__CHR_END:
			ld hl, (TMP)
			push hl		; Restores return addr
			ex de, hl	; Recovers original HL ptr
			ret

			ENDP

#line 14290 "Program.zxbas"
#line 1 "copy_attr.asm"


#line 1 "print.asm"

; vim:ts=4:sw=4:et:
; vim:ts=4:sw=4:et:
	; PRINT command routine
	; Does not print attribute. Use PRINT_STR or PRINT_NUM for that

#line 1 "sposn.asm"

	; Printing positioning library.
			PROC
			LOCAL ECHO_E

__LOAD_S_POSN:		; Loads into DE current ROW, COL print position from S_POSN mem var.
			ld de, (S_POSN)
			ld hl, (MAXX)
			or a
			sbc hl, de
			ex de, hl
			ret


__SAVE_S_POSN:		; Saves ROW, COL from DE into S_POSN mem var.
			ld hl, (MAXX)
			or a
			sbc hl, de
			ld (S_POSN), hl ; saves it again
			ret


	ECHO_E	EQU 23682
	MAXX	EQU ECHO_E   ; Max X position + 1
	MAXY	EQU MAXX + 1 ; Max Y position + 1

	S_POSN	EQU 23688
	POSX	EQU S_POSN		; Current POS X
	POSY	EQU S_POSN + 1	; Current POS Y

			ENDP

#line 7 "print.asm"
#line 1 "cls.asm"

	; JUMPS directly to spectrum CLS
	; This routine does not clear lower screen

	;CLS	EQU	0DAFh

	; Our faster implementation



CLS:
		PROC

		LOCAL COORDS
		LOCAL __CLS_SCR
		LOCAL ATTR_P
		LOCAL SCREEN

		ld hl, 0
		ld (COORDS), hl
	    ld hl, 1821h
		ld (S_POSN), hl
__CLS_SCR:
		ld hl, SCREEN
		ld (hl), 0
		ld d, h
		ld e, l
		inc de
		ld bc, 6144
		ldir

		; Now clear attributes

		ld a, (ATTR_P)
		ld (hl), a
		ld bc, 767
		ldir
		ret

	COORDS	EQU	23677
	SCREEN	EQU 16384 ; Default start of the screen (can be changed)
	ATTR_P	EQU 23693
	;you can poke (SCREEN_SCRADDR) to change CLS, DRAW & PRINTing address

	SCREEN_ADDR EQU (__CLS_SCR + 1) ; Address used by print and other screen routines
								    ; to get the start of the screen
		ENDP

#line 8 "print.asm"
#line 1 "in_screen.asm"




__IN_SCREEN:
		; Returns NO carry if current coords (D, E)
		; are OUT of the screen limits (MAXX, MAXY)

		PROC
		LOCAL __IN_SCREEN_ERR

		ld hl, MAXX
		ld a, e
		cp (hl)
		jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range

		ld a, d
		inc hl
		cp (hl)
		;; jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range
		;; ret
	    ret c                       ; Return if carry (OK)

__IN_SCREEN_ERR:
__OUT_OF_SCREEN_ERR:
		; Jumps here if out of screen
		ld a, ERROR_OutOfScreen
	    jp __STOP   ; Saves error code and exits

		ENDP
#line 9 "print.asm"
#line 1 "table_jump.asm"


JUMP_HL_PLUS_2A: ; Does JP (HL + A*2) Modifies DE. Modifies A
		add a, a

JUMP_HL_PLUS_A:	 ; Does JP (HL + A) Modifies DE
		ld e, a
		ld d, 0

JUMP_HL_PLUS_DE: ; Does JP (HL + DE)
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		ex de, hl
CALL_HL:
		jp (hl)

#line 10 "print.asm"
#line 1 "ink.asm"

	; Sets ink color in ATTR_P permanently
; Parameter: Paper color in A register



INK:
		PROC
		LOCAL __SET_INK
		LOCAL __SET_INK2

		ld de, ATTR_P

__SET_INK:
		cp 8
		jr nz, __SET_INK2

		inc de ; Points DE to MASK_T or MASK_P
		ld a, (de)
		or 7 ; Set bits 0,1,2 to enable transparency
		ld (de), a
		ret

__SET_INK2:
		; Another entry. This will set the ink color at location pointer by DE
		and 7	; # Gets color mod 8
		ld b, a	; Saves the color
		ld a, (de)
		and 0F8h ; Clears previous value
		or b
		ld (de), a
		inc de ; Points DE to MASK_T or MASK_P
		ld a, (de)
		and 0F8h ; Reset bits 0,1,2 sign to disable transparency
		ld (de), a ; Store new attr
		ret

	; Sets the INK color passed in A register in the ATTR_T variable
INK_TMP:
		ld de, ATTR_T
		jp __SET_INK

		ENDP

#line 11 "print.asm"
#line 1 "paper.asm"

	; Sets paper color in ATTR_P permanently
; Parameter: Paper color in A register



PAPER:
		PROC
		LOCAL __SET_PAPER
		LOCAL __SET_PAPER2

		ld de, ATTR_P

__SET_PAPER:
		cp 8
		jr nz, __SET_PAPER2
		inc de
		ld a, (de)
		or 038h
		ld (de), a
		ret

		; Another entry. This will set the paper color at location pointer by DE
__SET_PAPER2:
		and 7	; # Remove
		rlca
		rlca
		rlca		; a *= 8

		ld b, a	; Saves the color
		ld a, (de)
		and 0C7h ; Clears previous value
		or b
		ld (de), a
		inc de ; Points to MASK_T or MASK_P accordingly
		ld a, (de)
		and 0C7h  ; Resets bits 3,4,5
		ld (de), a
		ret


	; Sets the PAPER color passed in A register in the ATTR_T variable
PAPER_TMP:
		ld de, ATTR_T
		jp __SET_PAPER
		ENDP

#line 12 "print.asm"
#line 1 "flash.asm"

	; Sets flash flag in ATTR_P permanently
; Parameter: Paper color in A register



FLASH:
		ld hl, ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

__SET_FLASH:
		; Another entry. This will set the flash flag at location pointer by DE
		cp 8
		jr z, IS_TR

		; # Convert to 0/1
		or a
		jr z, IS_ZERO
		ld a, 0x80

IS_ZERO:
		ld b, a	; Saves the color
		ld a, (hl)
		and 07Fh ; Clears previous value
		or b
		ld (hl), a
		inc hl
		res 7, (hl)  ;Reset bit 7 to disable transparency
		ret

IS_TR:  ; transparent
		inc hl ; Points DE to MASK_T or MASK_P
		set 7, (hl)  ;Set bit 7 to enable transparency
		ret

	; Sets the FLASH flag passed in A register in the ATTR_T variable
FLASH_TMP:
		ld hl, ATTR_T
		jr __SET_FLASH
	    ENDP

#line 13 "print.asm"

#line 1 "over.asm"

	; Sets OVER flag in P_FLAG permanently
; Parameter: OVER flag in bit 0 of A register



OVER:
		PROC

		ld c, a ; saves it for later
		and 2
		ld hl, FLAGS2
		res 1, (HL)
		or (hl)
		ld (hl), a

		ld a, c	; Recovers previous value
		and 1	; # Convert to 0/1
		add a, a; # Shift left 1 bit for permanent

		ld hl, P_FLAG
		res 1, (hl)
		or (hl)
		ld (hl), a
		ret

	; Sets OVER flag in P_FLAG temporarily
OVER_TMP:
		ld c, a ; saves it for later
		and 2	; gets bit 1; clears carry
		rra
		ld hl, FLAGS2
		res 0, (hl)
		or (hl)
		ld (hl), a

		ld a, c	; Recovers previous value
		and 1
		ld hl, P_FLAG
		res 0, (hl)
	    or (hl)
		ld (hl), a
		jp __SET_ATTR_MODE

		ENDP

#line 15 "print.asm"
#line 1 "inverse.asm"

	; Sets INVERSE flag in P_FLAG permanently
; Parameter: INVERSE flag in bit 0 of A register



INVERSE:
		PROC

		and 1	; # Convert to 0/1
		add a, a; # Shift left 3 bits for permanent
		add a, a
		add a, a
		ld hl, P_FLAG
		res 3, (hl)
		or (hl)
		ld (hl), a
		ret

	; Sets INVERSE flag in P_FLAG temporarily
INVERSE_TMP:
		and 1
		add a, a
		add a, a; # Shift left 2 bits for temporary
		ld hl, P_FLAG
		res 2, (hl)
		or (hl)
		ld (hl), a
		jp __SET_ATTR_MODE

		ENDP

#line 16 "print.asm"
#line 1 "bold.asm"

	; Sets BOLD flag in P_FLAG permanently
; Parameter: BOLD flag in bit 0 of A register


BOLD:
		PROC

		and 1
		rlca
	    rlca
	    rlca
		ld hl, FLAGS2
		res 3, (HL)
		or (hl)
		ld (hl), a
		ret

	; Sets BOLD flag in P_FLAG temporarily
BOLD_TMP:
		and 1
		rlca
		rlca
		ld hl, FLAGS2
		res 2, (hl)
		or (hl)
		ld (hl), a
		ret

		ENDP

#line 17 "print.asm"
#line 1 "italic.asm"

	; Sets ITALIC flag in P_FLAG permanently
; Parameter: ITALIC flag in bit 0 of A register


ITALIC:
		PROC

		and 1
	    rrca
	    rrca
	    rrca
		ld hl, FLAGS2
		res 5, (HL)
		or (hl)
		ld (hl), a
		ret

	; Sets ITALIC flag in P_FLAG temporarily
ITALIC_TMP:
		and 1
		rrca
		rrca
		rrca
		rrca
		ld hl, FLAGS2
		res 4, (hl)
		or (hl)
		ld (hl), a
		ret

		ENDP

#line 18 "print.asm"

#line 1 "attr.asm"

	; Attribute routines
; vim:ts=4:et:sw:







__ATTR_ADDR:
	    ; calc start address in DE (as (32 * d) + e)
    ; Contributed by Santiago Romero at http://www.speccy.org
	    ld h, 0                     ;  7 T-States
	    ld a, d                     ;  4 T-States
	    add a, a     ; a * 2        ;  4 T-States
	    add a, a     ; a * 4        ;  4 T-States
	    ld l, a      ; HL = A * 4   ;  4 T-States

	    add hl, hl   ; HL = A * 8   ; 15 T-States
	    add hl, hl   ; HL = A * 16  ; 15 T-States
	    add hl, hl   ; HL = A * 32  ; 15 T-States

    ld d, 18h ; DE = 6144 + E. Note: 6144 is the screen size (before attr zone)
	    add hl, de

	    ld de, (SCREEN_ADDR)    ; Adds the screen address
	    add hl, de

	    ; Return current screen address in HL
	    ret


	; Sets the attribute at a given screen coordinate (D, E).
	; The attribute is taken from the ATTR_T memory variable
	; Used by PRINT routines
SET_ATTR:

	    ; Checks for valid coords
	    call __IN_SCREEN
	    ret nc

__SET_ATTR:
	    ; Internal __FASTCALL__ Entry used by printing routines
	    PROC

	    call __ATTR_ADDR

__SET_ATTR2:  ; Sets attr from ATTR_T to (HL) which points to the scr address
	    ld de, (ATTR_T)    ; E = ATTR_T, D = MASK_T

	    ld a, d
	    and (hl)
	    ld c, a    ; C = current screen color, masked

	    ld a, d
	    cpl        ; Negate mask
	    and e    ; Mask current attributes
	    or c    ; Mix them
	    ld (hl), a ; Store result in screen

	    ret

	    ENDP


	; Sets the attribute at a given screen pixel address in hl
	; HL contains the address in RAM for a given pixel (not a coordinate)
SET_PIXEL_ADDR_ATTR:
	    ;; gets ATTR position with offset given in SCREEN_ADDR
	    ld a, h
	    rrca
	    rrca
	    rrca
	    and 3
	    or 18h
	    ld h, a
	    ld de, (SCREEN_ADDR)
	    add hl, de  ;; Final screen addr
	    jp __SET_ATTR2
#line 20 "print.asm"

	; Putting a comment starting with @INIT <address>
	; will make the compiler to add a CALL to <address>
	; It is useful for initialization routines.


__PRINT_INIT: ; To be called before program starts (initializes library)
	        PROC

	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl

	        ld hl, 1821h
	        ld (MAXX), hl  ; Sets current maxX and maxY

	        xor a
	        ld (FLAGS2), a

	        ret


__PRINTCHAR: ; Print character store in accumulator (A register)
	             ; Modifies H'L', B'C', A'F', D'E', A

	        LOCAL PO_GR_1

	        LOCAL __PRCHAR
	        LOCAL __PRINT_CONT
	        LOCAL __PRINT_CONT2
	        LOCAL __PRINT_JUMP
	        LOCAL __SRCADDR
	        LOCAL __PRINT_UDG
	        LOCAL __PRGRAPH
	        LOCAL __PRINT_START
	        LOCAL __ROM_SCROLL_SCR
	        LOCAL __TVFLAGS

	        __ROM_SCROLL_SCR EQU 0DFEh
	        __TVFLAGS EQU 5C3Ch

	PRINT_JUMP_STATE EQU __PRINT_JUMP + 1

__PRINT_JUMP:
	        jp __PRINT_START    ; Where to jump. If we print 22 (AT), next two calls jumps to AT1 and AT2 respectively


	        LOCAL __SCROLL
__SCROLL:  ; Scroll?
	        ld hl, __TVFLAGS
	        bit 1, (hl)
	        ret z
	        call __ROM_SCROLL_SCR
	        ld hl, __TVFLAGS
	        res 1, (hl)
	        ret
#line 76 "C:/zxbasic/library-asm/print.asm"

__PRINT_START:
	        cp ' '
	        jp c, __PRINT_SPECIAL    ; Characters below ' ' are special ones

	        exx               ; Switch to alternative registers
	        ex af, af'        ; Saves a value (char to print) for later


	        call __SCROLL
#line 87 "C:/zxbasic/library-asm/print.asm"
	        call __LOAD_S_POSN

	; At this point we have the new coord
	        ld hl, (SCREEN_ADDR)

	        ld a, d
	        ld c, a     ; Saves it for later

	        and 0F8h    ; Masks 3 lower bit ; zy
	        ld d, a

	        ld a, c     ; Recovers it
	        and 07h     ; MOD 7 ; y1
	        rrca
	        rrca
	        rrca

	        or e
	        ld e, a
	        add hl, de    ; HL = Screen address + DE
	        ex de, hl     ; DE = Screen address

	        ex af, af'

	        cp 80h    ; Is it an UDG or a ?
	        jp c, __SRCADDR

	        cp 90h
	        jp nc, __PRINT_UDG

	        ; Print a 8 bit pattern (80h to 8Fh)

	        ld b, a
	        call PO_GR_1 ; This ROM routine will generate the bit pattern at MEM0
	        ld hl, MEM0
	        jp __PRGRAPH

	PO_GR_1 EQU 0B38h

__PRINT_UDG:
	        sub 90h ; Sub ASC code
	        ld bc, (UDG)
	        jp __PRGRAPH0

	__SOURCEADDR EQU (__SRCADDR + 1)    ; Address of the pointer to chars source
__SRCADDR:
	        ld bc, (CHARS)

__PRGRAPH0:
        add a, a   ; A = a * 2 (since a < 80h) ; Thanks to Metalbrain at http://foro.speccy.org
	        ld l, a
	        ld h, 0    ; HL = a * 2 (accumulator)
	        add hl, hl
	        add hl, hl ; HL = a * 8
	        add hl, bc ; HL = CHARS address

__PRGRAPH:
	        ex de, hl  ; HL = Write Address, DE = CHARS address
	        bit 2, (iy + $47)
	        call nz, __BOLD
	        bit 4, (iy + $47)
	        call nz, __ITALIC
	        ld b, 8 ; 8 bytes per char
__PRCHAR:
	        ld a, (de) ; DE *must* be ALWAYS source, and HL destiny

PRINT_MODE:     ; Which operation is used to write on the screen
                ; Set it with:
	                ; LD A, <OPERATION>
	                ; LD (PRINT_MODE), A
	                ;
                ; Available opertions:
                ; NORMAL : 0h  --> NOP         ; OVER 0
                ; XOR    : AEh --> XOR (HL)    ; OVER 1
                ; OR     : B6h --> OR (HL)     ; PUTSPRITE
                ; AND    : A6h --> AND (HL)    ; PUTMASK
	        nop     ;

INVERSE_MODE:   ; 00 -> NOP -> INVERSE 0
	        nop     ; 2F -> CPL -> INVERSE 1

	        ld (hl), a

	        inc de
	        inc h     ; Next line
	        djnz __PRCHAR

	        call __LOAD_S_POSN
	        push de
	        call __SET_ATTR
	        pop de
	        inc e            ; COL = COL + 1
	        ld hl, (MAXX)
	        ld a, e
	        dec l            ; l = MAXX
	        cp l            ; Lower than max?
	        jp c, __PRINT_CONT; Nothing to do
	        call __PRINT_EOL1
	        exx            ; counteracts __PRINT_EOL1 exx
	        jp __PRINT_CONT2

__PRINT_CONT:
	        call __SAVE_S_POSN

__PRINT_CONT2:
	        exx
	        ret

	; ------------- SPECIAL CHARS (< 32) -----------------

__PRINT_SPECIAL:    ; Jumps here if it is a special char
	        exx
	        ld hl, __PRINT_TABLE
	        jp JUMP_HL_PLUS_2A


PRINT_EOL:        ; Called WHENEVER there is no ";" at end of PRINT sentence
	        exx

__PRINT_0Dh:        ; Called WHEN printing CHR$(13)

	        call __SCROLL
#line 210 "C:/zxbasic/library-asm/print.asm"
	        call __LOAD_S_POSN

__PRINT_EOL1:        ; Another entry called from PRINT when next line required
	        ld e, 0

__PRINT_EOL2:
	        ld a, d
	        inc a

__PRINT_AT1_END:
	        ld hl, (MAXY)
	        cp l
	        jr c, __PRINT_EOL_END    ; Carry if (MAXY) < d

	        ld hl, __TVFLAGS
	        set 1, (hl)
	        ld a, d
#line 230 "C:/zxbasic/library-asm/print.asm"

__PRINT_EOL_END:
	        ld d, a

__PRINT_AT2_END:
	        call __SAVE_S_POSN
	        exx
	        ret

__PRINT_COM:
	        exx
	        push hl
	        push de
	        push bc
	        call PRINT_COMMA
	        pop bc
	        pop de
	        pop hl
	        ret

__PRINT_TAB:
	        ld hl, __PRINT_TAB1
	        jp __PRINT_SET_STATE

__PRINT_TAB1:
	        ld (MEM0), a
	        ld hl, __PRINT_TAB2
	        ld (PRINT_JUMP_STATE), hl
	        ret

__PRINT_TAB2:
	        ld a, (MEM0)        ; Load tab code (ignore the current one)
	        push hl
	        push de
	        push bc
	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl
	        call PRINT_TAB
	        pop bc
	        pop de
	        pop hl
	        ret

__PRINT_NOP:
__PRINT_RESTART:
	        ld hl, __PRINT_START
	        jp __PRINT_SET_STATE

__PRINT_AT:
	        ld hl, __PRINT_AT1

__PRINT_SET_STATE:
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        exx
	        ret

__PRINT_AT1:    ; Jumps here if waiting for 1st parameter
	        exx
	        ld hl, __PRINT_AT2
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        call __LOAD_S_POSN
	        jp __PRINT_AT1_END

__PRINT_AT2:
	        exx
	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        call __LOAD_S_POSN
	        ld e, a
	        ld hl, (MAXX)
	        cp (hl)
	        jr c, __PRINT_AT2_END
	        jr __PRINT_EOL1

__PRINT_DEL:
	        call __LOAD_S_POSN        ; Gets current screen position
	        dec e
	        ld a, -1
	        cp e
	        jp nz, __PRINT_AT2_END
	        ld hl, (MAXX)
	        ld e, l
	        dec e
	        dec e
	        dec d
	        cp d
	        jp nz, __PRINT_AT2_END
	        ld d, h
	        dec d
	        jp __PRINT_AT2_END

__PRINT_INK:
	        ld hl, __PRINT_INK2
	        jp __PRINT_SET_STATE

__PRINT_INK2:
	        exx
	        call INK_TMP
	        jp __PRINT_RESTART

__PRINT_PAP:
	        ld hl, __PRINT_PAP2
	        jp __PRINT_SET_STATE

__PRINT_PAP2:
	        exx
	        call PAPER_TMP
	        jp __PRINT_RESTART

__PRINT_FLA:
	        ld hl, __PRINT_FLA2
	        jp __PRINT_SET_STATE

__PRINT_FLA2:
	        exx
	        call FLASH_TMP
	        jp __PRINT_RESTART

__PRINT_BRI:
	        ld hl, __PRINT_BRI2
	        jp __PRINT_SET_STATE

__PRINT_BRI2:
	        exx
	        call BRIGHT_TMP
	        jp __PRINT_RESTART

__PRINT_INV:
	        ld hl, __PRINT_INV2
	        jp __PRINT_SET_STATE

__PRINT_INV2:
	        exx
	        call INVERSE_TMP
	        jp __PRINT_RESTART

__PRINT_OVR:
	        ld hl, __PRINT_OVR2
	        jp __PRINT_SET_STATE

__PRINT_OVR2:
	        exx
	        call OVER_TMP
	        jp __PRINT_RESTART

__PRINT_BOLD:
	        ld hl, __PRINT_BOLD2
	        jp __PRINT_SET_STATE

__PRINT_BOLD2:
	        exx
	        call BOLD_TMP
	        jp __PRINT_RESTART

__PRINT_ITA:
	        ld hl, __PRINT_ITA2
	        jp __PRINT_SET_STATE

__PRINT_ITA2:
	        exx
	        call ITALIC_TMP
	        jp __PRINT_RESTART


__BOLD:
	        push hl
	        ld hl, MEM0
	        ld b, 8
__BOLD_LOOP:
	        ld a, (de)
	        ld c, a
	        rlca
	        or c
	        ld (hl), a
	        inc hl
	        inc de
	        djnz __BOLD_LOOP
	        pop hl
	        ld de, MEM0
	        ret


__ITALIC:
	        push hl
	        ld hl, MEM0
	        ex de, hl
	        ld bc, 8
	        ldir
	        ld hl, MEM0
	        srl (hl)
	        inc hl
	        srl (hl)
	        inc hl
	        srl (hl)
	        inc hl
	        inc hl
	        inc hl
	        sla (hl)
	        inc hl
	        sla (hl)
	        inc hl
	        sla (hl)
	        pop hl
	        ld de, MEM0
	        ret

PRINT_COMMA:
	        call __LOAD_S_POSN
	        ld a, e
	        and 16
	        add a, 16

PRINT_TAB:
	        PROC
	        LOCAL LOOP, CONTINUE

	        inc a
	        call __LOAD_S_POSN ; e = current row
	        ld d, a
	        ld a, e
	        cp 21h
	        jr nz, CONTINUE
	        ld e, -1
CONTINUE:
	        ld a, d
	        inc e
	        sub e  ; A = A - E
	        and 31 ;
	        ret z  ; Already at position E
	        ld b, a
LOOP:
	        ld a, ' '
	        call __PRINTCHAR
	        djnz LOOP
	        ret
	        ENDP

PRINT_AT: ; Changes cursor to ROW, COL
	         ; COL in A register
	         ; ROW in stack

	        pop hl    ; Ret address
	        ex (sp), hl ; callee H = ROW
	        ld l, a
	        ex de, hl

	        call __IN_SCREEN
	        ret nc    ; Return if out of screen

	        ld hl, __TVFLAGS
	        res 1, (hl)
#line 482 "C:/zxbasic/library-asm/print.asm"
	        jp __SAVE_S_POSN

	        LOCAL __PRINT_COM
	        LOCAL __BOLD
	        LOCAL __BOLD_LOOP
	        LOCAL __ITALIC
	        LOCAL __PRINT_EOL1
	        LOCAL __PRINT_EOL2
	        LOCAL __PRINT_AT1
	        LOCAL __PRINT_AT2
	        LOCAL __PRINT_AT2_END
	        LOCAL __PRINT_BOLD
	        LOCAL __PRINT_BOLD2
	        LOCAL __PRINT_ITA
	        LOCAL __PRINT_ITA2
	        LOCAL __PRINT_INK
	        LOCAL __PRINT_PAP
	        LOCAL __PRINT_SET_STATE
	        LOCAL __PRINT_TABLE
	        LOCAL __PRINT_TAB, __PRINT_TAB1, __PRINT_TAB2

__PRINT_TABLE:    ; Jump table for 0 .. 22 codes

	        DW __PRINT_NOP    ;  0
	        DW __PRINT_NOP    ;  1
	        DW __PRINT_NOP    ;  2
	        DW __PRINT_NOP    ;  3
	        DW __PRINT_NOP    ;  4
	        DW __PRINT_NOP    ;  5
	        DW __PRINT_COM    ;  6 COMMA
	        DW __PRINT_NOP    ;  7
	        DW __PRINT_DEL    ;  8 DEL
	        DW __PRINT_NOP    ;  9
	        DW __PRINT_NOP    ; 10
	        DW __PRINT_NOP    ; 11
	        DW __PRINT_NOP    ; 12
	        DW __PRINT_0Dh    ; 13
	        DW __PRINT_BOLD   ; 14
	        DW __PRINT_ITA    ; 15
	        DW __PRINT_INK    ; 16
	        DW __PRINT_PAP    ; 17
	        DW __PRINT_FLA    ; 18
	        DW __PRINT_BRI    ; 19
	        DW __PRINT_INV    ; 20
	        DW __PRINT_OVR    ; 21
	        DW __PRINT_AT     ; 22 AT
	        DW __PRINT_TAB    ; 23 TAB

	        ENDP


#line 3 "copy_attr.asm"
#line 4 "C:/zxbasic/library-asm/copy_attr.asm"



COPY_ATTR:
		; Just copies current permanent attribs to temporal attribs
		; and sets print mode
		PROC

		LOCAL INVERSE1
		LOCAL __REFRESH_TMP

	INVERSE1 EQU 02Fh

		ld hl, (ATTR_P)
		ld (ATTR_T), hl

		ld hl, FLAGS2
		call __REFRESH_TMP

		ld hl, P_FLAG
		call __REFRESH_TMP


__SET_ATTR_MODE:		; Another entry to set print modes. A contains (P_FLAG)


		LOCAL TABLE
		LOCAL CONT2

		rra					; Over bit to carry
		ld a, (FLAGS2)
		rla					; Over bit in bit 1, Over2 bit in bit 2
		and 3				; Only bit 0 and 1 (OVER flag)

		ld c, a
		ld b, 0

		ld hl, TABLE
		add hl, bc
		ld a, (hl)
		ld (PRINT_MODE), a

		ld hl, (P_FLAG)
		xor a			; NOP -> INVERSE0
		bit 2, l
		jr z, CONT2
		ld a, INVERSE1 	; CPL -> INVERSE1

CONT2:
		ld (INVERSE_MODE), a
		ret

TABLE:
		nop				; NORMAL MODE
		xor (hl)		; OVER 1 MODE
		and (hl)		; OVER 2 MODE
		or  (hl)		; OVER 3 MODE

#line 65 "C:/zxbasic/library-asm/copy_attr.asm"

__REFRESH_TMP:
		ld a, (hl)
		and 10101010b
		ld c, a
		rra
		or c
		ld (hl), a
		ret

		ENDP

#line 14291 "Program.zxbas"
#line 1 "div32.asm"

#line 1 "neg32.asm"

__ABS32:
		bit 7, d
		ret z

__NEG32: ; Negates DEHL (Two's complement)
		ld a, l
		cpl
		ld l, a

		ld a, h
		cpl
		ld h, a

		ld a, e
		cpl
		ld e, a

		ld a, d
		cpl
		ld d, a

		inc l
		ret nz

		inc h
		ret nz

		inc de
		ret

#line 2 "div32.asm"

				 ; ---------------------------------------------------------
__DIVU32:    ; 32 bit unsigned division
	             ; DEHL = Dividend, Stack Top = Divisor
	             ; OPERANDS P = Dividend, Q = Divisor => OPERATION => P / Q
				 ;
				 ; Changes A, BC DE HL B'C' D'E' H'L'
				 ; ---------------------------------------------------------
	        exx
	        pop hl   ; return address
	        pop de   ; low part
	        ex (sp), hl ; CALLEE Convention ; H'L'D'E' => Dividend

__DIVU32START: ; Performs D'E'H'L' / HLDE
	        ; Now switch to DIVIDEND = B'C'BC / DIVISOR = D'E'DE (A / B)
	        push de ; push Lowpart(Q)
			ex de, hl	; DE = HL
	        ld hl, 0
	        exx
	        ld b, h
	        ld c, l
	        pop hl
	        push de
	        ex de, hl
	        ld hl, 0        ; H'L'HL = 0
	        exx
	        pop bc          ; Pop HightPart(B) => B = B'C'BC
	        exx

	        ld a, 32 ; Loop count

__DIV32LOOP:
	        sll c  ; B'C'BC << 1 ; Output most left bit to carry
	        rl  b
	        exx
	        rl c
	        rl b
	        exx

	        adc hl, hl
	        exx
	        adc hl, hl
	        exx

	        sbc hl,de
	        exx
	        sbc hl,de
	        exx
	        jp nc, __DIV32NOADD	; use JP inside a loop for being faster

	        add hl, de
	        exx
	        adc hl, de
	        exx
	        dec bc

__DIV32NOADD:
	        dec a
	        jp nz, __DIV32LOOP	; use JP inside a loop for being faster
	        ; At this point, quotient is stored in B'C'BC and the reminder in H'L'HL

	        push hl
	        exx
	        pop de
	        ex de, hl ; D'E'H'L' = 32 bits modulus
	        push bc
	        exx
	        pop de    ; DE = B'C'
	        ld h, b
	        ld l, c   ; DEHL = quotient D'E'H'L' = Modulus

	        ret     ; DEHL = quotient, D'E'H'L' = Modulus



__MODU32:    ; 32 bit modulus for 32bit unsigned division
	             ; DEHL = Dividend, Stack Top = Divisor (DE, HL)

	        exx
	        pop hl   ; return address
	        pop de   ; low part
	        ex (sp), hl ; CALLEE Convention ; H'L'D'E' => Dividend

	        call __DIVU32START	; At return, modulus is at D'E'H'L'

__MODU32START:

			exx
			push de
			push hl

			exx
			pop hl
			pop de

			ret


__DIVI32:    ; 32 bit signed division
	             ; DEHL = Dividend, Stack Top = Divisor
	             ; A = Dividend, B = Divisor => A / B
	        exx
	        pop hl   ; return address
	        pop de   ; low part
	        ex (sp), hl ; CALLEE Convention ; H'L'D'E' => Dividend

__DIVI32START:
			exx
			ld a, d	 ; Save sign
			ex af, af'
			bit 7, d ; Negative?
			call nz, __NEG32 ; Negates DEHL

			exx		; Now works with H'L'D'E'
			ex af, af'
			xor h
			ex af, af'  ; Stores sign of the result for later

			bit 7, h ; Negative?
			ex de, hl ; HLDE = DEHL
			call nz, __NEG32
			ex de, hl

			call __DIVU32START
			ex af, af' ; Recovers sign
			and 128	   ; positive?
			ret z

			jp __NEG32 ; Negates DEHL and returns from there


__MODI32:	; 32bits signed division modulus
			exx
	        pop hl   ; return address
	        pop de   ; low part
	        ex (sp), hl ; CALLEE Convention ; H'L'D'E' => Dividend

			call __DIVI32START
			jp __MODU32START

#line 14292 "Program.zxbas"
#line 1 "div8.asm"

				; --------------------------------
__DIVU8:	; 8 bit unsigned integer division
				; Divides (Top of stack, High Byte) / A
		pop hl	; --------------------------------
		ex (sp), hl	; CALLEE

__DIVU8_FAST:	; Does A / H
		ld l, h
		ld h, a		; At this point do H / L

		ld b, 8
		xor a		; A = 0, Carry Flag = 0

__DIV8LOOP:
		sla	h
		rla
		cp	l
		jr	c, __DIV8NOSUB
		sub	l
		inc	h

__DIV8NOSUB:
		djnz __DIV8LOOP

		ld	l, a		; save remainder
		ld	a, h		;

		ret			; a = Quotient,


					; --------------------------------
__DIVI8:		; 8 bit signed integer division Divides (Top of stack) / A
		pop hl		; --------------------------------
		ex (sp), hl

__DIVI8_FAST:
		ld e, a		; store operands for later
		ld c, h

		or a		; negative?
		jp p, __DIV8A
		neg			; Make it positive

__DIV8A:
		ex af, af'
		ld a, h
		or a
		jp p, __DIV8B
		neg
		ld h, a		; make it positive

__DIV8B:
		ex af, af'

		call __DIVU8_FAST

		ld a, c
		xor l		; bit 7 of A = 1 if result is negative

		ld a, h		; Quotient
		ret p		; return if positive

		neg
		ret


__MODU8:		; 8 bit module. REturns A mod (Top of stack) (unsigned operands)
		pop hl
		ex (sp), hl	; CALLEE

__MODU8_FAST:	; __FASTCALL__ entry
		call __DIVU8_FAST
		ld a, l		; Remainder

		ret		; a = Modulus


__MODI8:		; 8 bit module. REturns A mod (Top of stack) (For singed operands)
		pop hl
		ex (sp), hl	; CALLEE

__MODI8_FAST:	; __FASTCALL__ entry
		call __DIVI8_FAST
		ld a, l		; remainder

		ret		; a = Modulus

#line 14293 "Program.zxbas"
#line 1 "eq16.asm"

__EQ16:	; Test if 16bit values HL == DE
		; Returns result in A: 0 = False, FF = True
			xor a	; Reset carry flag
			sbc hl, de
			ret nz
			inc a
			ret

#line 14294 "Program.zxbas"

#line 1 "ftou32reg.asm"



__FTOU32REG:	; Converts a Float to (un)signed 32 bit integer (NOTE: It's ALWAYS 32 bit signed)
					; Input FP number in A EDCB (A exponent, EDCB mantissa)
				; Output: DEHL 32 bit number (signed)
		PROC

		LOCAL __IS_FLOAT
		LOCAL __NEGATE

		or a
		jr nz, __IS_FLOAT
		; Here if it is a ZX ROM Integer

		ld h, c
		ld l, d
	ld a, e	 ; Takes sign: FF = -, 0 = +
		ld de, 0
		inc a
		jp z, __NEG32	; Negates if negative
		ret

__IS_FLOAT:  ; Jumps here if it is a true floating point number
		ld h, e
		push hl  ; Stores it for later (Contains Sign in H)

		push de
		push bc

		exx
		pop de   ; Loads mantissa into C'B' E'D'
		pop bc	 ;

		set 7, c ; Highest mantissa bit is always 1
		exx

		ld hl, 0 ; DEHL = 0
		ld d, h
		ld e, l

		;ld a, c  ; Get exponent
		sub 128  ; Exponent -= 128
		jr z, __FTOU32REG_END	; If it was <= 128, we are done (Integers must be > 128)
		jr c, __FTOU32REG_END	; It was decimal (0.xxx). We are done (return 0)

		ld b, a  ; Loop counter = exponent - 128

__FTOU32REG_LOOP:
		exx 	 ; Shift C'B' E'D' << 1, output bit stays in Carry
		sla d
		rl e
		rl b
		rl c

	    exx		 ; Shift DEHL << 1, inserting the carry on the right
		rl l
		rl h
		rl e
		rl d

		djnz __FTOU32REG_LOOP

__FTOU32REG_END:
		pop af   ; Take the sign bit
		or a	 ; Sets SGN bit to 1 if negative
		jp m, __NEGATE ; Negates DEHL

		ret

__NEGATE:
	    exx
	    ld a, d
	    or e
	    or b
	    or c
	    exx
	    jr z, __END
	    inc l
	    jr nz, __END
	    inc h
	    jr nz, __END
	    inc de
	LOCAL __END
__END:
	    jp __NEG32
		ENDP


__FTOU8:	; Converts float in C ED LH to Unsigned byte in A
		call __FTOU32REG
		ld a, l
		ret

#line 14296 "Program.zxbas"
#line 1 "gtf.asm"

#line 1 "u32tofreg.asm"


__I8TOFREG:
		ld l, a
		rlca
		sbc a, a	; A = SGN(A)
		ld h, a
		ld e, a
		ld d, a

__I32TOFREG:	; Converts a 32bit signed integer (stored in DEHL)
					; to a Floating Point Number returned in (A ED CB)

		ld a, d
		or a		; Test sign

		jp p, __U32TOFREG	; It was positive, proceed as 32bit unsigned

		call __NEG32		; Convert it to positive
		call __U32TOFREG	; Convert it to Floating point

		set 7, e			; Put the sign bit (negative) in the 31bit of mantissa
		ret

__U8TOFREG:
					; Converts an unsigned 8 bit (A) to Floating point
		ld l, a
		ld h, 0
		ld e, h
		ld d, h

__U32TOFREG:	; Converts an unsigned 32 bit integer (DEHL)
					; to a Floating point number returned in A ED CB

	    PROC

	    LOCAL __U32TOFREG_END

		ld a, d
		or e
		or h
		or l
	    ld b, d
		ld c, e		; Returns 00 0000 0000 if ZERO
		ret z

		push de
		push hl

		exx
		pop de  ; Loads integer into B'C' D'E'
		pop bc
		exx

		ld l, 128	; Exponent
		ld bc, 0	; DEBC = 0
		ld d, b
		ld e, c

__U32TOFREG_LOOP: ; Also an entry point for __F16TOFREG
		exx
		ld a, d 	; B'C'D'E' == 0 ?
		or e
		or b
		or c
		jp z, __U32TOFREG_END	; We are done

		srl b ; Shift B'C' D'E' >> 1, output bit stays in Carry
		rr c
		rr d
		rr e
		exx

		rr e ; Shift EDCB >> 1, inserting the carry on the left
		rr d
		rr c
		rr b

		inc l	; Increment exponent
		jp __U32TOFREG_LOOP


__U32TOFREG_END:
		exx
	    ld a, l     ; Puts the exponent in a
		res 7, e	; Sets the sign bit to 0 (positive)

		ret
	    ENDP

#line 2 "gtf.asm"



	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)

	; All of them uses A EDCB registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order A DE BC.
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__GTF:	; A > B
		call __FPSTACK_PUSH2 ; ENTERS B, A

		; ------------- ROM NOS-GRTR
		ld b, 0Dh	; B < A
		rst 28h
		defb 0Dh	; B < A
		defb 38h;   ; END CALC

		call __FPSTACK_POP
		jp __FTOU8; Convert to 8 bits

#line 14297 "Program.zxbas"

#line 1 "inkey.asm"

	; INKEY Function
	; Returns a string allocated in dynamic memory
	; containing the string.
	; An empty string otherwise.



INKEY:
		PROC
		LOCAL __EMPTY_INKEY
		LOCAL KEY_SCAN
		LOCAL KEY_TEST
		LOCAL KEY_CODE

		ld bc, 3	; 1 char length string
		call __MEM_ALLOC

		ld a, h
		or l
		ret z	; Return if NULL (No memory)

		push hl ; Saves memory pointer

		call KEY_SCAN
		jp nz, __EMPTY_INKEY

		call KEY_TEST
		jp nc, __EMPTY_INKEY

		dec d	; D is expected to be FLAGS so set bit 3 $FF
				; 'L' Mode so no keywords.
		ld e, a	; main key to A
				; C is MODE 0 'KLC' from above still.
		call KEY_CODE ; routine K-DECODE
		pop hl

		ld (hl), 1
		inc hl
		ld (hl), 0
		inc hl
		ld (hl), a
		dec hl
		dec hl	; HL Points to string result
		ret

__EMPTY_INKEY:
		pop hl
		xor a
		ld (hl), a
		inc hl
		ld (hl), a
		dec hl
		ret

	KEY_SCAN	EQU 028Eh
	KEY_TEST	EQU 031Eh
	KEY_CODE	EQU 0333h

		ENDP

#line 14299 "Program.zxbas"
#line 1 "lei32.asm"


#line 1 "sub32.asm"

	; SUB32
	; Perform TOP of the stack - DEHL
	; Pops operand out of the stack (CALLEE)
	; and returns result in DEHL. Carry an Z are set correctly

__SUB32:
		exx
		pop bc		; saves return address in BC'
		exx

		or a        ; clears carry flag
		ld b, h     ; Operands come reversed => BC <- HL,  HL = HL - BC
		ld c, l
		pop hl
		sbc hl, bc
		ex de, hl

		ld b, h	    ; High part (DE) now in HL. Repeat operation
		ld c, l
		pop hl
		sbc hl, bc
		ex de, hl   ; DEHL now has de 32 bit result

		exx
		push bc		; puts return address back
		exx
		ret
#line 3 "lei32.asm"

__LEI32: ; Test 32 bit values Top of the stack <= HL,DE
	    PROC
	    LOCAL checkParity
	    exx
	    pop de ; Preserves return address
	    exx

	    call __SUB32

	    exx
	    push de ; Puts return address back
	    exx

	    ex af, af'
	    ld a, h
	    or l
	    or e
	    or d
	    ld a, 1
	    ret z

	    ex af, af'
	    jp po, checkParity
	    ld a, d
	    xor 0x80
checkParity:
	    ld a, 0     ; False
	    ret p
	    inc a       ; True
	    ret
	    ENDP
#line 14300 "Program.zxbas"
#line 1 "lei8.asm"

__LEI8: ; Signed <= comparison for 8bit int
	        ; A <= H (registers)
	    PROC
	    LOCAL checkParity
	    sub h
	    jr nz, __LTI
	    inc a
	    ret

__LTI8:  ; Test 8 bit values A < H
	    sub h

__LTI:   ; Generic signed comparison
	    jp po, checkParity
	    xor 0x80
checkParity:
	    ld a, 0     ; False
	    ret p
	    inc a       ; True
	    ret
	    ENDP
#line 14301 "Program.zxbas"
#line 1 "loadstr.asm"



	; Loads a string (ptr) from HL
	; and duplicates it on dynamic memory again
	; Finally, it returns result pointer in HL

__ILOADSTR:		; This is the indirect pointer entry HL = (HL)
			ld a, h
			or l
			ret z
			ld a, (hl)
			inc hl
			ld h, (hl)
			ld l, a

__LOADSTR:		; __FASTCALL__ entry
			ld a, h
			or l
			ret z	; Return if NULL

			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl  ; BC = LEN(a$)

			inc bc
			inc bc	; BC = LEN(a$) + 2 (two bytes for length)

			push hl
			push bc
			call __MEM_ALLOC
			pop bc  ; Recover length
			pop de  ; Recover origin

			ld a, h
			or l
			ret z	; Return if NULL (No memory)

			ex de, hl ; ldir takes HL as source, DE as destiny, so SWAP HL,DE
			push de	; Saves destiny start
			ldir	; Copies string (length number included)
			pop hl	; Recovers destiny in hl as result
			ret
#line 14302 "Program.zxbas"
#line 1 "ltf.asm"





	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)

	; All of them uses A EDCB registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order A HL BC.
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__LTF:	; A < B
		call __FPSTACK_PUSH2 ; Enters B, A

		; ------------- ROM NOS-LESS
		ld b, 0Ch	; A > B (Operands stack-reversed)
		rst 28h
		defb 0Ch;	; A > B
		defb 38h;   ; END CALC

		call __FPSTACK_POP
		jp __FTOU8 ; Convert to 8 bits

#line 14303 "Program.zxbas"
#line 1 "lti32.asm"




__LTI32: ; Test 32 bit values in Top of the stack < HLDE
	    PROC
	    LOCAL checkParity
	    exx
	    pop de ; Preserves return address
	    exx

	    call __SUB32

	    exx
	    push de ; Restores return address
	    exx

	    jp po, checkParity
	    ld a, d
	    xor 0x80
checkParity:
	    ld a, 0     ; False
	    ret p
	    inc a       ; True
	    ret
	    ENDP
#line 14304 "Program.zxbas"
#line 1 "lti8.asm"


#line 14305 "Program.zxbas"
#line 1 "mul32.asm"

#line 1 "_mul32.asm"


; Ripped from: http://www.andreadrian.de/oldcpu/z80_number_cruncher.html#moztocid784223
	; Used with permission.
	; Multiplies 32x32 bit integer (DEHL x D'E'H'L')
	; 64bit result is returned in H'L'H L B'C'A C


__MUL32_64START:
			push hl
			exx
			ld b, h
			ld c, l		; BC = Low Part (A)
			pop hl		; HL = Load Part (B)
			ex de, hl	; DE = Low Part (B), HL = HightPart(A) (must be in B'C')
			push hl

			exx
			pop bc		; B'C' = HightPart(A)
			exx			; A = B'C'BC , B = D'E'DE

				; multiply routine 32 * 32bit = 64bit
				; h'l'hlb'c'ac = b'c'bc * d'e'de
				; needs register a, changes flags
				;
				; this routine was with tiny differences in the
				; sinclair zx81 rom for the mantissa multiply

__LMUL:
	        and     a               ; reset carry flag
	        sbc     hl,hl           ; result bits 32..47 = 0
	        exx
	        sbc     hl,hl           ; result bits 48..63 = 0
	        exx
	        ld      a,b             ; mpr is b'c'ac
	        ld      b,33            ; initialize loop counter
	        jp      __LMULSTART

__LMULLOOP:
	        jr      nc,__LMULNOADD  ; JP is 2 cycles faster than JR. Since it's inside a LOOP
	                                ; it can save up to 33 * 2 = 66 cycles
	                                ; But JR if 3 cycles faster if JUMP not taken!
	        add     hl,de           ; result += mpd
	        exx
	        adc     hl,de
	        exx

__LMULNOADD:
	        exx
	        rr      h               ; right shift upper
	        rr      l               ; 32bit of result
	        exx
	        rr      h
	        rr      l

__LMULSTART:
	        exx
	        rr      b               ; right shift mpr/
	        rr      c               ; lower 32bit of result
	        exx
	        rra                     ; equivalent to rr a
	        rr      c
	        djnz    __LMULLOOP

			ret						; result in h'l'hlb'c'ac

#line 2 "mul32.asm"

__MUL32:	; multiplies 32 bit un/signed integer.
				; First operand stored in DEHL, and 2nd onto stack
				; Lowest part of 2nd operand on top of the stack
				; returns the result in DE.HL
			exx
			pop hl	; Return ADDRESS
			pop de	; Low part
			ex (sp), hl ; CALLEE -> HL = High part
			ex de, hl
			call __MUL32_64START

__TO32BIT:  ; Converts H'L'HLB'C'AC to DEHL (Discards H'L'HL)
			exx
			push bc
			exx
			pop de
			ld h, a
			ld l, c
			ret


#line 14306 "Program.zxbas"
#line 1 "mul8.asm"

__MUL8:		; Performs 8bit x 8bit multiplication
		PROC

		;LOCAL __MUL8A
		LOCAL __MUL8LOOP
		LOCAL __MUL8B
				; 1st operand (byte) in A, 2nd operand into the stack (AF)
		pop hl	; return address
		ex (sp), hl ; CALLE convention

;;__MUL8_FAST: ; __FASTCALL__ entry
	;;	ld e, a
	;;	ld d, 0
	;;	ld l, d
	;;
	;;	sla h
	;;	jr nc, __MUL8A
	;;	ld l, e
	;;
;;__MUL8A:
	;;
	;;	ld b, 7
;;__MUL8LOOP:
	;;	add hl, hl
	;;	jr nc, __MUL8B
	;;
	;;	add hl, de
	;;
;;__MUL8B:
	;;	djnz __MUL8LOOP
	;;
	;;	ld a, l ; result = A and HL  (Truncate to lower 8 bits)

__MUL8_FAST: ; __FASTCALL__ entry, a = a * h (8 bit mul) and Carry

	    ld b, 8
	    ld l, a
	    xor a

__MUL8LOOP:
	    add a, a ; a *= 2
	    sla l
	    jp nc, __MUL8B
	    add a, h

__MUL8B:
	    djnz __MUL8LOOP

		ret		; result = HL
		ENDP

#line 14307 "Program.zxbas"
#line 1 "mulf.asm"



	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)
	; All of them uses A EDCB registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order A DE BC.
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__MULF:	; Multiplication
		call __FPSTACK_PUSH2

		; ------------- ROM MUL
		rst 28h
		defb 04h	;
		defb 38h;   ; END CALC

		jp __FPSTACK_POP

#line 14308 "Program.zxbas"
#line 1 "negf.asm"





	; -------------------------------------------------------------
	; Floating point library using the FP ROM Calculator (ZX 48K)

	; All of them uses C EDHL registers as 1st paramter.
	; For binary operators, the 2n operator must be pushed into the
	; stack, in the order BC DE HL (B not used).
	;
	; Uses CALLEE convention
	; -------------------------------------------------------------

__NEGF:	; A = -A
		call __FPSTACK_PUSH

		; ------------- ROM NEGATE
		rst 28h
		defb 1Bh	; NEGF
		defb 38h;   ; END CALC

		jp __FPSTACK_POP


#line 14309 "Program.zxbas"

#line 1 "pause.asm"

	; The PAUSE statement (Calling the ROM)

__PAUSE:
		ld b, h
	    ld c, l
	    jp 1F3Dh  ; PAUSE_1
#line 14311 "Program.zxbas"
#line 1 "ploadf.asm"

	; Parameter / Local var load
	; A => Offset
	; IX = Stack Frame
; RESULT: HL => IX + DE

#line 1 "iloadf.asm"

	; __FASTCALL__ routine which
	; loads a 40 bits floating point into A ED CB
	; stored at position pointed by POINTER HL
	;A DE, BC <-- ((HL))

__ILOADF:
	    ld a, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, a

	; __FASTCALL__ routine which
	; loads a 40 bits floating point into A ED CB
	; stored at position pointed by POINTER HL
	;A DE, BC <-- (HL)

__LOADF:    ; Loads a 40 bits FP number from address pointed by HL
		ld a, (hl)
		inc hl
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
		ld c, (hl)
		inc hl
		ld b, (hl)
		ret

#line 7 "ploadf.asm"

__PLOADF:
	    push ix
	    pop hl
	    add hl, de
	    jp __LOADF

#line 14312 "Program.zxbas"

#line 1 "print_eol_attr.asm"

	; Calls PRINT_EOL and then COPY_ATTR, so saves
	; 3 bytes




PRINT_EOL_ATTR:
		call PRINT_EOL
		jp COPY_ATTR
#line 14314 "Program.zxbas"
#line 1 "printstr.asm"






	; PRINT command routine
	; Prints string pointed by HL

PRINT_STR:
__PRINTSTR:		; __FASTCALL__ Entry to print_string
			PROC
			LOCAL __PRINT_STR_LOOP
	        LOCAL __PRINT_STR_END

	        ld d, a ; Saves A reg (Flag) for later

			ld a, h
			or l
			ret z	; Return if the pointer is NULL

	        push hl

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl	; BC = LEN(a$); HL = &a$

__PRINT_STR_LOOP:
			ld a, b
			or c
			jr z, __PRINT_STR_END 	; END if BC (counter = 0)

			ld a, (hl)
			call __PRINTCHAR
			inc hl
			dec bc
			jp __PRINT_STR_LOOP

__PRINT_STR_END:
	        pop hl
	        ld a, d ; Recovers A flag
	        or a   ; If not 0 this is a temporary string. Free it
	        ret z
	        jp __MEM_FREE ; Frees str from heap and return from there

__PRINT_STR:
	        ; Fastcall Entry
	        ; It ONLY prints strings
	        ; HL = String start
	        ; BC = String length (Number of chars)
	        push hl ; Push str address for later
	        ld d, a ; Saves a FLAG
	        jp __PRINT_STR_LOOP

			ENDP

#line 14315 "Program.zxbas"
#line 1 "pstoref.asm"

	; Stores FP number in A ED CB at location HL+IX
	; HL = Offset
	; IX = Stack Frame
	; A ED CB = FP Number

#line 1 "storef.asm"

__PISTOREF:	; Indect Stores a float (A, E, D, C, B) at location stored in memory, pointed by (IX + HL)
			push de
			ex de, hl	; DE <- HL
			push ix
			pop hl		; HL <- IX
			add hl, de  ; HL <- IX + HL
			pop de

__ISTOREF:  ; Load address at hl, and stores A,E,D,C,B registers at that address. Modifies A' register
	        ex af, af'
			ld a, (hl)
			inc hl
			ld h, (hl)
			ld l, a     ; HL = (HL)
	        ex af, af'

__STOREF:	; Stores the given FP number in A EDCB at address HL
			ld (hl), a
			inc hl
			ld (hl), e
			inc hl
			ld (hl), d
			inc hl
			ld (hl), c
			inc hl
			ld (hl), b
			ret

#line 7 "pstoref.asm"

	; Stored a float number in A ED CB into the address pointed by IX + HL
__PSTOREF:
		push de
	    ex de, hl  ; DE <- HL
	    push ix
		pop hl	   ; HL <- IX
	    add hl, de ; HL <- IX + DE
		pop de
	    jp __STOREF

#line 14316 "Program.zxbas"
#line 1 "pstorestr.asm"

; vim:ts=4:et:sw=4
	;
	; Stores an string (pointer to the HEAP by DE) into the address pointed
	; by (IX + BC). A new copy of the string is created into the HEAP
	;

#line 1 "storestr.asm"

; vim:ts=4:et:sw=4
	; Stores value of current string pointed by DE register into address pointed by HL
	; Returns DE = Address pointer  (&a$)
	; Returns HL = HL               (b$ => might be needed later to free it from the heap)
	;
	; e.g. => HL = _variableName    (DIM _variableName$)
	;         DE = Address into the HEAP
	;
	; This function will resize (REALLOC) the space pointed by HL
	; before copying the content of b$ into a$


#line 1 "strcpy.asm"

#line 1 "realloc.asm"

; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.







	; ---------------------------------------------------------------------
	; MEM_REALLOC
	;  Reallocates a block of memory in the heap.
	;
	; Parameters
	;  HL = Pointer to the original block
	;  BC = New Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	;
; Notes:
	;  If BC = 0, the block is freed, otherwise
	;  the content of the original block is copied to the new one, and
	;  the new size is adjusted. If BC < original length, the content
	;  will be truncated. Otherwise, extra block content might contain
	;  memory garbage.
	;
	; ---------------------------------------------------------------------
__REALLOC:    ; Reallocates block pointed by HL, with new length BC
	        PROC

	        LOCAL __REALLOC_END

	        ld a, h
	        or l
	        jp z, __MEM_ALLOC    ; If HL == NULL, just do a malloc

	        ld e, (hl)
	        inc hl
	        ld d, (hl)    ; DE = First 2 bytes of HL block

	        push hl
	        exx
	        pop de
	        inc de        ; DE' <- HL + 2
	        exx            ; DE' <- HL (Saves current pointer into DE')

	        dec hl        ; HL = Block start

	        push de
	        push bc
	        call __MEM_FREE        ; Frees current block
	        pop bc
	        push bc
	        call __MEM_ALLOC    ; Gets a new block of length BC
	        pop bc
	        pop de

	        ld a, h
	        or l
	        ret z        ; Return if HL == NULL (No memory)

	        ld (hl), e
	        inc hl
	        ld (hl), d
	        inc hl        ; Recovers first 2 bytes in HL

	        dec bc
	        dec bc        ; BC = BC - 2 (Two bytes copied)

	        ld a, b
	        or c
	        jp z, __REALLOC_END        ; Ret if nothing to copy (BC == 0)

	        exx
	        push de
	        exx
	        pop de        ; DE <- DE' ; Start of remaining block

	        push hl        ; Saves current Block + 2 start
        ex de, hl    ; Exchanges them: DE is destiny block
	        ldir        ; Copies BC Bytes
	        pop hl        ; Recovers Block + 2 start

__REALLOC_END:

	        dec hl        ; Set HL
	        dec hl        ; To begin of block
	        ret

	        ENDP

#line 2 "strcpy.asm"

	; String library


__STRASSIGN: ; Performs a$ = b$ (HL = address of a$; DE = Address of b$)
			PROC

			LOCAL __STRREALLOC
			LOCAL __STRCONTINUE
			LOCAL __B_IS_NULL
			LOCAL __NOTHING_TO_COPY

			ld b, d
			ld c, e
			ld a, b
			or c
			jr z, __B_IS_NULL

			ex de, hl
			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl		; BC = LEN(b$)
			ex de, hl	; DE = &b$

__B_IS_NULL:		; Jumps here if B$ pointer is NULL
			inc bc
			inc bc		; BC = BC + 2  ; (LEN(b$) + 2 bytes for storing length)

			push de
			push hl

			ld a, h
			or l
			jr z, __STRREALLOC

			dec hl
			ld d, (hl)
			dec hl
			ld e, (hl)	; DE = MEMBLOCKSIZE(a$)
			dec de
			dec de		; DE = DE - 2  ; (Membloksize takes 2 bytes for memblock length)

			ld h, b
			ld l, c		; HL = LEN(b$) + 2  => Minimum block size required
			ex de, hl	; Now HL = BLOCKSIZE(a$), DE = LEN(b$) + 2

			or a		; Prepare to subtract BLOCKSIZE(a$) - LEN(b$)
			sbc hl, de  ; Carry if len(b$) > Blocklen(a$)
			jr c, __STRREALLOC ; No need to realloc
			; Need to reallocate at least to len(b$) + 2
			ex de, hl	; DE = Remaining bytes in a$ mem block.
			ld hl, 4
			sbc hl, de  ; if remaining bytes < 4 we can continue
			jr nc,__STRCONTINUE ; Otherwise, we realloc, to free some bytes

__STRREALLOC:
			pop hl
			call __REALLOC	; Returns in HL a new pointer with BC bytes allocated
			push hl

__STRCONTINUE:	;   Pops hl and de SWAPPED
			pop de	;	DE = &a$
			pop hl	; 	HL = &b$

			ld a, d		; Return if not enough memory for new length
			or e
			ret z		; Return if DE == NULL (0)

__STRCPY:	; Copies string pointed by HL into string pointed by DE
				; Returns DE as HL (new pointer)
			ld a, h
			or l
			jr z, __NOTHING_TO_COPY
			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl
			inc bc
			inc bc
			push de
			ldir
			pop hl
			ret

__NOTHING_TO_COPY:
			ex de, hl
			ld (hl), e
			inc hl
			ld (hl), d
			dec hl
			ret

			ENDP

#line 14 "storestr.asm"

__PISTORE_STR:          ; Indirect assignement at (IX + BC)
	    push ix
	    pop hl
	    add hl, bc

__ISTORE_STR:           ; Indirect assignement, hl point to a pointer to a pointer to the heap!
	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c             ; HL = (HL)

__STORE_STR:
	    push de             ; Pointer to b$
	    push hl             ; Array pointer to variable memory address

	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c             ; HL = (HL)

	    call __STRASSIGN    ; HL (a$) = DE (b$); HL changed to a new dynamic memory allocation
	    ex de, hl           ; DE = new address of a$
	    pop hl              ; Recover variable memory address pointer

	    ld (hl), e
	    inc hl
	    ld (hl), d          ; Stores a$ ptr into elemem ptr

	    pop hl              ; Returns ptr to b$ in HL (Caller might needed to free it from memory)
	    ret

#line 8 "pstorestr.asm"

__PSTORE_STR:
	    push ix
	    pop hl
	    add hl, bc
	    jp __STORE_STR

#line 14317 "Program.zxbas"
#line 1 "pstorestr2.asm"

; vim:ts=4:et:sw=4
	;
	; Stores an string (pointer to the HEAP by DE) into the address pointed
	; by (IX + BC). No new copy of the string is created into the HEAP, since
	; it's supposed it's already created (temporary string)
	;

#line 1 "storestr2.asm"

	; Similar to __STORE_STR, but this one is called when
	; the value of B$ if already duplicated onto the stack.
	; So we needn't call STRASSING to create a duplication
	; HL = address of string memory variable
	; DE = address of 2n string. It just copies DE into (HL)
	; 	freeing (HL) previously.



__PISTORE_STR2: ; Indirect store temporary string at (IX + BC)
	    push ix
	    pop hl
	    add hl, bc

__ISTORE_STR2:
		ld c, (hl)  ; Dereferences HL
		inc hl
		ld h, (hl)
		ld l, c		; HL = *HL (real string variable address)

__STORE_STR2:
		push hl
		ld c, (hl)
		inc hl
		ld h, (hl)
		ld l, c		; HL = *HL (real string address)

		push de
		call __MEM_FREE
		pop de

		pop hl
		ld (hl), e
		inc hl
		ld (hl), d
		dec hl		; HL points to mem address variable. This might be useful in the future.

		ret

#line 9 "pstorestr2.asm"

__PSTORE_STR2:
	    push ix
	    pop hl
	    add hl, bc
	    jp __STORE_STR2

#line 14318 "Program.zxbas"
#line 1 "random.asm"

	; RANDOM functions

RANDOMIZE:
	    ; Randomize with 32 bit seed in DE HL
	    ; if SEED = 0, calls ROM to take frames as seed
	    PROC

	    LOCAL TAKE_FRAMES
	    LOCAL FRAMES

	    ld a, h
	    or l
	    or d
	    or e
	    jr z, TAKE_FRAMES

	    ld (RANDOM_SEED_LOW), hl
	    ld (RANDOM_SEED_HIGH), de
	    ret

TAKE_FRAMES:
	    ; Takes the seed from frames
	    ld hl, (FRAMES)
	    ld (RANDOM_SEED_LOW), hl
	    ld hl, (FRAMES + 2)
	    ld (RANDOM_SEED_HIGH), hl
	    ret

	FRAMES EQU    23672
	    ENDP

	RANDOM_SEED_HIGH EQU RAND+6    ; RANDOM seed, 16 higher bits
	RANDOM_SEED_LOW     EQU 23670  ; RANDOM seed, 16 lower bits


RAND:
	    PROC
	    LOCAL RAND_LOOP
	    ld b, 4
RAND_LOOP:
	    ld  hl,(RANDOM_SEED_LOW)   ; xz -> yw
	    ld  de,0C0DEh   ; yw -> zt
	    ld  (RANDOM_SEED_LOW),de  ; x = y, z = w
	    ld  a,e         ; w = w ^ ( w << 3 )
	    add a,a
	    add a,a
	    add a,a
	    xor e
	    ld  e,a
	    ld  a,h         ; t = x ^ (x << 1)
	    add a,a
	    xor h
	    ld  d,a
	    rra             ; t = t ^ (t >> 1) ^ w
	    xor d
	    xor e
	    ld  h,l         ; y = z
	    ld  l,a         ; w = t
	    ld  (RANDOM_SEED_HIGH),hl
	    push af
	    djnz RAND_LOOP
	    pop af
	    pop af
	    ld d, a
	    pop af
	    ld e, a
	    pop af
	    ld h, a
	    ret
	    ENDP

RND:
	    ; Returns a FLOATING point integer
	    ; using RAND as a mantissa
	    PROC
	    LOCAL RND_LOOP

	    call RAND
	    ; BC = HL since ZX BASIC uses ED CB A registers for FP
	    ld b, h
	    ld c, l

	    ld a, e
	    or d
	    or c
	    or b
	    ret z   ; Returns 0 if BC=DE=0

	    ; We already have a random 32 bit mantissa in ED CB
	    ; From 0001h to FFFFh

	    ld l, 81h	; Exponent
	    ; At this point we have [0 .. 1) FP number;

	    ; Now we must shift mantissa left until highest bit goes into carry
	    ld a, e ; Use A register for rotating E faster (using RLA instead of RL E)
RND_LOOP:
	    dec l
	    sla b
	    rl c
	    rl d
	    rla
	    jp nc, RND_LOOP

	    ; Now undo last mantissa left-shift once
	    ccf ; Clears carry to insert a 0 bit back into mantissa -> positive FP number
	    rra
	    rr d
	    rr c
	    rr b

	    ld e, a     ; E must have the highest byte
	    ld a, l     ; exponent in A
	    ret

	    ENDP

#line 14319 "Program.zxbas"
#line 1 "str.asm"

	; The STR$( ) BASIC function implementation

	; Given a FP number in C ED LH
	; Returns a pointer (in HL) to the memory heap
	; containing the FP number string representation





__STR:

__STR_FAST:

		PROC
		LOCAL __STR_END
		LOCAL RECLAIM2
		LOCAL STK_END

		ld hl, (STK_END)
		push hl; Stores STK_END
		ld hl, (ATTR_T)	; Saves ATTR_T since it's changed by STR$ due to a ROM BUG
		push hl

	    call __FPSTACK_PUSH ; Push number into stack
		rst 28h		; # Rom Calculator
		defb 2Eh	; # STR$(x)
		defb 38h	; # END CALC
		call __FPSTACK_POP ; Recovers string parameters to A ED CB (Only ED LH are important)

		pop hl
		ld (ATTR_T), hl	; Restores ATTR_T
		pop hl
		ld (STK_END), hl	; Balance STK_END to avoid STR$ bug

		push bc
		push de

		inc bc
		inc bc
		call __MEM_ALLOC ; HL Points to new block

		pop de
		pop bc

		push hl
		ld a, h
		or l
		jr z, __STR_END  ; Return if NO MEMORY (NULL)

		push bc
		push de
		ld (hl), c
		inc hl
		ld (hl), b
		inc hl		; Copies length

		ex de, hl	; HL = start of original string
		ldir		; Copies string content

		pop de		; Original (ROM-CALC) string
		pop bc		; Original Length

__STR_END:
		ex de, hl
		inc bc

		call RECLAIM2 ; Frees TMP Memory
		pop hl		  ; String result

		ret

	RECLAIM2 EQU 19E8h
	STK_END EQU 5C65h

		ENDP

#line 14320 "Program.zxbas"
#line 1 "strcat.asm"


#line 1 "strlen.asm"

	; Returns len if a string
	; If a string is NULL, its len is also 0
	; Result returned in HL

__STRLEN:	; Direct FASTCALL entry
			ld a, h
			or l
			ret z

			ld a, (hl)
			inc hl
			ld h, (hl)  ; LEN(str) in HL
			ld l, a
			ret


#line 3 "strcat.asm"

__ADDSTR:	; Implements c$ = a$ + b$
				; hl = &a$, de = &b$ (pointers)


__STRCAT2:	; This routine creates a new string in dynamic space
				; making room for it. Then copies a$ + b$ into it.
				; HL = a$, DE = b$

			PROC

			LOCAL __STR_CONT
			LOCAL __STRCATEND

			push hl
			call __STRLEN
			ld c, l
			ld b, h		; BC = LEN(a$)
			ex (sp), hl ; (SP) = LEN (a$), HL = a$
			push hl		; Saves pointer to a$

			inc bc
			inc bc		; +2 bytes to store length

			ex de, hl
			push hl
			call __STRLEN
			; HL = len(b$)

			add hl, bc	; Total str length => 2 + len(a$) + len(b$)

			ld c, l
			ld b, h		; BC = Total str length + 2
			call __MEM_ALLOC
			pop de		; HL = c$, DE = b$

			ex de, hl	; HL = b$, DE = c$
			ex (sp), hl ; HL = a$, (SP) = b$

			exx
			pop de		; D'E' = b$
			exx

			pop bc		; LEN(a$)

			ld a, d
			or e
		ret z		; If no memory: RETURN

__STR_CONT:
			push de		; Address of c$

			ld a, h
			or l
			jr nz, __STR_CONT1 ; If len(a$) != 0 do copy

	        ; a$ is NULL => uses HL = DE for transfer
			ld h, d
			ld l, e
			ld (hl), a	; This will copy 00 00 at (DE) location
	        inc de      ;
	        dec bc      ; Ensure BC will be set to 1 in the next step

__STR_CONT1:        ; Copies a$ (HL) into c$ (DE)
			inc bc
			inc bc		; BC = BC + 2
		ldir		; MEMCOPY: c$ = a$
			pop hl		; HL = c$

			exx
			push de		; Recovers b$; A ex hl,hl' would be very handy
			exx

			pop de		; DE = b$

__STRCAT: ; ConCATenate two strings a$ = a$ + b$. HL = ptr to a$, DE = ptr to b$
		  ; NOTE: Both DE, BC and AF are modified and lost
			  ; Returns HL (pointer to a$)
			  ; a$ Must be NOT NULL
			ld a, d
			or e
			ret z		; Returns if de is NULL (nothing to copy)

			push hl		; Saves HL to return it later

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl
			add hl, bc	; HL = end of (a$) string ; bc = len(a$)
			push bc		; Saves LEN(a$) for later

			ex de, hl	; DE = end of string (Begin of copy addr)
			ld c, (hl)
			inc hl
			ld b, (hl)	; BC = len(b$)

			ld a, b
			or c
			jr z, __STRCATEND; Return if len(b$) == 0

			push bc			 ; Save LEN(b$)
			inc hl			 ; Skip 2nd byte of len(b$)
			ldir			 ; Concatenate b$

			pop bc			 ; Recovers length (b$)
			pop hl			 ; Recovers length (a$)
			add hl, bc		 ; HL = LEN(a$) + LEN(b$) = LEN(a$+b$)
			ex de, hl		 ; DE = LEN(a$+b$)
			pop hl

			ld (hl), e		 ; Updates new LEN and return
			inc hl
			ld (hl), d
			dec hl
			ret

__STRCATEND:
			pop hl		; Removes Len(a$)
			pop hl		; Restores original HL, so HL = a$
			ret

			ENDP

#line 14321 "Program.zxbas"
#line 1 "string.asm"

	; String library



__STR_ISNULL:	; Returns A = FF if HL is 0, 0 otherwise
			ld a, h
			or l
			sub 1		; Only CARRY if HL is NULL
			sbc a, a	; Only FF if HL is NULL (0 otherwise)
			ret


__STRCMP:	; Compares strings at HL, DE: Returns 0 if EQual, -1 if HL < DE, +1 if HL > DE
				; A register is preserved and returned in A'
			PROC ; __FASTCALL__

			LOCAL __STRCMPZERO
			LOCAL __STRCMPEXIT
			LOCAL __STRCMPLOOP
			LOCAL __NOPRESERVEBC
			LOCAL __EQULEN
			LOCAL __EQULEN1
			LOCAL __HLZERO

			ex af, af'	; Saves current A register in A' (it's used by STRXX comparison functions)

			ld a, h
			or l
			jr z, __HLZERO

			ld a, d
			or e
			ld a, 1
			ret z		; Returns +1 if HL is not NULL and DE is NULL

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl		; BC = LEN(a$)
			push hl		; HL = &a$, saves it

			ex de, hl
			ld e, (hl)
			inc hl
			ld d, (hl)
			inc hl
			ex de, hl	; HL = LEN(b$), de = &b$

			; At this point Carry is cleared, and A reg. = 1
			sbc hl, bc	; Carry if len(b$) > len(a$)
			jr z, __EQULEN	; Jump if they have the same length so A reg. = 0
			jr c, __EQULEN1 ; Jump if len(b$) > len(a$) so A reg. = 1
__NOPRESERVEBC:
			add hl, bc	; Restore HL (original length)
			ld b, h		; len(b$) <= len(a$)
			ld c, l		; so BC = hl
			dec a		; At this point A register = 0, it must be -1 since len(a$) > len(b$)
__EQULEN:
			dec a		; A = 0 if len(a$) = len(b$), -1 otherwise
__EQULEN1:
			pop hl		; Recovers A$ pointer
			push af		; Saves A for later (Value to return if strings reach the end)
	        ld a, b
	        or c
	        jr z, __STRCMPZERO ; empty string being compared

		; At this point: BC = lesser length, DE and HL points to b$ and a$ chars respectively
__STRCMPLOOP:
			ld a, (de)
			cpi
			jr nz, __STRCMPEXIT ; (HL) != (DE). Examine carry
			jp po, __STRCMPZERO ; END of string (both are equal)
			inc de
			jp __STRCMPLOOP

__STRCMPZERO:
			pop af		; This is -1 if len(a$) < len(b$), +1 if len(b$) > len(a$), 0 otherwise
			ret

__STRCMPEXIT:		; Sets A with the following value
			dec hl		; Get back to the last char
			cp (hl)
			sbc a, a	; A = -1 if carry => (DE) < (HL); 0 otherwise (DE) > (HL)
			cpl			; A = -1 if (HL) < (DE), 0 otherwise
			add a, a    ; A = A * 2 (thus -2 or 0)
			inc a		; A = A + 1 (thus -1 or 1)

			pop bc		; Discard top of the stack
			ret

__HLZERO:
			or d
			or e
			ret z		; Returns 0 (EQ) if HL == DE == NULL
			ld a, -1
			ret			; Returns -1 if HL is NULL and DE is not NULL

			ENDP

			; The following routines perform string comparison operations (<, >, ==, etc...)
			; On return, A will contain 0 for False, other value for True
			; Register A' will determine whether the incoming strings (HL, DE) will be freed
		; from dynamic memory on exit:
			;		Bit 0 => 1 means HL will be freed.
			;		Bit 1 => 1 means DE will be freed.

__STREQ:	; Compares a$ == b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			;inc a		; If A == -1, return 0
			;jp z, __FREE_STR

			;dec a		;
			;dec a		; Return -1 if a = 0 (True), returns 0 if A == 1 (False)
	        sub 1
	        sbc a, a
			jp __FREE_STR


__STRNE:	; Compares a$ != b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			;jp z, __FREE_STR

			;ld a, 0FFh	; Returns 0xFFh (True)
			jp __FREE_STR


__STRLT:	; Compares a$ < b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			jp z, __FREE_STR ; Returns 0 if A == B

			dec a		; Returns 0 if A == 1 => a$ > b$
			;jp z, __FREE_STR

			;inc a		; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRLE:	; Compares a$ <= b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			dec a		; Returns 0 if A == 1 => a$ < b$
			;jp z, __FREE_STR

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRGT:	; Compares a$ > b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			jp z, __FREE_STR		; Returns 0 if A == B

			inc a		; Returns 0 if A == -1 => a$ < b$
			;jp z, __FREE_STR		; Returns 0 if A == B

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return
			jp __FREE_STR


__STRGE:	; Compares a$ >= b$ (HL = ptr a$, DE = ptr b$). Returns FF (True) or 0 (False)
			push hl
			push de
			call __STRCMP
			pop de
			pop hl

			inc a		; Returns 0 if A == -1 => a$ < b$
			;jr z, __FREE_STR

			;ld a, 0FFh	; A = FE now (-2). Set it to FF and return

__FREE_STR: ; This exit point will test A' for bits 0 and 1
				; If bit 0 is 1 => Free memory from HL pointer
				; If bit 1 is 1 => Free memory from DE pointer
				; Finally recovers A, to return the result
			PROC

			LOCAL __FREE_STR2
			LOCAL __FREE_END

			ex af, af'
			bit 0, a
			jr z, __FREE_STR2

			push af
			push de
			call __MEM_FREE
			pop de
			pop af

__FREE_STR2:
			bit 1, a
			jr z, __FREE_END

			ex de, hl
			call __MEM_FREE

__FREE_END:
			ex af, af'
			ret

			ENDP

#line 14322 "Program.zxbas"

#line 1 "strslice.asm"

	; String slicing library
	; HL = Str pointer
	; DE = String start
	; BC = String character end
	; A register => 0 => the HL pointer wont' be freed from the HEAP
	; e.g. a$(5 TO 10) => HL = a$; DE = 5; BC = 10

	; This implements a$(X to Y) being X and Y first and
	; last characters respectively. If X > Y, NULL is returned

	; Otherwise returns a pointer to a$ FROM X to Y (starting from 0)
	; if Y > len(a$), then a$ will be padded with spaces (reallocating
	; it in dynamic memory if needed). Returns pointer (HL) to resulting
	; string. NULL (0) if no memory for padding.
	;





__STRSLICE:			; Callee entry
		pop hl			; Return ADDRESS
		pop bc			; Last char pos
		pop de			; 1st char pos
		ex (sp), hl		; CALLEE. -> String start

__STRSLICE_FAST:	; __FASTCALL__ Entry
		PROC

		LOCAL __CONT
		LOCAL __EMPTY
		LOCAL __FREE_ON_EXIT

		push hl			; Stores original HL pointer to be recovered on exit
		ex af, af'		; Saves A register for later

		push hl
		call __STRLEN
		inc bc			; Last character position + 1 (string starts from 0)
		or a
		sbc hl, bc		; Compares length with last char position
		jr nc, __CONT	; If Carry => We must copy to end of string
		add hl, bc		; Restore back original LEN(a$) in HL
		ld b, h
		ld c, l			; Copy to the end of str
		ccf				; Clears Carry flag for next subtraction

__CONT:
		ld h, b
		ld l, c			; HL = Last char position to copy (1 for char 0, 2 for char 1, etc)
		sbc hl, de		; HL = LEN(a$) - DE => Number of chars to copy
		jr z, __EMPTY	; 0 Chars to copy => Return HL = 0 (NULL STR)
		jr c, __EMPTY	; If Carry => Nothing to return (NULL STR)

		ld b, h
		ld c, l			; BC = Number of chars to copy
		inc bc
		inc bc			; +2 bytes for string length number

		push bc
		push de
		call __MEM_ALLOC
		pop de
		pop bc
		ld a, h
		or l
		jr z, __EMPTY	; Return if NULL (no memory)

		dec bc
		dec bc			; Number of chars to copy (Len of slice)

		ld (hl), c
		inc hl
		ld (hl), b
		inc hl			; Stores new string length

		ex (sp), hl		; Pointer to A$ now in HL; Pointer to new string chars in Stack
		inc hl
		inc hl			; Skip string length
		add hl, de		; Were to start from A$
		pop de			; Start of new string chars
		push de			; Stores it again
		ldir			; Copies BC chars
		pop de
		dec de
		dec de			; Points to String LEN start
		ex de, hl		; Returns it in HL
		jr __FREE_ON_EXIT

__EMPTY:			; Return NULL (empty) string
		pop hl
		ld hl, 0		; Return NULL


__FREE_ON_EXIT:
		ex af, af'		; Recover original A register
		ex (sp), hl		; Original HL pointer

		or a
		call nz, __MEM_FREE

		pop hl			; Recover result
		ret

		ENDP

#line 14324 "Program.zxbas"

#line 1 "swap32.asm"

	; Exchanges current DE HL with the
	; ones in the stack

__SWAP32:
		pop bc ; Return address
	    ex (sp), hl
	    inc sp
	    inc sp
	    ex de, hl
	    ex (sp), hl
	    ex de, hl
	    dec sp
	    dec sp
	    push bc
		ret

#line 14326 "Program.zxbas"


ZXBASIC_USER_DATA:
	_counter EQU 23672
	_hiCounter EQU 23674
_musParamA:
	DEFB 00, 00
_musParamB:
	DEFB 00, 00
_currentOp:
	DEFB 00
_screenScore:
	DEFB 00, 00
_workingScore:
	DEFB 00, 00
_screenLevel:
	DEFB 00
_workingLevel:
	DEFB 00
	_udgAddress EQU 23675
_playedTetrisMusic:
	DEFB 00h
_playedArkaMusic:
	DEFB 00h
_playedRacingMusic:
	DEFB 00h
_playedSnakeMusic:
	DEFB 00h
_playedDestroyerMusic:
	DEFB 00h
_playedGhostMusic:
	DEFB 00h
_playedConstructorMusic:
	DEFB 00h
_playedMatchMusic:
	DEFB 00
_level:
	DEFB 00h
_game:
	DEFB 00
	_chars EQU 23606
	_deathMusic.__DATA__ EQU 25576
_deathMusic:
	DEFW __LABEL1354
_deathMusic.__DATA__.__PTR__:
	DEFW 25576
__LABEL1354:
	DEFW 0000h
	DEFB 02h
	_winMusic.__DATA__ EQU 25668
_winMusic:
	DEFW __LABEL1355
_winMusic.__DATA__.__PTR__:
	DEFW 25668
__LABEL1355:
	DEFW 0000h
	DEFB 02h
	_tetrisIntroMusic.__DATA__ EQU 26108
_tetrisIntroMusic:
	DEFW __LABEL1356
_tetrisIntroMusic.__DATA__.__PTR__:
	DEFW 26108
__LABEL1356:
	DEFW 0000h
	DEFB 02h
	_tetrisLevelMusic.__DATA__ EQU 26308
_tetrisLevelMusic:
	DEFW __LABEL1357
_tetrisLevelMusic.__DATA__.__PTR__:
	DEFW 26308
__LABEL1357:
	DEFW 0000h
	DEFB 02h
	_arkaIntroMusic.__DATA__ EQU 26428
_arkaIntroMusic:
	DEFW __LABEL1358
_arkaIntroMusic.__DATA__.__PTR__:
	DEFW 26428
__LABEL1358:
	DEFW 0000h
	DEFB 02h
	_arkaDeathMusic.__DATA__ EQU 26620
_arkaDeathMusic:
	DEFW __LABEL1359
_arkaDeathMusic.__DATA__.__PTR__:
	DEFW 26620
__LABEL1359:
	DEFW 0000h
	DEFB 02h
	_raceIntroMusic.__DATA__ EQU 26668
_raceIntroMusic:
	DEFW __LABEL1360
_raceIntroMusic.__DATA__.__PTR__:
	DEFW 26668
__LABEL1360:
	DEFW 0000h
	DEFB 02h
	_raceLevelMusic.__DATA__ EQU 26752
_raceLevelMusic:
	DEFW __LABEL1361
_raceLevelMusic.__DATA__.__PTR__:
	DEFW 26752
__LABEL1361:
	DEFW 0000h
	DEFB 02h
	_snakeIntroMusic.__DATA__ EQU 26780
_snakeIntroMusic:
	DEFW __LABEL1362
_snakeIntroMusic.__DATA__.__PTR__:
	DEFW 26780
__LABEL1362:
	DEFW 0000h
	DEFB 02h
	_snakeLevelMusic.__DATA__ EQU 26860
_snakeLevelMusic:
	DEFW __LABEL1363
_snakeLevelMusic.__DATA__.__PTR__:
	DEFW 26860
__LABEL1363:
	DEFW 0000h
	DEFB 02h
	_destroyerIntroMusic.__DATA__ EQU 26888
_destroyerIntroMusic:
	DEFW __LABEL1364
_destroyerIntroMusic.__DATA__.__PTR__:
	DEFW 26888
__LABEL1364:
	DEFW 0000h
	DEFB 02h
	_destroyerLevelMusic.__DATA__ EQU 27024
_destroyerLevelMusic:
	DEFW __LABEL1365
_destroyerLevelMusic.__DATA__.__PTR__:
	DEFW 27024
__LABEL1365:
	DEFW 0000h
	DEFB 02h
	_ghostIntroMusic.__DATA__ EQU 27132
_ghostIntroMusic:
	DEFW __LABEL1366
_ghostIntroMusic.__DATA__.__PTR__:
	DEFW 27132
__LABEL1366:
	DEFW 0000h
	DEFB 02h
	_ghostScarySound.__DATA__ EQU 27252
_ghostScarySound:
	DEFW __LABEL1367
_ghostScarySound.__DATA__.__PTR__:
	DEFW 27252
__LABEL1367:
	DEFW 0000h
	DEFB 02h
	_ghostLevelMusic.__DATA__ EQU 27384
_ghostLevelMusic:
	DEFW __LABEL1368
_ghostLevelMusic.__DATA__.__PTR__:
	DEFW 27384
__LABEL1368:
	DEFW 0000h
	DEFB 02h
	_constructorIntroMusic.__DATA__ EQU 27420
_constructorIntroMusic:
	DEFW __LABEL1369
_constructorIntroMusic.__DATA__.__PTR__:
	DEFW 27420
__LABEL1369:
	DEFW 0000h
	DEFB 02h
	_constructorLevelMusic.__DATA__ EQU 27596
_constructorLevelMusic:
	DEFW __LABEL1370
_constructorLevelMusic.__DATA__.__PTR__:
	DEFW 27596
__LABEL1370:
	DEFW 0000h
	DEFB 02h
	_matchIntroMusic.__DATA__ EQU 27768
_matchIntroMusic:
	DEFW __LABEL1371
_matchIntroMusic.__DATA__.__PTR__:
	DEFW 27768
__LABEL1371:
	DEFW 0000h
	DEFB 02h
	_matchLevelMusic.__DATA__ EQU 28012
_matchLevelMusic:
	DEFW __LABEL1372
_matchLevelMusic.__DATA__.__PTR__:
	DEFW 28012
__LABEL1372:
	DEFW 0000h
	DEFB 02h
_screenCells:
	DEFW __LABEL1373
_screenCells.__DATA__.__PTR__:
	DEFW _screenCells.__DATA__
_screenCells.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1373:
	DEFW 0001h
	DEFW 0014h
	DEFB 01h
_workingCells:
	DEFW __LABEL1374
_workingCells.__DATA__.__PTR__:
	DEFW _workingCells.__DATA__
_workingCells.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1374:
	DEFW 0001h
	DEFW 0014h
	DEFB 01h
_ops:
	DEFW __LABEL1375
_ops.__DATA__.__PTR__:
	DEFW _ops.__DATA__
_ops.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1375:
	DEFW 0001h
	DEFW 00C8h
	DEFB 01h
_screenSymbol:
	DEFW __LABEL1376
_screenSymbol.__DATA__.__PTR__:
	DEFW _screenSymbol.__DATA__
_screenSymbol.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1376:
	DEFW 0001h
	DEFW 0002h
	DEFB 01h
_workingSymbol:
	DEFW __LABEL1377
_workingSymbol.__DATA__.__PTR__:
	DEFW _workingSymbol.__DATA__
_workingSymbol.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1377:
	DEFW 0001h
	DEFW 0002h
	DEFB 01h
_sprites:
	DEFW __LABEL1378
_sprites.__DATA__.__PTR__:
	DEFW _sprites.__DATA__
_sprites.__DATA__:
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 00h
	DEFB 7Fh
	DEFB 41h
	DEFB 5Bh
	DEFB 5Bh
	DEFB 43h
	DEFB 5Fh
	DEFB 7Fh
	DEFB 00h
	DEFB 07h
	DEFB 07h
	DEFB 05h
	DEFB 05h
	DEFB 07h
	DEFB 07h
	DEFB 00h
	DEFB 00h
	DEFB 70h
	DEFB 70h
	DEFB 50h
	DEFB 50h
	DEFB 70h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 77h
	DEFB 77h
	DEFB 55h
	DEFB 55h
	DEFB 77h
	DEFB 77h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 77h
	DEFB 44h
	DEFB 24h
	DEFB 14h
	DEFB 77h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 77h
	DEFB 55h
	DEFB 56h
	DEFB 55h
	DEFB 75h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 60h
	DEFB 40h
	DEFB 60h
	DEFB 40h
	DEFB 60h
	DEFB 00h
	DEFB 0Fh
	DEFB 30h
	DEFB 47h
	DEFB 5Fh
	DEFB 9Ch
	DEFB 0BBh
	DEFB 0B7h
	DEFB 0B7h
	DEFB 0B7h
	DEFB 0B7h
	DEFB 0BBh
	DEFB 9Ch
	DEFB 5Fh
	DEFB 47h
	DEFB 30h
	DEFB 0Fh
	DEFB 0F0h
	DEFB 0Ch
	DEFB 0E2h
	DEFB 0FAh
	DEFB 39h
	DEFB 0DDh
	DEFB 0EDh
	DEFB 0EDh
	DEFB 00h
	DEFB 00h
	DEFB 47h
	DEFB 44h
	DEFB 46h
	DEFB 44h
	DEFB 77h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 57h
	DEFB 54h
	DEFB 56h
	DEFB 54h
	DEFB 27h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 40h
	DEFB 70h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 97h
	DEFB 0D4h
	DEFB 0B6h
	DEFB 94h
	DEFB 97h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 57h
	DEFB 22h
	DEFB 22h
	DEFB 22h
	DEFB 52h
	DEFB 00h
	DEFB 0EDh
	DEFB 0EDh
	DEFB 0DDh
	DEFB 39h
	DEFB 0FAh
	DEFB 0E2h
	DEFB 0Ch
	DEFB 0F0h
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 7Bh
	DEFB 7Bh
	DEFB 7Bh
	DEFB 7Bh
	DEFB 7Bh
	DEFB 7Bh
	DEFB 7Bh
	DEFB 7Bh
	DEFB 00h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 00h
	DEFB 00h
	DEFB 0FFh
	DEFB 0DEh
	DEFB 0DEh
	DEFB 0DEh
	DEFB 0DEh
	DEFB 0DEh
	DEFB 0DEh
	DEFB 0DEh
	DEFB 0DEh
	DEFB 00h
	DEFB 36h
	DEFB 45h
	DEFB 25h
	DEFB 16h
	DEFB 14h
	DEFB 64h
	DEFB 00h
__LABEL1378:
	DEFW 0001h
	DEFW 0008h
	DEFB 01h
	_deadPic.__DATA__ EQU 24616
_deadPic:
	DEFW __LABEL1379
_deadPic.__DATA__.__PTR__:
	DEFW 24616
__LABEL1379:
	DEFW 0000h
	DEFB 02h
	_winPic.__DATA__ EQU 24656
_winPic:
	DEFW __LABEL1380
_winPic.__DATA__.__PTR__:
	DEFW 24656
__LABEL1380:
	DEFW 0000h
	DEFB 02h
	_introScreen.__DATA__ EQU 24576
_introScreen:
	DEFW __LABEL1381
_introScreen.__DATA__.__PTR__:
	DEFW 24576
__LABEL1381:
	DEFW 0000h
	DEFB 02h
	_tetrisPieces.__DATA__ EQU 28080
_tetrisPieces:
	DEFW __LABEL1382
_tetrisPieces.__DATA__.__PTR__:
	DEFW 28080
__LABEL1382:
	DEFW 0002h
	DEFW 0002h
	DEFW 0004h
	DEFB 01h
	_tetrisScreens.__DATA__ EQU 24696
_tetrisScreens:
	DEFW __LABEL1383
_tetrisScreens.__DATA__.__PTR__:
	DEFW 24696
__LABEL1383:
	DEFW 0001h
	DEFW 000Ah
	DEFB 02h
_expandedPiece:
	DEFW __LABEL1384
_expandedPiece.__DATA__.__PTR__:
	DEFW _expandedPiece.__DATA__
_expandedPiece.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1384:
	DEFW 0002h
	DEFW 0004h
	DEFW 0004h
	DEFB 01h
_expandedSize:
	DEFW __LABEL1385
_expandedSize.__DATA__.__PTR__:
	DEFW _expandedSize.__DATA__
_expandedSize.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL1385:
	DEFW 0001h
	DEFW 0002h
	DEFB 01h
	_arkaScreens.__DATA__ EQU 24896
_arkaScreens:
	DEFW __LABEL1386
_arkaScreens.__DATA__.__PTR__:
	DEFW 24896
__LABEL1386:
	DEFW 0001h
	DEFW 000Ch
	DEFB 02h
	_snakeScreens.__DATA__ EQU 25136
_snakeScreens:
	DEFW __LABEL1387
_snakeScreens.__DATA__.__PTR__:
	DEFW 25136
__LABEL1387:
	DEFW 0001h
	DEFW 0014h
	DEFB 02h
	_bigGhost.__DATA__ EQU 25536
_bigGhost:
	DEFW __LABEL1388
_bigGhost.__DATA__.__PTR__:
	DEFW 25536
__LABEL1388:
	DEFW 0000h
	DEFB 02h
__LABEL1254:
	DEFB 0FFh
__LABEL1255:
	DEFB 01h
__LABEL1260:
	DEFB 04h
__LABEL1283:
	DEFB 01h
__LABEL1284:
	DEFB 14h
__LABEL1285:
	DEFB 03h
__LABEL1286:
	DEFB 04h
__LABEL1309:
	DEFB 04h
__LABEL1310:
	DEFB 01h
	DEFB 00h
	DEFB 02h
	DEFB 00h
	DEFB 01h
__LABEL1311:
	DEFB 01h
__LABEL1314:
	DEFB 04h
__LABEL1318:
	DEFB 04h
__LABEL1327:
	DEFB 04h
__LABEL1330:
	DEFB 04h
__LABEL1331:
	DEFB 00h
	DEFB 00h
	DEFB 01h
__LABEL1332:
	DEFB 01h
__LABEL1338:
	DEFB 01h
__LABEL1339:
	DEFB 01h
__LABEL1340:
	DEFB 01h
__LABEL1341:
	DEFB 01h
__LABEL1342:
	DEFB 01h
__LABEL1343:
	DEFB 01h
__LABEL1344:
	DEFB 01h
__LABEL1345:
	DEFB 01h
__LABEL1346:
	DEFB 01h
__LABEL1347:
	DEFB 01h
__LABEL1348:
	DEFB 01h
__LABEL1349:
	DEFB 01h
__LABEL1350:
	DEFB 01h
__LABEL1351:
	DEFB 01h
__LABEL1352:
	DEFB 01h
__LABEL1353:
	DEFB 01h
ZXBASIC_MEM_HEAP:
	; Defines DATA END
ZXBASIC_USER_DATA_END EQU ZXBASIC_MEM_HEAP + ZXBASIC_HEAP_SIZE
	; Defines USER DATA Length in bytes
ZXBASIC_USER_DATA_LEN EQU ZXBASIC_USER_DATA_END - ZXBASIC_USER_DATA
	END
